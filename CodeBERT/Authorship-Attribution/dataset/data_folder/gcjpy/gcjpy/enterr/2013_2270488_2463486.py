#
 # Google Code Jam 2013
 # Round 0: C. Fair and Square
 # submission by EnTerr
 #
 
 '''
 Limits
 
 Small dataset       1 <= T <= 100, 1 <= A <= B <= 1000.
 First large dataset 1 <= T <= 10000. 1 <= A <= B <= 1014.
 Second large dataset    1 <= T <= 1000. 1 <= A <= B <= 10100.
 
 Sample
 *** Input 
 3
 1 4
 10 120
 100 1000
  	
 *** Output 
 Case #1: 2
 Case #2: 0
 Case #3: 2
 
 
 '''
 
 #import psyco
 #psyco.full()
 
 import sys
 from time import clock
 
 inf = open(sys.argv[1])
 def input(): return inf.readline().strip()
 
 # "cheat" from http://www.worldofnumbers.com/allsquar.htm
 # "Exhaustive list of Palindromic Squares up to length 31"
 # roots of palindromic squares
 pal_sqr_roots = '''1 
 2 
 3 
 11 
 22 
 26 
 101 
 111 
 121 
 202 
 212 
 264 
 307 
 836 
 1001 
 1111 
 2002 
 2285 
 2636 
 10001 
 10101 
 10201 
 11011 
 11111 
 11211 
 20002 
 20102 
 22865 
 24846 
 30693 
 100001 
 101101 
 110011 
 111111 
 200002 
 798644 
 1000001 
 1001001 
 1002001 
 1010101 
 1011101 
 1012101 
 1042151 
 1100011 
 1101011 
 1102011 
 1109111 
 1110111 
 1111111 
 1270869 
 2000002 
 2001002 
 2012748 
 2294675 
 3069307 
 10000001 
 10011001 
 10100101 
 10111101 
 11000011 
 11011011 
 11100111 
 11111111 
 11129361 
 12028229 
 12866669 
 20000002 
 30001253 
 64030648 
 100000001 
 100010001 
 100020001 
 100101001 
 100111001 
 100121001 
 101000101 
 101010101 
 101020101 
 101101101 
 101111101 
 110000011 
 110010011 
 110020011 
 110091011 
 110101011 
 110111011 
 111000111 
 111010111 
 111091111 
 111101111 
 111111111 
 200000002 
 200010002 
 306930693 
 1000000001 
 1000110001 
 1001001001 
 1001111001 
 1010000101 
 1010110101 
 1011001101 
 1011111101 
 1100000011 
 1100110011 
 1101001011 
 1101111011 
 1110000111 
 1110110111 
 1111001111 
 2000000002 
 2062386218 
 2481623254 
 10000000001 
 10000100001 
 10000200001 
 10001010001 
 10001110001 
 10001210001 
 10010001001 
 10010101001 
 10010201001 
 10011011001 
 10011111001 
 10100000101 
 10100100101 
 10100200101 
 10101010101 
 10101110101 
 10106064399 
 10109901101 
 10110001101 
 10110101101 
 10110911101 
 10111011101 
 10111111101 
 10207355549 
 11000000011 
 11000100011 
 11000200011 
 11000910011 
 11001010011 
 11001110011 
 11010001011 
 11010101011 
 11010911011 
 11011011011 
 11011111011 
 11100000111 
 11100100111 
 11100910111 
 11101010111 
 11101110111 
 11110001111 
 11110101111 
 13579355059 
 20000000002 
 20000100002 
 22865150135 
 30101273647 
 30693069307 
 83163115486 
 100000000001 
 100001100001 
 100010010001 
 100011110001 
 100100001001 
 100101101001 
 100110011001 
 100111111001 
 101000000101 
 101001100101 
 101010010101 
 101011110101 
 101100001101 
 101101101101 
 101110011101 
 101116809851 
 110000000011 
 110001100011 
 110010010011 
 110011110011 
 110100001011 
 110101101011 
 110110011011 
 111000000111 
 111001100111 
 111010010111 
 111100001111 
 111283619361 
 112247658961 
 128817084669 
 200000000002 
 1000000000001 
 1000001000001 
 1000002000001 
 1000010100001 
 1000011100001 
 1000012100001 
 1000100010001 
 1000101010001 
 1000102010001 
 1000110110001 
 1000111110001 
 1001000001001 
 1001001001001 
 1001002001001 
 1001010101001 
 1001011101001 
 1001100011001 
 1001101011001 
 1001110111001 
 1001111111001 
 1010000000101 
 1010001000101 
 1010002000101 
 1010010100101 
 1010011100101 
 1010099010101 
 1010100010101 
 1010101010101 
 1010109110101 
 1010110110101 
 1010111110101 
 1011000001101 
 1011001001101 
 1011010101101 
 1011011101101 
 1011099011101 
 1011100011101 
 1011101011101 
 1100000000011 
 1100001000011 
 1100002000011 
 1100009100011 
 1100010100011 
 1100011100011 
 1100100010011 
 1100101010011 
 1100110110011 
 1100111110011 
 1101000001011 
 1101001001011 
 1101009101011 
 1101010101011 
 1101011101011 
 1101100011011 
 1101101011011 
 1110000000111 
 1110001000111 
 1110009100111 
 1110010100111 
 1110011100111 
 1110100010111 
 1110101010111 
 1111000001111 
 1111001001111 
 1349465117841 
 2000000000002 
 2000001000002 
 2149099165358 
 2634812417864 
 3069306930693 
 6360832925898 
 10000000000001 
 10000011000001 
 10000100100001 
 10000111100001 
 10001000010001 
 10001011010001 
 10001100110001 
 10001111110001 
 10010000001001 
 10010011001001 
 10010100101001 
 10010111101001 
 10011000011001 
 10011011011001 
 10011100111001 
 10100000000101 
 10100011000101 
 10100100100101 
 10100111100101 
 10101000010101 
 10101011010101 
 10101100110101 
 10110000001101 
 10110011001101 
 10110100101101 
 10111000011101 
 11000000000011 
 11000011000011 
 11000100100011 
 11000111100011 
 11001000010011 
 11001011010011 
 11001100110011 
 11010000001011 
 11010011001011 
 11010100101011 
 11011000011011 
 11100000000111 
 11100011000111 
 11100100100111 
 11101000010111 
 11110000001111 
 20000000000002 
 30395080190573 
 69800670077028 
 98275825201587 
 100000000000001 
 100000010000001 
 100000020000001 
 100000101000001 
 100000111000001 
 100000121000001 
 100001000100001 
 100001010100001 
 100001020100001 
 100001101100001 
 100001111100001 
 100010000010001 
 100010010010001 
 100010020010001 
 100010101010001 
 100010111010001 
 100011000110001 
 100011010110001 
 100011101110001 
 100011111110001 
 100100000001001 
 100100010001001 
 100100020001001 
 100100101001001 
 100100111001001 
 100101000101001 
 100101010101001 
 100101101101001 
 100101111101001 
 100109990011001 
 100110000011001 
 100110010011001 
 100110091011001 
 100110101011001 
 100110111011001 
 100110990111001 
 100111000111001 
 100111010111001 
 101000000000101 
 101000010000101 
 101000020000101 
 101000101000101 
 101000111000101 
 101000990100101 
 101001000100101 
 101001010100101 
 101001091100101 
 101001101100101 
 101001111100101 
 101010000010101 
 101010010010101 
 101010101010101 
 101010111010101 
 101010990110101 
 101011000110101 
 101011010110101 
 101100000001101 
 101100010001101 
 101100101001101 
 101100111001101 
 101101000101101 
 101101010101101 
 101110000011101 
 101110010011101 
 110000000000011 
 110000010000011 
 110000020000011 
 110000091000011 
 110000101000011 
 110000111000011 
 110001000100011 
 110001010100011 
 110001101100011 
 110001111100011 
 110010000010011 
 110010010010011 
 110010091010011 
 110010101010011 
 110010111010011 
 110011000110011 
 110011010110011 
 110100000001011 
 110100010001011 
 110100101001011 
 110100111001011 
 110101000101011 
 110101010101011 
 110110000011011 
 110110010011011 
 111000000000111 
 111000010000111 
 111000091000111 
 111000101000111 
 111000111000111 
 111001000100111 
 111001010100111 
 111010000010111 
 111010010010111 
 111100000001111 
 111100010001111 
 129610990752569 
 200000000000002 
 200000010000002 
 210786628549538 
 314155324482867 
 1000000000000000 
 1000000110000000 
 1000001001000000 
 1000001111000000 
 1000010000100000 
 1000010110100000 
 1000011001100000 
 1000011111100000 
 1000100000010000 
 1000100110010000 
 1000101001010000 
 1000101111010000 
 1000110000110000 
 1000110110110000 
 1000111001110000 
 1001000000001000 
 1001000110001000 
 1001001001001000 
 1001001111001000 
 1001010000101000 
 1001010110101000 
 1001011001101000 
 1001100000011000 
 1001100110011000 
 1001101001011000 
 1001110000111000 
 1010000000000100 
 1010000110000100 
 1010001001000100 
 1010001111000100 
 1010010000100100 
 1010010110100100 
 1010011001100100 
 1010100000010100 
 1010100110010100 
 1010101001010100 
 1010110000110100 
 1011000000001100 
 1011000110001100 
 1011001001001100 
 1011010000101100 
 1011100000011100 
 1100000000000010 
 1100000110000010 
 1100001001000010 
 1100001111000010 
 1100010000100010 
 1100010110100010 
 1100011001100010 
 1100100000010010 
 1100100110010010 
 1100101001010010 
 1100110000110010 
 1101000000001010 
 1101000110001010 
 1101001001001010 
 1101010000101010 
 1101100000011010 
 1110000000000110 
 1110000110000110 
 1110001001000110 
 1110010000100110 
 1110100000010110 
 1111000000001110 
 2000000000000000 
 2201019508986470 
 2564053868197730 
 3066446727654240 
 3107974295870660 
 3138199296186060'''
 pal_sqr_roots = map(int, pal_sqr_roots.split())
 
 # see also http://web.archive.org/web/20020614225321/http://www.geocities.com/williamrexmarshall/math/palsq.html
 # http://www.worldofnumbers.com/square.htm
 # http://mathforum.org/library/drmath/view/51510.html
 
 
 def is_palindrome(n):
     return str(n)[::-1] == str(n)
 
 palindromic_roots = [x for x in pal_sqr_roots if is_palindrome(x)]
 
 fair_and_square = [x*x for x in palindromic_roots]
 
 
 def get_num_fair_and_square(a, b):
     return len([x for x in fair_and_square if a <= x <= b])
 
 for caseNo in range(1, int(input())+1):
     #tm = clock()
     a,b = map(int, input().split())
     print 'Case #%d:' % caseNo, get_num_fair_and_square(a, b)
     #print >>sys.stderr, caseNo, clock() - tm
 
