"""Usage:\n      pypy X.py < X-size.in > X-size.out\n  or sometimes\n      python X.py < X-size.in > X-size.out\n  """\n  \n  def setup(infile):\n      return locals()\n  \n  def reader(testcase, infile, C=None, **ignore):\n      P = map(int, infile.next().split())\n      return locals()\n  \n  def solver(testcase, N=None, P=None, I=None, T=None, S=None, C=None, **ignore):\n  \n      R, C, M = P\n      MM = M\n  \n      F = np.array([['.'] * C] * R)\n      while M > 0:\n          if R >= C and M >= C and R > 2:\n              M -= C\n              R -= 1\n              F[R] = '*'\n          elif C > R  and M >= R and C > 2:\n              M -= R\n              C -= 1\n              F[:, C] = '*'\n          elif R > 2 and C > 2 and (R > 3 or C > 3 or M == 1):\n              if M < C - 1:\n                  R -= 1\n                  F[R, C - M:C] = '*'\n              elif M < R - 1:\n                  C -= 1\n                  F[R - M:R, C] = '*'\n              elif M == C - 1:\n                  R -= 1\n                  F[R, C - M + 1:C] = '*'\n                  F[R - 1, C - 1] = '*'\n              else:\n                  C -= 1\n                  F[R - M + 1:R, C] = '*'\n                  F[R - 1, C - 1] = '*'\n              M = 0\n          elif M == R * C - 1:\n              F[:, :] = '*'\n              M = 0\n          else:\n              return 'Case #%s:\n%s\n' % (testcase, 'Impossible')\n  \n      F[0, 0] = 'c'\n      assert (F == '*').sum() == MM\n      return 'Case #%s:\n%s\n' % (testcase, '\n'.join(''.join(f.tolist()) for f in F))\n  \n  if __name__ == '__main__':\n      T = int(sys.stdin.next())\n      common = setup(sys.stdin)\n      for t in xrange(1, T+1):\n          sys.stdout.write(solver(**reader(t, **common)))\n <CODESPLIT> 0
"""Usage:\n      pypy X.py < X-size.in > X-size.out\n  or sometimes\n      python X.py < X-size.in > X-size.out\n  """\n  \n  def setup(infile):\n      return locals()\n  \n  def reader(testcase, infile, C=None, **ignore):\n      N = int(infile.next())\n      I = [map(int, infile.next().split()) for i in range(4)]\n      T = int(infile.next())\n      S = [map(int, infile.next().split()) for i in range(4)]\n      return locals()\n  \n  def solver(testcase, N=None, P=None, I=None, T=None, S=None, C=None, **ignore):\n  \n      res = set(I[N-1]) & set(S[T-1])\n      if len(res) == 1:\n          res = res.pop()\n      elif len(res) > 1:\n          res = 'Bad magician!'\n      else:\n          res = 'Volunteer cheated!'\n      return 'Case #%s: %s\n' % (testcase, res)\n  \n  if __name__ == '__main__':\n      T = int(sys.stdin.next())\n      common = setup(sys.stdin)\n      for t in xrange(1, T+1):\n          sys.stdout.write(solver(**reader(t, **common)))\n <CODESPLIT> 0
 def solve():\n      h, w, m = map(int, raw_input().split())\n      if h == 1:\n          print 'c' + '.' * (h * w - m - 1) + '*' * m\n      elif w == 1:\n          for c in 'c' + '.' * (h * w - m - 1) + '*' * m:\n              print c\n      elif h * w - m == 1:\n          print 'c' + '*' * (w - 1)\n          for _ in xrange(h-1):\n              print '*' * w\n      else:\n          m = h * w - m\n          for i in xrange(h-1):\n              for j in xrange(w-1):\n                  t = (i + 2) * 2 + (j + 2) * 2 - 4\n                  r = (i + 2) * (j + 2)\n                  if t <= m <= r:\n                      a = [['*'] * w for _ in xrange(h)]\n                      for k in xrange(i+2):\n                          a[k][0] = '.'\n                          a[k][1] = '.'\n                      for k in xrange(j+2):\n                          a[0][k] = '.'\n                          a[1][k] = '.'\n                      for y, x in product(range(2, i+2), range(2, j+2)):\n                          if y == 1 and x == 1:\n                              continue\n                          if t >= m:\n                              break\n                          a[y][x] = '.'\n                          t += 1\n                      a[0][0] = 'c'\n                      for s in a:\n                          print ''.join(s)\n                      return\n          print 'Impossible'\n  for t in xrange(int(raw_input())):\n      print "Case #%d:" % (t + 1)\n      solve()\n <CODESPLIT> 1
def solve():\n      r1 = int(raw_input())\n      a1 = [map(int, raw_input().split()) for i in xrange(4)]\n      r2 = int(raw_input())\n      a2 = [map(int, raw_input().split()) for i in xrange(4)]\n      ans = -1\n      for i in xrange(1, 17):\n          if i in a1[r1-1] and i in a2[r2-1]:\n              if ans != -1:\n                  return "Bad magician!"\n              ans = i\n      if ans == -1:\n          return "Volunteer cheated!"\n      return ans\n  for t in xrange(int(raw_input())):\n      print "Case #%d:" % (t + 1), solve()\n <CODESPLIT> 1
 \n  def makeBoardR(b):\n  	numR, numC, numMines, filledR, filledC = b\n  	q = numMines / numR\n  	r = numMines % numR\n  \n  	if q <= numC-2 and r == 0:\n  		board = ["*"*(filledC + numC) for x in range (filledR)]\n  		board.append( "*"*(filledC+q)+"."*(numC-q) )\n  		board.append( "*"*(filledC+q)+"."*(numC-q-1)+"c" )\n  		output = "\n".join(board)\n  	elif numMines == numR * numC - 1:\n  		board = ["*"*(filledC + numC) for x in range (filledR+1)]\n  		board.append( "*"*(filledC+numC-1)+"c" )\n  		output = "\n".join(board)\n  	else:\n  		output = "Impossible"\n  \n  	return output\n  \n  def makeBoardC(b):\n  	numR, numC, numMines, filledR, filledC = b\n  	q = numMines / numC\n  	r = numMines % numC\n  \n  	if q <= numR-2 and r == 0:\n  		board = ["*"*(filledC+numC) for x in range(filledR+q)]\n  		for x in range( numR-1-q ):\n  			board.append( "*"*filledC + ".." )\n  		board.append( "*"*filledC + ".c" )\n  		output = "\n".join(board)\n  	elif numMines == numR * numC - 1:\n  		board = ["*"*(filledC+numC) for x in range(filledR+numR-1)]\n  		board.append( "*"*(filledC+numC-1) + "c" )\n  		output = "\n".join(board)\n  	else:\n  		output = "Impossible"\n  	return output\n  \n  def makeBoard(b):\n  	numR, numC, numMines, filledR, filledC = b\n  	q = numMines / (numC-2)\n  	r = numMines % (numC-2)\n  \n  	board = ["*"*(numC+filledC) for x in range(filledR)]\n  	for x in range(q):\n  		board.append( "*"*(numC-2+filledC)+".." )\n  	board.append( "*"*(r+filledC)+"."*(numC-r) )\n  	for x in range(numR-q-2):\n  		board.append( "*"*filledC+"."*numC )\n  	board.append( "*"*filledC + "."*(numC-1) + "c" )\n  	return "\n".join(board)\n  \n  def makeBoard0(b):\n  	numR,numC,numMines,filledR,filledC = b\n  	board = ["*"*(numC+filledC) for x in range(filledR)]\n  	for x in range(numR-1):\n  		board.append( "*"*(filledC)+"."*numC )\n  	board.append( "*"*(filledC) + "."*(numC-1) + "c" )\n  	return "\n".join(board)\n  \n  f = open( sys.argv[1] )\n  f.readline()\n  \n  numCase = 1\n  l = f.readline()\n  while l != "":\n  	numR, numC, numMines = [int(x) for x in l.split()]\n  \n  	boards = deque()\n  	if numR == 1:\n  		if numC == 1 and numMines == 0:\n  			output = "c"\n  		elif numC == 1 and numMines > 0:\n  			output = "Impossible"\n  		else:\n  			output = "*"*numMines + "."*(numC-numMines-1) + "c"\n  	elif numC == 1:\n  		output = "\n".join("*"*numMines + "."*(numR-numMines-1) + "c")\n  	else:\n  		boards.append( (numR,numC,numMines,0,0) )\n  		output = "Impossible"\n  \n  	while output == "Impossible" and len(boards) > 0:\n  		b = boards.popleft()\n  		numR,numC,numMines,filledR,filledC = b\n  		if numMines == 0:\n  			output = makeBoard0(b)\n  			break\n  \n  		if numMines >= numC and numR > 2:\n  			boards.append( (numR-1,numC,numMines-numC,filledR+1,filledC) )\n  		if numMines >= numR and numC > 2:\n  			boards.append( (numR,numC-1,numMines-numR,filledR,filledC+1) )\n  \n  		if numMines <= (numR-2)*(numC-2):\n  			output = makeBoard(b)\n  \n  		if numR == 2:\n  			output = makeBoardR(b)\n  \n  		if numC == 2:\n  			output = makeBoardC(b)\n  		\n  	print "Case #"+str(numCase)+":\n"+output\n  	l = f.readline()\n  	numCase += 1\n <CODESPLIT> 2
 \n  if __name__ == "__main__":\n  	f = open( sys.argv[1] )\n  	int(f.readline())\n  		\n  	num = 1\n  	l = f.readline()\n  	while l != "":\n  		row1 = int(l)\n  		rows = [ f.readline() for x in range(4) ]\n  		row1 = [int(x) for x in rows[row1-1].split()]\n  \n  		row2 = int(f.readline())\n  		rows = [f.readline() for x in range(4)]\n  		row2 = [int(x) for x in rows[row2-1].split()]\n  \n  		result = set(row1) & set(row2)\n  		if len(result) == 1:\n  			output = str(result.pop())\n  		elif len(result) > 1:\n  			output = "Bad magician!"\n  		else:\n  			output = "Volunteer cheated!"\n  \n  		print "Case #"+str(num)+": "+output\n  		num += 1\n  		l = f.readline()\n  		\n <CODESPLIT> 2
t = int(raw_input())\n  \n  for case in range(t):\n  	print 'Case #'+str(case+1)+':'\n  	r, c, m = raw_input().split()\n  	r = int(r)\n  	c = int(c)\n  	m = int(m)\n  \n  	if m==0:\n  		print 'c' + ('.'*(c-1))\n  		for i in range(r-1):\n  			print '.'*c\n  	elif r == 1:\n  		print 'c'+('.'*(c-m-1))+('*'*(m))\n  	elif c == 1:\n  		print 'c'\n  		for i in range(r-m-1):\n  			print '.'\n  		for i in range(m):\n  			print '*'\n  	elif r == 2:\n  		if m%2==0 and c>2 and m<r*c-2:\n  			print 'c'+('.'*(c-m/2-1))+('*'*(m/2))\n  			print ('.'*(c-m/2))+('*'*(m/2))\n  		elif m == r*c - 1:\n  			print 'c'+('*'*(c-1))\n  			print '*'*c\n  		else:\n  			print 'Impossible'\n  	elif c == 2:\n  		if m%2==0 and r>2 and m<r*c-2:\n  			print 'c.'\n  			for i in range(r-m/2-1):\n  				print '..'\n  			for i in range(m/2):\n  				print '**'\n  		elif m == r*c - 1:\n  			print 'c*'\n  			for i in range(r-1):\n  				print '**'\n  		else:\n  			print 'Impossible'\n  	elif c == 3 and r == 3:\n  		if m == 1:\n  			print 'c..'\n  			print '...'\n  			print '..*'\n  		elif m == 2:\n  			print 'Impossible'\n  		elif m == 3:\n  			print 'c..'\n  			print '...'\n  			print '***'\n  		elif m == 4:\n  			print 'Impossible'\n  		elif m == 5:\n  			print 'c.*'\n  			print '..*'\n  			print '***'\n  		elif m == 6:\n  			print 'Impossible'\n  		elif m == 7:\n  			print 'Impossible'\n  		elif m == 8:\n  			print 'c**'\n  			print '***'\n  			print '***'\n  	elif c == 3 and r == 4:\n  		if m == 1:\n  			print 'c..'\n  			print '...'\n  			print '...'\n  			print '..*'\n  		elif m == 2:\n  			print 'c..'\n  			print '...'\n  			print '..*'\n  			print '..*'\n  		elif m == 3:\n  			print 'c..'\n  			print '...'\n  			print '...'\n  			print '***'\n  		elif m == 4:\n  			print 'c.*'\n  			print '..*'\n  			print '..*'\n  			print '..*'\n  		elif m == 5:\n  			print 'Impossible'\n  		elif m == 6:\n  			print 'c..'\n  			print '...'\n  			print '***'\n  			print '***'\n  		elif m == 7:\n  			print 'Impossible'\n  		elif m == 8:\n  			print 'c.*'\n  			print '..*'\n  			print '***'\n  			print '***'\n  		elif m == 9:\n  			print 'Impossible'\n  		elif m == 10:\n  			print 'Impossible'\n  		elif m == 11:\n  			print 'c**'\n  			print '***'\n  			print '***'\n  			print '***'\n  	elif c == 3 and r == 5:\n  		if m == 1:\n  			print 'c..'\n  			print '...'\n  			print '...'\n  			print '...'\n  			print '..*'\n  		elif m == 2:\n  			print 'c..'\n  			print '...'\n  			print '...'\n  			print '..*'\n  			print '..*'\n  		elif m == 3:\n  			print 'c..'\n  			print '...'\n  			print '..*'\n  			print '..*'\n  			print '..*'\n  		elif m == 4:\n  			print 'c..'\n  			print '...'\n  			print '...'\n  			print '..*'\n  			print '***'\n  		elif m == 5:\n  			print 'c.*'\n  			print '..*'\n  			print '..*'\n  			print '..*'\n  			print '..*'\n  		elif m == 6:\n  			print 'c..'\n  			print '...'\n  			print '...'\n  			print '***'\n  			print '***'\n  		elif m == 7:\n  			print 'c..'\n  			print '...'\n  			print '..*'\n  			print '***'\n  			print '***'\n  		elif m == 8:\n  			print 'Impossible'\n  		elif m == 9:\n  			print 'c..'\n  			print '...'\n  			print '***'\n  			print '***'\n  			print '***'\n  		elif m == 10:\n  			print 'Impossible'\n  		elif m == 11:\n  			print 'c.*'\n  			print '..*'\n  			print '***'\n  			print '***'\n  			print '***'\n  		elif m == 12:\n  			print 'Impossible'\n  		elif m == 13:\n  			print 'Impossible'\n  		elif m == 14:\n  			print 'c**'\n  			print '***'\n  			print '***'\n  			print '***'\n  			print '***'\n  	elif c == 4 and r == 3:\n  		if m == 1:\n  			print 'c...'\n  			print '....'\n  			print '...*'\n  		elif m == 2:\n  			print 'c...'\n  			print '...*'\n  			print '...*'\n  		elif m == 3:\n  			print 'c..*'\n  			print '...*'\n  			print '...*'\n  		elif m == 4:\n  			print 'c...'\n  			print '....'\n  			print '****'\n  		elif m == 5:\n  			print 'Impossible'\n  		elif m == 6:\n  			print 'c.**'\n  			print '..**'\n  			print '..**'\n  		elif m == 7:\n  			print 'Impossible'\n  		elif m == 8:\n  			print 'c.**'\n  			print '..**'\n  			print '****'\n  		elif m == 9:\n  			print 'Impossible'\n  		elif m == 10:\n  			print 'Impossible'\n  		elif m == 11:\n  			print 'c***'\n  			print '****'\n  			print '****'\n  	elif c == 4 and r == 4:\n  		if m == 1:\n  			print 'c...'\n  			print '....'\n  			print '....'\n  			print '...*'\n  		elif m == 2:\n  			print 'c...'\n  			print '....'\n  			print '....'\n  			print '..**'\n  		elif m == 3:\n  			print 'c...'\n  			print '....'\n  			print '...*'\n  			print '..**'\n  		elif m == 4:\n  			print 'c...'\n  			print '....'\n  			print '....'\n  			print '****'\n  		elif m == 5:\n  			print 'c...'\n  			print '....'\n  			print '...*'\n  			print '****'\n  		elif m == 6:\n  			print 'c...'\n  			print '....'\n  			print '..**'\n  			print '****'\n  		elif m == 7:\n  			print 'c..*'\n  			print '...*'\n  			print '...*'\n  			print '****'\n  		elif m == 8:\n  			print 'c...'\n  			print '....'\n  			print '****'\n  			print '****'\n  		elif m == 9:\n  			print 'Impossible'\n  		elif m == 10:\n  			print 'c.**'\n  			print '..**'\n  			print '..**'\n  			print '****'\n  		elif m == 11:\n  			print 'Impossible'\n  		elif m == 12:\n  			print 'c.**'\n  			print '..**'\n  			print '****'\n  			print '****'\n  		elif m == 13:\n  			print 'Impossible'\n  		elif m == 14:\n  			print 'Impossible'\n  		elif m == 15:\n  			print 'c***'\n  			print '****'\n  			print '****'\n  			print '****'\n  	elif c == 4 and r == 5:\n  		if m == 1:\n  			print 'c...'\n  			print '....'\n  			print '....'\n  			print '....'\n  			print '...*'\n  		elif m == 2:\n  			print 'c...'\n  			print '....'\n  			print '....'\n  			print '....'\n  			print '..**'\n  		elif m == 3:\n  			print 'c...'\n  			print '....'\n  			print '...*'\n  			print '...*'\n  			print '...*'\n  		elif m == 4:\n  			print 'c...'\n  			print '....'\n  			print '....'\n  			print '....'\n  			print '****'\n  		elif m == 5:\n  			print 'c..*'\n  			print '...*'\n  			print '...*'\n  			print '...*'\n  			print '...*'\n  		elif m == 6:\n  			print 'c...'\n  			print '....'\n  			print '....'\n  			print '..**'\n  			print '****'\n  		elif m == 7:\n  			print 'c..*'\n  			print '...*'\n  			print '...*'\n  			print '..**'\n  			print '..**'\n  		elif m == 8:\n  			print 'c...'\n  			print '....'\n  			print '....'\n  			print '****'\n  			print '****'\n  		elif m == 9:\n  			print 'c..*'\n  			print '...*'\n  			print '...*'\n  			print '..**'\n  			print '****'\n  		elif m == 10:\n  			print 'c.**'\n  			print '..**'\n  			print '..**'\n  			print '..**'\n  			print '..**'\n  		elif m == 11:\n  			print 'c..*'\n  			print '...*'\n  			print '...*'\n  			print '****'\n  			print '****'\n  		elif m == 12:\n  			print 'c...'\n  			print '....'\n  			print '****'\n  			print '****'\n  			print '****'\n  		elif m == 13:\n  			print 'Impossible'\n  		elif m == 14:\n  			print 'c..*'\n  			print '...*'\n  			print '****'\n  			print '****'\n  			print '****'\n  		elif m == 15:\n  			print 'Impossible'\n  		elif m == 16:\n  			print 'c.**'\n  			print '..**'\n  			print '****'\n  			print '****'\n  			print '****'\n  		elif m == 17:\n  			print 'Impossible'\n  		elif m == 18:\n  			print 'Impossible'\n  		elif m == 19:\n  			print 'c***'\n  			print '****'\n  			print '****'\n  			print '****'\n  			print '****'\n  	elif c == 5 and r == 3:\n  		if m == 1:\n  			print 'c....'\n  			print '.....'\n  			print '....*'\n  		elif m == 2:\n  			print 'c....'\n  			print '.....'\n  			print '...**'\n  		elif m == 3:\n  			print 'c....'\n  			print '.....'\n  			print '..***'\n  		elif m == 4:\n  			print 'c...*'\n  			print '....*'\n  			print '...**'\n  		elif m == 5:\n  			print 'c....'\n  			print '.....'\n  			print '*****'\n  		elif m == 6:\n  			print 'c..**'\n  			print '...**'\n  			print '...**'\n  		elif m == 7:\n  			print 'c..**'\n  			print '...**'\n  			print '..***'\n  		elif m == 8:\n  			print 'Impossible'\n  		elif m == 9:\n  			print 'c.***'\n  			print '..***'\n  			print '..***'\n  		elif m == 10:\n  			print 'Impossible'\n  		elif m == 11:\n  			print 'c.***'\n  			print '..***'\n  			print '*****'\n  		elif m == 12:\n  			print 'Impossible'\n  		elif m == 13:\n  			print 'Impossible'\n  		elif m == 14:\n  			print 'c****'\n  			print '*****'\n  			print '*****'\n  	elif c == 5 and r == 4:\n  		if m == 1:\n  			print 'c....'\n  			print '.....'\n  			print '.....'\n  			print '....*'\n  		elif m == 2:\n  			print 'c....'\n  			print '.....'\n  			print '.....'\n  			print '...**'\n  		elif m == 3:\n  			print 'c....'\n  			print '.....'\n  			print '.....'\n  			print '..***'\n  		elif m == 4:\n  			print 'c...*'\n  			print '....*'\n  			print '....*'\n  			print '....*'\n  		elif m == 5:\n  			print 'c....'\n  			print '.....'\n  			print '.....'\n  			print '*****'\n  		elif m == 6:\n  			print 'c...*'\n  			print '....*'\n  			print '....*'\n  			print '..***'\n  		elif m == 7:\n  			print 'c....'\n  			print '.....'\n  			print '...**'\n  			print '*****'\n  		elif m == 8:\n  			print 'c..**'\n  			print '...**'\n  			print '...**'\n  			print '...**'\n  		elif m == 9:\n  			print 'c...*'\n  			print '....*'\n  			print '...**'\n  			print '*****'\n  		elif m == 10:\n  			print 'c....'\n  			print '.....'\n  			print '*****'\n  			print '*****'\n  		elif m == 11:\n  			print 'c..**'\n  			print '...**'\n  			print '...**'\n  			print '*****'\n  		elif m == 12:\n  			print 'c.***'\n  			print '..***'\n  			print '..***'\n  			print '..***'\n  		elif m == 13:\n  			print 'Impossible'\n  		elif m == 14:\n  			print 'c.***'\n  			print '..***'\n  			print '..***'\n  			print '*****'\n  		elif m == 15:\n  			print 'Impossible'\n  		elif m == 16:\n  			print 'c.***'\n  			print '..***'\n  			print '*****'\n  			print '*****'\n  		elif m == 17:\n  			print 'Impossible'\n  		elif m == 18:\n  			print 'Impossible'\n  		elif m == 19:\n  			print 'c****'\n  			print '*****'\n  			print '*****'\n  			print '*****'\n  	elif c == 5 and r == 5:\n  		if m == 1:\n  			print 'c....'\n  			print '.....'\n  			print '.....'\n  			print '.....'\n  			print '....*'\n  		elif m == 2:\n  			print 'c....'\n  			print '.....'\n  			print '.....'\n  			print '.....'\n  			print '...**'\n  		elif m == 3:\n  			print 'c....'\n  			print '.....'\n  			print '.....'\n  			print '.....'\n  			print '..***'\n  		elif m == 4:\n  			print 'c....'\n  			print '.....'\n  			print '.....'\n  			print '...**'\n  			print '...**'\n  		elif m == 5:\n  			print 'c....'\n  			print '.....'\n  			print '.....'\n  			print '.....'\n  			print '*****'\n  		elif m == 6:\n  			print 'c....'\n  			print '.....'\n  			print '.....'\n  			print '..***'\n  			print '..***'\n  		elif m == 7:\n  			print 'c....'\n  			print '.....'\n  			print '.....'\n  			print '...**'\n  			print '*****'\n  		elif m == 8:\n  			print 'c....'\n  			print '.....'\n  			print '.....'\n  			print '..***'\n  			print '*****'\n  		elif m == 9:\n  			print 'c...*'\n  			print '....*'\n  			print '....*'\n  			print '....*'\n  			print '*****'\n  		elif m == 10:\n  			print 'c....'\n  			print '.....'\n  			print '.....'\n  			print '*****'\n  			print '*****'\n  		elif m == 11:\n  			print 'c....'\n  			print '.....'\n  			print '....*'\n  			print '*****'\n  			print '*****'\n  		elif m == 12:\n  			print 'c....'\n  			print '.....'\n  			print '...**'\n  			print '*****'\n  			print '*****'\n  		elif m == 13:\n  			print 'c....'\n  			print '.....'\n  			print '..***'\n  			print '*****'\n  			print '*****'\n  		elif m == 14:\n  			print 'c..**'\n  			print '...**'\n  			print '...**'\n  			print '..***'\n  			print '*****'\n  		elif m == 15:\n  			print 'c....'\n  			print '.....'\n  			print '*****'\n  			print '*****'\n  			print '*****'\n  		elif m == 16:\n  			print 'c..**'\n  			print '...**'\n  			print '...**'\n  			print '*****'\n  			print '*****'\n  		elif m == 17:\n  			print 'c..**'\n  			print '...**'\n  			print '..***'\n  			print '*****'\n  			print '*****'\n  		elif m == 18:\n  			print 'Impossible'\n  		elif m == 19:\n  			print 'c..**'\n  			print '...**'\n  			print '*****'\n  			print '*****'\n  			print '*****'\n  		elif m == 20:\n  			print 'Impossible'\n  		elif m == 21:\n  			print 'c.***'\n  			print '..***'\n  			print '*****'\n  			print '*****'\n  			print '*****'\n  		elif m == 22:\n  			print 'Impossible'\n  		elif m == 23:\n  			print 'Impossible'\n  		elif m == 24:\n  			print 'c****'\n  			print '*****'\n  			print '*****'\n  			print '*****'\n  			print '*****'\n  	else:\n  		print 'Impossible'\n  \n <CODESPLIT> 3
t = int(raw_input())\n  \n  for case in range(t):\n  	r1 = int(raw_input())\n  	c1 = []\n  	for j in range(4):\n  		c1.append([int(i) for i in raw_input().split()])\n  \n  	r2 = int(raw_input())\n  	c2 = []\n  	for j in range(4):\n  		c2.append([int(i) for i in raw_input().split()])\n  \n  	num = -1\n  	possibles = 0\n  	for j in c1[r1-1]:\n  		if c2[r2-1].count(j) == 1:\n  			num = j\n  			possibles += 1\n  \n  	if possibles > 1:\n  		print 'Case #'+str(case+1)+': Bad magician!'\n  	elif possibles == 0:\n  		print 'Case #'+str(case+1)+': Volunteer cheated!'\n  	else:\n  		print 'Case #'+str(case+1)+': '+str(num)\n <CODESPLIT> 3
def make_string(R, C, M):\n      grid = [['.' for j in xrange(C)] for i in xrange(R)]\n      grid[-1][-1] = 'c'\n      t = M\n      for i in xrange(R):\n          for j in xrange(C):\n              if M:\n                  if forbidden(R, C, t, i, j):\n                      continue\n                  grid[i][j] = '*'\n                  M -= 1\n              else:\n                  break\n      s = ''\n      if M:\n          return 'Impossible'\n      for r in grid:\n          s += ''.join(r)+'\n'\n      return s[:-1]\n  \n  def forbidden(R, C, M, i, j):\n      a = M / C\n      b = M % C\n      if (R*C - M == 1):\n          return False\n  \n      if i >= (R-2) and j >= (C-2):\n          return True\n  \n      if i >= (R-2) and b:\n          if b % 2:\n              return True\n          if j < b/2:\n              return False\n          else:\n              return True\n      return False\n          \n  \n  f = open('Csmall.in', 'r')\n  g = open('outputC.txt', 'w')\n  \n  data = [[int(e) for e in line.strip("\n").split(' ')] for line in f]\n  T = int(data.pop(0)[0])\n  for i, case in enumerate(data):\n      R, C, M = case[0], case[1], case[2]\n      num_cells = R*C\n      if (R-1) == 0 or (C-1) == 0:\n          s = make_string(R, C, M)\n          g.write('Case #%i:\n%s\n' %(i+1,s))\n          continue\n      else:\n          s = make_string(R, C, M)\n          g.write('Case #%i:\n%s\n' %(i+1, s))\n          \n  \n  f.close()\n  g.close()\n <CODESPLIT> 4
f = open('A.in', 'r')\n  g = open('outputA.txt', 'w')\n  data = [[int(e) for e in line.strip("\n").split(' ')] for line in f]\n  T = data[0][0]\n  c = 0\n  for i in xrange(1, T*10 + 1, 10):\n      c += 1\n      choice1 = data[i][0]\n      choice2 = data[i+5][0]\n      grid1, grid2 = [], []\n      for j in xrange(1,5):\n          grid1.append(data[i+j])\n  \n      for j in xrange(6, 10):\n          grid2.append(data[i+j])\n  \n      s1 = set(grid1[choice1-1])\n      s2 = set(grid2[choice2-1])\n  \n      s = s1 & s2\n      if len(s) == 1:\n          g.write("Case #%i: %i\n" %(c, s.pop()))\n      elif not s:\n          g.write("Case #%i: Volunteer cheated!\n" %(c))\n      else:\n          g.write("Case #%i: Bad magician!\n" %(c))\n  \n  f.close()\n  g.close()\n      \n <CODESPLIT> 4
 \n  if __name__ == "__main__":\n      f = sys.stdin\n      if len(sys.argv) >= 2:\n          fn = sys.argv[1]\n          if fn != '-':\n              f = open(fn)\n  \n      T = int(f.readline())\n      for _T in xrange(T):\n          R, C, M = map(int, f.readline().split())\n  \n          print "Case #%d:" % (_T+1)\n  \n          left = R * C - M\n  \n          if R == 1:\n              s = 'c'\n              s += '.' * (left - 1)\n              s += '*' * M\n              print s\n              continue\n          if C == 1:\n              print 'c'\n              for i in xrange(left - 1):\n                  print '.'\n              for i in xrange(M):\n                  print '*'\n              continue\n  \n          if left == 1:\n              print 'c' + '*' * (C-1)\n              for i in xrange(R-1):\n                  print '*' * C\n              continue\n  \n          if (R == 2 or C == 2) and (M % 2 == 1 or left == 2):\n              print "Impossible"\n              continue\n          if R == 2:\n              assert left not in (2, 3, 5, 7)\n              assert left >= 4\n              print 'c' + '.' * (left/2 - 1) + '*' * (M/2)\n              print '.' + '.' * (left/2 - 1) + '*' * (M/2)\n              continue\n          if C == 2:\n              assert left >= 4\n              assert left not in (2, 3, 5, 7)\n              print 'c.'\n              left -= 2\n              R -= 1\n              while left:\n                  print '..'\n                  left -= 2\n                  R -= 1\n              assert R >= 0\n              while R:\n                  print '**'\n                  R -= 1\n              continue\n  \n          assert R >= 3\n          assert C >= 3\n  \n          if left == 4:\n              print 'c.' + '*' * (C-2)\n              print '..' + '*' * (C-2)\n              for i in xrange(R-2):\n                  print '*' * C\n              continue\n  \n          if left in (2, 3, 5, 7):\n              print "Impossible"\n              continue\n  \n          assert left >= 6\n  \n          cols = max(3, (left + R-1) // R)\n  \n          if left % cols == 1:\n              assert left >= 10\n  \n              print 'c' + '.' * (cols - 1) + '*' * (C - cols)\n              left -= cols\n              R -= 1\n  \n              while left > cols + 1:\n                  print '.' * cols + '*' * (C - cols)\n                  left -= cols\n                  R -= 1\n              assert left == cols + 1\n              print '.' * (cols - 1) + '*' * (C - cols + 1)\n              print '.' * (2) + '*' * (C - 2)\n              R -= 2\n  \n              assert R >= 0\n  \n              while R:\n                  print '*' * C\n                  R -= 1\n              continue\n          else:\n              assert left >= 6\n  \n              print 'c' + '.' * (cols - 1) + '*' * (C - cols)\n              left -= cols\n              R -= 1\n  \n              while left > cols:\n                  print '.' * cols + '*' * (C - cols)\n                  left -= cols\n                  R -= 1\n              assert left >= 2\n              print '.' * (left) + '*' * (C - left)\n              R -= 1\n  \n              assert R >= 0\n  \n              while R:\n                  print '*' * C\n                  R -= 1\n              continue\n  \n          1/0\n <CODESPLIT> 5
 \n  if __name__ == "__main__":\n      f = sys.stdin\n      if len(sys.argv) >= 2:\n          fn = sys.argv[1]\n          if fn != '-':\n              f = open(fn)\n  \n      T = int(f.readline())\n      for _T in xrange(T):\n          a1 = int(f.readline())\n          l1 = [map(int, f.readline().split()) for _ in xrange(4)]\n          a2 = int(f.readline())\n          l2 = [map(int, f.readline().split()) for _ in xrange(4)]\n  \n          poss = list(set(l1[a1-1]) & set(l2[a2-1]))\n  \n          print "Case #%d:" % (_T + 1),\n          if len(poss) == 0:\n              print "Volunteer cheated!"\n          elif len(poss) == 1:\n              print poss[0]\n          else:\n              print "Bad magician!"\n <CODESPLIT> 5
 \n  \n  TEST_CASES = [\n      ("""5\n  5 5 23\n  3 1 1\n  2 2 1\n  4 7 3\n  10 10 82\n  ""","""Case #1:\n  Impossible\n  Case #2:\n  c\n  .\n  *\n  Case #3:\n  Impossible\n  Case #4:\n  c......\n  .......\n  .......\n  ....***\n  Case #5:\n  c........*\n  .........*\n  **********\n  **********\n  **********\n  **********\n  **********\n  **********\n  **********\n  **********\n  """),\n      ("""3\n  5 4 3\n  5 3 8\n  5 5 14\n  ""","""Case #1:\n  c...\n  ....\n  ....\n  ...*\n  ..**\n  Case #2:\n  Impossible\n  Case #3:\n  c...*\n  ....*\n  ...**\n  *****\n  *****\n  """)\n  ]\n  \n  IMPOSSIBLE = "Impossible"\n  \n  """\n  S is number of safe squares = (R*C) - M\n  If S == 1 then always possible:\n      Assume click in top left, all else mines\n  Special cases (R or C is small):\n  If R == 1 or C == 1 then always possible:\n      Assume click in top left and all safe squares in a line\n  Else if R == 2 or C == 2 then possible iff S % 2 == 0:\n      Assume click in top left and all safe squares are in a 2 * X line\n  Else if R == 3 or C == 3 then possible if S % 3 == 0 (Assume click in top left and all safe squares are in a 3 * X line)\n     OR if S % 2 == 0 \n  """\n  \n  def parse_input(input_reader):\n      case_count = int(input_reader.readline())\n      case_idx = 0\n      while case_count > case_idx:\n          case_idx += 1\n          input_line = [int(x) for x in input_reader.readline().split()]\n          input_values = {"case": case_idx,\n                          "R": input_line[0],\n                          "C": input_line[1],\n                          "M": input_line[2]}\n          yield input_values\n  \n  \n  def solve_problem(output_writer=sys.stdout, **kwargs):\n      case = kwargs['case']\n      rows = kwargs['R']\n      cols = kwargs['C']\n      mines = kwargs['M']\n      safe_squares = ((rows * cols) - mines)\n      print >> output_writer, "Case #%d:" % case\n      row_string = "{:*<%ds}" % cols\n      impossible = False\n      if safe_squares == 1:\n          print >> output_writer, row_string.format("c")\n          for row in range(1, rows):\n              print >> output_writer, row_string.format("")\n      elif rows == 1:\n          safe_string = "c" + ("." * (safe_squares - 1))\n          print >> output_writer, row_string.format(safe_string)\n      elif cols == 1:\n          for row in range(rows):\n              cell = ""\n              if row == 0:\n                  cell = "c"\n              elif row < safe_squares:\n                  cell = "."\n              print >> output_writer, row_string.format(cell)\n      elif safe_squares == 2:\n          impossible = True\n      elif rows == 2:\n          safe_cols, remainder = divmod(safe_squares, 2)\n          if remainder == 1:\n              impossible = True\n          else:\n              safe_string = "." * (safe_cols - 1)\n              print >> output_writer, row_string.format("c%s" % safe_string)\n              print >> output_writer, row_string.format(".%s" % safe_string)\n      elif cols == 2:\n          safe_rows, remainder = divmod(safe_squares, 2)\n          if remainder == 1:\n              impossible = True\n          else:\n              for row in range(rows):\n                  cells = ""\n                  if row == 0:\n                      cells = "c."\n                  elif row < safe_rows:\n                      cells = ".."\n                  print >> output_writer, row_string.format(cells)\n      else:\n          safe_rows, remainder = divmod(safe_squares, cols)\n          if remainder == 1 and cols == 3 and safe_rows == 2:\n              impossible = True\n          elif safe_rows > 1:\n              if remainder == 1 and safe_rows == 2:\n                  mid_safe = "." * (cols-2)\n                  for row in range(rows):\n                      cell_one = "."\n                      mid_cells = mid_safe\n                      last_cell = "."\n                      if row == 0:\n                          cell_one = "c"\n                      elif safe_rows == 0:\n                          cell_one = "."\n                          mid_cells = "." * (remainder + 1)\n                      elif safe_rows < 0:\n                          cell_one = ""\n                          mid_cells = ""\n                      if safe_rows < 3:\n                          last_cell = ""\n                      print >> output_writer, row_string.format("%s%s%s" % (cell_one, mid_cells, last_cell))\n                      safe_rows -= 1\n              elif remainder == 1:\n                  mid_safe = "." * (cols-2)\n                  for row in range(rows):\n                      cell_one = "."\n                      mid_cells = mid_safe\n                      last_cell = "."\n                      if row == 0:\n                          cell_one = "c"\n                      elif safe_rows == 0:\n                          cell_one = "."\n                          mid_cells = "." * remainder\n                      elif safe_rows < 0:\n                          cell_one = ""\n                          mid_cells = ""\n                      if safe_rows < 2:\n                          last_cell = ""\n                      print >> output_writer, row_string.format("%s%s%s" % (cell_one, mid_cells, last_cell))\n                      safe_rows -= 1\n              else:\n                  full_safe = "." * cols\n                  for row in range(rows):\n                      cells = full_safe\n                      if row == 0:\n                          cells = "c" + ("." * (cols - 1))\n                      elif row == safe_rows:\n                          cells = "." * remainder\n                      elif row > safe_rows:\n                          cells = ""\n                      print >> output_writer, row_string.format(cells)\n          else:\n              safe_cols, remainder = divmod(safe_squares, 2)\n              if remainder == 1 and safe_cols < 4:\n                  impossible = True\n              elif remainder == 0:\n                  print >> output_writer, row_string.format("c%s" % ("." * (safe_cols - 1)))\n                  print >> output_writer, row_string.format("." * safe_cols)\n                  for row in range(2, rows):\n                      print >> output_writer, row_string.format("")\n              else:\n                  safe_cols -= 1\n                  print >> output_writer, row_string.format("c%s" % ("." * (safe_cols - 1)))\n                  print >> output_writer, row_string.format("." * safe_cols)\n                  print >> output_writer, row_string.format("...")\n                  for row in range(3, rows):\n                      print >> output_writer, row_string.format("")\n      if impossible:\n          print >> output_writer, IMPOSSIBLE\n  \n  def solve_inputs(input_reader, output_writer):\n      """\n      Loop through each problem input in input reader and solve it.\n  \n      Outputs responses to output_writer.\n      """\n      for input_values in parse_input(input_reader):\n          solve_problem(output_writer=output_writer, **input_values)\n  \n  def run_tests():\n      idx = 0\n      all_pass = True\n      for problem_input, expected_output in TEST_CASES:\n          idx += 1\n          input_reader = StringIO(problem_input)\n          output_writer = StringIO()\n          solve_inputs(input_reader, output_writer)\n          problem_output = output_writer.getvalue()\n          if problem_output == expected_output:\n              print "Test %d: Success" % idx\n          else:\n              all_pass = False\n              print "Test %d: Failure" % idx\n              print problem_output\n          input_reader.close()\n          output_writer.close()\n      if all_pass:\n          print "All tests were successful!"\n      else:\n          print "Something didn't match - try again."\n  \n  def main():\n      parser = OptionParser()\n      parser.add_option("-f", "--file",\n                        dest="filename_stem",\n                        help="read input from FILE.in and write to FILE.out",\n                        metavar="FILE")\n  \n      (options, args) = parser.parse_args()\n      if options.filename_stem:\n          print "Running in file mode."\n          input_reader = open("%s.in" % options.filename_stem, "r")\n          output_writer = open("%s.out" % options.filename_stem, "w")\n          solve_inputs(input_reader, output_writer)\n      else:\n          print "Running in test mode."\n          run_tests()\n  \n  if __name__ == "__main__":\n      main()\n <CODESPLIT> 6
 \n  \n  TEST_CASES = [\n      ("""3\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  3\n  1 2 5 4\n  3 11 6 15\n  9 10 7 12\n  13 14 8 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  3\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  ""","""Case #1: 7\n  Case #2: Bad magician!\n  Case #3: Volunteer cheated!\n  """),\n      ("""1\n  1\n  15 9 16 5\n  6 10 1 3\n  2 4 12 11\n  13 14 8 7\n  1\n  5 10 9 6\n  12 15 1 11\n  14 16 4 2\n  13 3 8 7""","""Case #1: Bad magician!\n  """)\n  ]\n  \n  BAD_MAGIC = "Bad magician!"\n  CHEATING = "Volunteer cheated!"\n  \n  def parse_input(input_reader):\n      case_count = int(input_reader.readline())\n      case_idx = 0\n      while case_count > case_idx:\n          case_idx += 1\n          rows = []\n          for loop_idx in (1,2):\n              row_idx = int(input_reader.readline())\n              for idx in (1,2,3,4):\n                  if idx == row_idx:\n                      rows.append(set(input_reader.readline().rstrip("\n").split(" ")))\n                  else:\n                      input_reader.readline()\n          input_values = {"rows":rows,\n                          "case":case_idx}\n          yield input_values\n  \n  \n  def solve_problem(output_writer=sys.stdout, **kwargs):\n      rows = kwargs['rows']\n      case = kwargs['case']\n      intersect = rows[0].intersection(rows[1])\n      if not intersect:\n          msg = CHEATING\n      elif len(intersect) == 1:\n          msg = intersect.pop()\n      else:\n          msg = BAD_MAGIC\n      print >>output_writer, "Case #%d: %s" % (case, msg)\n  \n  def solve_inputs(input_reader, output_writer):\n      """\n      Loop through each problem input in input reader and solve it.\n  \n      Outputs responses to output_writer.\n      """\n      for input_values in parse_input(input_reader):\n          solve_problem(output_writer=output_writer, **input_values)\n  \n  def run_tests():\n      """\n      Check the sample input and output match.\n      """\n      idx = 0\n      all_pass = True\n      for problem_input, expected_output in TEST_CASES:\n          idx += 1\n          input_reader = StringIO(problem_input)\n          output_writer = StringIO()\n          solve_inputs(input_reader, output_writer)\n          problem_output = output_writer.getvalue()\n          if problem_output == expected_output:\n              print "Test %d: Success" % idx\n          else:\n              all_pass = False\n              print "Test %d: Failure" % idx\n          input_reader.close()\n          output_writer.close()\n      if all_pass:\n          print "All tests were successful!"\n      else:\n          print "Something didn't match - try again."\n          print problem_output\n  \n  def main():\n      parser = OptionParser()\n      parser.add_option("-f", "--file",\n                        dest="filename_stem",\n                        help="read input from FILE.in and write to FILE.out",\n                        metavar="FILE")\n  \n      (options, args) = parser.parse_args()\n      if options.filename_stem:\n          print "Running in file mode."\n          input_reader = open("%s.in" % options.filename_stem, "r")\n          output_writer = open("%s.out" % options.filename_stem, "w")\n          solve_inputs(input_reader, output_writer)\n      else:\n          print "Running in test mode."\n          run_tests()\n  \n  if __name__ == "__main__":\n      main()\n <CODESPLIT> 6
__author__ = 'Jeffrey'\n  \n  inFileName = "C:\\Users\\Jeffrey\\IdeaProjects\\Google Code Jam 2014\\C-small-attempt0.in"\n  \n  outFileName = inFileName[: -2] + "out"\n  \n  \n  def parseInput(f):\n      T = int(f.readline())\n      L = []\n  \n      for i in range(T):\n          L.append([int(i) for i in f.readline().split()])\n  \n      return T, L\n  \n  \n  def calculateOneClick(R, C, M):\n      size = R * C\n      if R == 1 or C == 1 and M < size:\n          return generateWinBoardBaseCase(R, C, M)\n      elif size - M == 1:\n          return generateWinBoardBaseCase(R, C, M)\n      elif size - M >= 4:\n          return generateWinBoard(R, C, M)\n      return "Impossible"\n  \n  def generateWinBoard(R,C,M):\n      emptySpace = R * C - M - 4\n      out = "c"\n      if C > 1:\n          out += "."\n          for i in range(2,C):\n              if emptySpace > 0:\n                  out += "."\n                  emptySpace -= 1\n              else:\n                  out += "*"\n      if R > 1:\n          out += '\n'\n          out += "."\n          if C > 1:\n              out += "."\n          for i in range(2,C):\n              if emptySpace > 0:\n                  out += "."\n                  emptySpace -= 1\n              else:\n                  out += "*"\n      for r in range(2,R):\n          out += '\n'\n          for c in range(C):\n              if emptySpace > 0:\n                  out += "."\n                  emptySpace -= 1\n              else:\n                  out += "*"\n      return out\n  \n  def generateWinBoardBaseCase(R,C,M):\n      emptySpace = R * C - M - 1\n      out = "c"\n      if C > 1:\n          for c in range(1,C):\n              if emptySpace > 0:\n                  out += "."\n                  emptySpace -= 1\n              else:\n                  out += "*"\n      for r in range(1,R):\n          out += '\n'\n          for c in range(C):\n              if emptySpace > 0:\n                  out += "."\n                  emptySpace -= 1\n              else:\n                  out += "*"\n      return out\n  \n  \n  def playGame(T, L):\n      for i in range(T):\n          result = calculateOneClick(L[i][0], L[i][1], L[i][2])\n          yield "Case #" + str(i + 1) + ":\n" + str(result)\n  \n  \n  if __name__ == "__main__":\n      iF = open(inFileName, 'r')\n      T, L = parseInput(iF)\n      iF.close()\n  \n      print(T)\n      print(L)\n  \n      oF = open(outFileName, "wb")\n      for out in playGame(T, L):\n          print(out)\n          oF.write(bytes(out + "\n", 'utf-8'))\n      oF.close()\n <CODESPLIT> 7
__author__ = 'Jeffrey'\n  \n  inFileName = "C:\\Users\\Jeffrey\\IdeaProjects\\Google Code Jam 2014\\A-small-attempt0.in"\n  outFileName = "C:\\Users\\Jeffrey\\IdeaProjects\\Google Code Jam 2014\\A-small-attempt0.out"\n  \n  \n  def parseInput(f):\n      T = int(f.readline())\n      L = []\n  \n      for i in range(T):\n          picks = []\n          cards = []\n          for j in range(2):\n              picks.append( int(f.readline()))\n              tempL = []\n              for k in range(4):\n                  tempL.append( [int(j) for j in f.readline().split()])\n              cards.append(tempL)\n          L.append((picks, cards))\n  \n      return T, L\n  \n  \n  def performTrick(picks, cards):\n      matchFound = False\n      matchedCard = None\n      for card in cards[0][picks[0] - 1]:\n          possibleMatch = card in cards[1][picks[1] - 1]\n          if possibleMatch and matchFound:\n              return "Bad magician!"\n          elif possibleMatch:\n              matchFound = True\n              matchedCard = card\n      if matchFound:\n          return matchedCard\n      else:\n          return "Volunteer cheated!"\n  \n  \n  def playGame(T,L):\n      for i in range(T):\n          result = performTrick(L[i][0], L[i][1])\n          yield "Case #" + str(i + 1) + ": " + str(result)\n  \n  \n  if __name__=="__main__":\n      iF = open(inFileName, 'r')\n      T, L = parseInput(iF)\n      iF.close()\n  \n      oF = open(outFileName, "wb")\n      for out in playGame(T, L):\n          oF.write(bytes(out + "\n",'utf-8'))\n      oF.close()\n <CODESPLIT> 7
 \n  \n  def print_basic_board(no_mine, r, c):\n      printed_c = False\n      for row in range(0, r):\n          line = []\n          for column in range(0, c):\n              if printed_c:\n                  if no_mine > 0:\n                      line.append(".")\n                      no_mine -= 1\n                  else:\n                      line.append("*")\n              else:\n                  line.append("c")\n                  no_mine -= 1\n                  printed_c = True\n          print "".join(line)\n  \n  \n  def print_board(no_mine_row, no_mine_column, rest_no_mine_for_row, rest_no_mine_for_column, r, c):\n      printed_c = False\n      for row in range(0, r):\n          line = []\n          for column in range(0, c):\n              if printed_c:\n                  if row < no_mine_row and column < no_mine_column:\n                      line.append(".")\n                  elif rest_no_mine_for_column > 0 and column == no_mine_column:\n                      line.append(".")\n                      rest_no_mine_for_column -= 1\n                  elif rest_no_mine_for_row > 0 and row == no_mine_row:\n                      line.append(".")\n                      rest_no_mine_for_row -= 1\n                  else:\n                      line.append("*")\n              else:\n                  line.append("c")\n                  printed_c = True\n          print "".join(line)\n  \n  \n  def solve_case(r, c, m, case_number):\n      print "Case #%d:" % case_number\n      no_mine = r * c - m\n      if r < 2 or c < 2 or no_mine == 1:\n          print_basic_board(no_mine, r, c)\n      else:\n          no_mine_row_max = int(math.ceil(float(no_mine) / 2))\n          if no_mine_row_max > r:\n              no_mine_row_max = r\n          for no_mine_column in range(2, int(math.ceil(float(no_mine) / 2)) + 1):\n              if no_mine_column > c:\n                  break\n              for no_mine_row in range(2, no_mine_row_max + 1):\n                  rest_no_mine = no_mine - (no_mine_column * no_mine_row)\n                  if rest_no_mine < 0:\n                      continue\n                  if rest_no_mine == 1:\n                      continue\n  \n                  if rest_no_mine == 0:\n                      print_board(no_mine_row, no_mine_column, 0, 0, r, c)\n                      return\n                  if rest_no_mine <= no_mine_row and no_mine_column < c:\n                      print_board(no_mine_row, no_mine_column, 0, rest_no_mine, r, c)\n                      return\n                  if rest_no_mine <= no_mine_column and no_mine_row < r:\n                      print_board(no_mine_row, no_mine_column, rest_no_mine, 0, r, c)\n                      return\n  \n                  if rest_no_mine > 3 and no_mine_column < c and no_mine_row < r:\n                      for rest_no_mine_for_row in range(2, no_mine_column):\n                          rest_no_mine_for_column = rest_no_mine - rest_no_mine_for_row\n                          if rest_no_mine_for_column < no_mine_row:\n                              print_board(no_mine_row, no_mine_column, rest_no_mine_for_row, rest_no_mine_for_column, r, c)\n                              return\n  \n          print "Impossible"\n  \n  r_file = sys.stdin\n  \n  if len(sys.argv) > 1:\n      r_file = open(sys.argv[1], 'r')\n  \n  total_cases = r_file.readline()\n  for case_number in range(1, int(total_cases) + 1):\n      values = map(int, r_file.readline().split(' '))\n      solve_case(values[0], values[1], values[2], case_number)\n  \n <CODESPLIT> 8
 \n  def solve_case(answers, arrangements_of_cards, case_number):\n      first_candidates = arrangements_of_cards[0][answers[0] - 1]\n      second_candidates = arrangements_of_cards[1][answers[1] - 1]\n      answer = set(first_candidates) & set(second_candidates)\n      length_of_answer = len(answer)\n      if length_of_answer > 1:\n          print "Case #%d: Bad magician!" % case_number\n      elif length_of_answer < 1:\n          print "Case #%d: Volunteer cheated!" % case_number\n      else:\n          print "Case #%d: %d" % (case_number, answer.pop())\n  \n  r = sys.stdin\n  \n  if len(sys.argv) > 1:\n      r = open(sys.argv[1], 'r')\n  \n  total_cases = r.readline()\n  for case_number in range(1, int(total_cases) + 1):\n      answers = []\n      arrangements_of_cards = []\n      answers.append(int(r.readline()))\n      arrangements_of_cards.append([])\n      for row in range(0, 4):\n          arrangements_of_cards[0].append(map(int, r.readline().split(' ')))\n      answers.append(int(r.readline()))\n      arrangements_of_cards.append([])\n      for row in range(0, 4):\n          arrangements_of_cards[1].append(map(int, r.readline().split(' ')))\n      solve_case(answers, arrangements_of_cards, case_number)\n <CODESPLIT> 8
 \n  \n  DX = (-1, -1, -1, 0, 1, 1, 1, 0)\n  DY = (-1, 0, 1, 1, 1, 0, -1, -1)\n  \n  \n  def compute(R, C, M):\n      if M == 0:\n          return empty(R, C)\n      free = R * C - M\n      if free == 1:\n          return single_free(R, C)\n      if R == 1:\n          return single_row(C, M)\n      if C == 1:\n          return single_column(R, M)\n      if R == 2:\n          return two_rows(C, M)\n      if C == 2:\n          return two_columns(R, M)\n      if free in (2,3,5,7):\n          return "\nImpossible"\n      return at_least_three(R, C, M)\n  \n  \n  def make_board(R, C, default='.'):\n      return [[default for j in xrange(C)] for i in xrange(R)]\n  \n  \n  def to_string(board):\n      s = ""\n      for i in xrange(len(board)):\n          s += '\n' + ''.join(board[i])\n      return s\n  \n          \n  def empty(R, C):\n      board = make_board(R, C)\n      board[0][0] = 'c'\n      return to_string(board)\n  \n  \n  def single_free(R, C):\n      board = make_board(R, C, default='*')\n      board[0][0] = 'c'\n      return to_string(board)\n  \n  \n  def single_row(C, M):\n      board = make_board(1, C)\n      board[0][0] = 'c'\n      for i in xrange(M):\n          board[0][C - 1 - i] = '*'\n      return to_string(board)\n  \n  \n  def single_column(R, M):\n      board = make_board(R, 1)\n      board[0][0] = 'c'\n      for i in xrange(M):\n          board[R - 1 - i][0] = '*'\n      return to_string(board)\n  \n  \n  def two_rows(C, M):\n      if M % 2 != 0:\n          return "\nImpossible"\n      if 2 * C - M < 4:\n          return "\nImpossible"\n      board = make_board(2, C)\n      for i in xrange(M / 2):\n          board[0][C - 1 - i] = '*'\n          board[1][C - 1 - i] = '*'\n      board[0][0] = 'c'\n      return to_string(board)\n  \n  \n  def two_columns(R, M):\n      if M % 2 != 0:\n          return "\nImpossible"\n      if 2 * R - M < 4:\n          return "\nImpossible"\n      board = make_board(R, 2)\n      for i in xrange(M / 2):\n          board[R - 1 - i][0] = '*'\n          board[R - 1 - i][1] = '*'\n      board[0][0] = 'c'\n      return to_string(board)\n  \n  \n  def finalize(R, C, M, board):\n      mines = 0\n      for i in xrange(R):\n          for j in xrange(C):\n              if board[i][j] == '0':\n                  continue\n              empty = False\n              for d in xrange(8):\n                  if i + DX[d] < 0 or i + DX[d] >= R or j + DY[d] < 0 or j + DY[d] >= C:\n                      continue\n                  if board[i + DX[d]][j + DY[d]] == '0':\n                      empty = True\n                      break\n              if empty:\n                  board[i][j] = '.'\n              else:\n                  board[i][j] = '*'\n                  mines += 1\n      for i in xrange(R):\n          for j in xrange(C):\n              if board[i][j] == '0':\n                  board[i][j] = '.'\n      board[0][0] = 'c'\n      if mines != M:\n          sys.stderr.write("mines:%s expected:%s\n" % (mines, M))\n      return to_string(board)\n  \n  \n  def at_least_three(R, C, M):\n      board = make_board(R, C)\n      board[0][0] = '0'\n      free = R * C - M\n      count = 4\n      if count == free:\n          return finalize(R, C, M, board)\n      board[0][1] = '0'\n      count += 2\n      if count == free:\n          return finalize(R, C, M, board)\n      board[1][0] = '0'\n      count += 2\n      if count == free:\n          return finalize(R, C, M, board)\n      for j in xrange(2, C - 1):\n          if count + 2 > free:\n              break\n          board[0][j] = '0'\n          count += 2\n      for i in xrange(2, R - 1):\n          if count + 2 > free:\n              break\n          board[i][0] = '0'\n          count += 2\n      for i in xrange(1, R - 1):\n          for j in xrange(1, C - 1):\n              if count == free:\n                  return finalize(R, C, M, board)\n              board[i][j] = '0'\n              count += 1\n      sys.stderr.write("empty board?\n")\n      return finalize(board)\n  \n  \n  def parse():\n      R, C, M = map(int, sys.stdin.readline().strip().split())\n      return R, C, M\n  \n  \n  if __name__ == "__main__":\n      sys.setrecursionlimit(100000)\n      T = int(sys.stdin.readline().strip())\n      for i in xrange(T):\n          sys.stderr.write("case:%s\n" % (i + 1))\n          data = parse()\n          result = compute(*data)\n          print "Case #%d: %s" % (i + 1, result)\n <CODESPLIT> 9
 \n  \n  def compute(r1, m1, r2, m2):\n      valid1 = set(m1[r1 - 1])\n      valid2 = set(m2[r2 - 1])\n      valid = valid1 & valid2\n      if len(valid) == 0:\n          return 'Volunteer cheated!'\n      if len(valid) > 1:\n          return 'Bad magician!'\n      return valid.pop()\n  \n  \n  def parse_single():\n      r = int(sys.stdin.readline().strip())\n      m = []\n      for i in xrange(4):\n          m.append(map(int, sys.stdin.readline().strip().split()))\n      return r, m\n  \n  def parse():\n      r1, m1 = parse_single()\n      r2, m2 = parse_single()\n      return r1, m1, r2, m2\n  \n  \n  if __name__ == "__main__":\n      sys.setrecursionlimit(100000)\n      T = int(sys.stdin.readline().strip())\n      for i in xrange(T):\n          data = parse()\n          result = compute(*data)\n          print "Case #%d: %s" % (i + 1, result)\n <CODESPLIT> 9
 \n  def read_line():\n      return sys.stdin.readline().rstrip( '\n' )\n  \n  def read_integer():\n      return int( read_line() )\n  \n  def read_integers():\n      return [ int( x ) for x in read_line().split() ]\n  \n  def flip( grid ):\n      return [ bytearray( ''.join( chr( grid[ row ][ column ] ) for row in range( len( grid ) ) ) ) for column in range( len( grid[ 0 ] ) ) ]\n  \n  def grow( R, C, M ):\n      grid = [ bytearray( C*[ '*' ] ) for row in range( R ) ]\n      b = R*C - M\n      if C > R:\n          R, C, grid = C, R, flip( grid )\n          flipped = True\n      else:\n          flipped = False\n      if b < 2*C:\n          if b == 1:\n              grid[ 0 ][ 0 ] = 'c'\n          elif b == 3 and C >= 3:\n              grid[ 0 ][ : 3 ] = bytearray( '.c.' )\n          elif b % 2:\n              return\n          else:\n              grid[ 0 ][ : b//2 ] = bytearray( b//2*'.' )\n              grid[ 1 ][ : b//2 ] = bytearray( b//2*'.' )\n              grid[ 0 ][ 0 ] = 'c'\n      else:\n          r = 0\n          while b >= C:\n              grid[ r ] = bytearray( C*[ '.' ] )\n              b -= C\n              r += 1\n          if b:\n              if b >= 2:\n                  grid[ r ][ : b ] = b*'.'\n              elif C > 2 and r > 2:\n                  grid[ r - 1 ][ -1 ] = '*'\n                  grid[ r ][ : 2 ] = '..'\n              else:\n                  return\n          grid[ 0 ][ 0 ] = 'c'\n      return flip( grid ) if flipped else grid\n      \n  T = read_integer()\n  for t in range( T ):\n      print 'Case #%i:' % ( t + 1 )\n      R, C, M = read_integers()\n      grid = grow( R, C, M )\n      print '\n'.join( str( row ) for row in grid ) if grid else 'Impossible'\n <CODESPLIT> 10
 \n  def read_line():\n      return sys.stdin.readline().rstrip( '\n' )\n  \n  def read_integer():\n      return int( read_line() )\n  \n  def read_integers():\n      return [ int( x ) for x in read_line().split() ]\n  \n  def read_string():\n      return read_line().strip()\n  \n  def read_strings():\n      return read_line().split()\n  \n  def input_string_stack():\n      data = []\n      for line in sys.stdin.readlines():\n          data.extend( line.split() )\n      data.reverse()\n      return data\n  \n  def input_integer_stack():\n      return [ int( x ) for x in read_string_stack() ]\n  \n  class memoized( object ):\n     def __init__( self, function ):\n        self.function = function\n        self.cache = {}\n     def __call__( self, *arguments ):\n        try:\n           return self.cache[ arguments ]\n        except KeyError:\n           value = self.function( *arguments )\n           self.cache[ arguments ] = value\n           return value\n  \n  T = read_integer()\n  for t in range( T ):\n      row = read_integer()\n      candidates = set( [ read_integers() for index in range( 4 ) ][ row - 1 ] )\n      row = read_integer()\n      candidates &= set( [ read_integers() for index in range( 4 ) ][ row - 1 ] )\n      print 'Case #%i:' % ( t + 1 ), candidates.pop() if len( candidates ) == 1 else 'Bad magician!' if len( candidates ) > 1 else 'Volunteer cheated!'\n <CODESPLIT> 10
def Trivial(R,C,char):\n      for i in range(R):\n          Ans = '';\n          for j in range(C):\n              if (i==j==0):\n                  Ans += 'c';\n              else:\n                  Ans += char;\n          print Ans;\n  \n  \n  def Draw1(R,C,Blank):\n      Ans = "c";\n      for i in range(Blank-1):\n          Ans += '.';\n      for i in range(R*C-Blank):\n          Ans += '*';\n      if (R == 1):\n          print Ans;        \n          return;\n      if (C == 1):\n          for i in range(len(Ans)):\n              print Ans[i];\n  \n  def Draw2(R,C,Blank):\n      if (Blank%2 != 0) or (Blank == 2):\n          print "Impossible";\n          return;\n      Row1 = '.'*(Blank/2) + '*'*(Mine/2);\n      Row0 = 'c' + Row1[1:];\n      if R==2:\n          print Row0;\n          print Row1;\n      else:\n          for i in range(len(Row0)):\n              print Row0[i]+Row1[i];\n      return;\n  \n  \n  def Generate(R, C, Blank):\n      TODO = Blank;\n      Spaces = [0]*R;\n      if TODO <= 2*C:\n          if TODO%2 == 0:\n              Spaces[0] = TODO/2;\n              Spaces[1] = TODO-Spaces[0];\n          else:\n              if (TODO == 7):\n                  Spaces[0] = 3;\n                  Spaces[1] = 2;\n                  Spaces[2] = 2;\n              else:\n                  Spaces[0] = (TODO-3)/2;\n                  Spaces[1] = (TODO-3)/2;\n                  Spaces[2] = 3;\n      else:\n          row = 0;\n          if (TODO >= 2*C+2):\n              Spaces[0] = C;\n              Spaces[1] = C;\n              TODO -= 2*C;\n              row = 2;\n              \n          while TODO > C+1:\n              if (TODO == 2*C+1) and (C != 3):\n                  Spaces[row] = C-1;\n                  Spaces[row+1] = C-1;\n                  Spaces[row+2] = 3;\n                  TODO = 0;\n              else:\n                  Spaces[row] = C;\n                  TODO -= C;\n                  row += 1;\n          if (TODO == C+1):\n              Spaces[row] += C-1;\n              Spaces[row+1] = 2;\n              TODO = 0;\n          Spaces[row] += TODO;\n  \n      for r in range(R):\n          Ans = '.'*Spaces[r] + '*'*(C-Spaces[r]);\n          if r == 0:\n              Ans = 'c'+Ans[1:];\n          print Ans;\n  \n  \n  def Solve(R, C, M):\n      Blank = R*C-M;\n      if Blank == 0:\n          print "Impossible";\n          return;\n  \n      if (Blank == 1):\n          Trivial(R,C,'*');\n          return\n      if (Blank == R*C):\n          Trivial(R,C,'.');\n          return\n  \n      if (R == 1) or (C == 1):\n            Draw1(R,C,Blank);\n            return\n  \n      if (R-2)*(C-2) == 0:\n          Draw2(R,C,Blank);\n          return\n  \n      if Blank in [2,3,5,7]:\n          print "Impossible";\n          return;\n      \n      if (R >= 3) and (C >= 3):\n          Generate(R, C, Blank);\n  \n      return;\n  \n  \n  T = int(raw_input());\n  for q in range(T):\n      [Row,Col,Mine] = map(int, raw_input().split());\n  \n      Blanks = Row*Col - Mine;\n      \n      print "Case #%d:" % (q+1)\n      Solve(Row, Col, Mine);\n      \n          \n <CODESPLIT> 11
T = int(raw_input());\n  for q in range(T):\n      R1 = int(raw_input());\n      Data1 = [];\n      for i in range(4):\n          Data1.append( map(int, raw_input().split()) );\n          \n      R2 = int(raw_input());\n      Data2 = [];\n      for i in range(4):\n          Data2.append( map(int, raw_input().split()) );\n  \n      Ans = [];\n      for entry in Data1[R1-1]:\n          if entry in Data2[R2-1]:\n              Ans.append(entry);\n  \n      print "Case #%d:" % (q+1),;\n  \n      if len(Ans) == 0:\n          print "Volunteer cheated!";\n      if len(Ans) == 1:\n          print Ans[0];\n      if len(Ans) > 1:\n          print "Bad magician!"\n          \n <CODESPLIT> 11
 \n  \n  \n  def show_board(board):\n      for row in board:\n          print ''.join(row)\n  \n  \n  N = int(sys.stdin.readline())\n  \n  for T in range(1, N+1):\n      (R, C, M) = map(int, sys.stdin.readline().split(' '))\n      E = R*C-M # empty\n      possible, reverse, need_adjust, column_base = (False, False, False, False)\n      if C > R:\n          (R, C) = (C, R)\n          reverse = True\n  \n      W = 0\n      lastRow = 0\n      if E == 0:\n          pass\n      elif E == 1 or M == 0:\n          W = C\n          possible = True\n      elif C == 1:\n          W = 1\n          if E > 0:\n              possible = True\n      elif C == 2:\n          W = 2\n          lastRow = int(E / 2) + 1   # 1 base\n          if E % 2 == 0 and E >= 4:\n              possible = True\n      elif C >= 3:\n          for w in range(2, C+1):\n              lastRow = int(E / w) + 1   # 1 base\n              if lastRow > R: continue\n              lastRowNum = E % w\n              \n              if lastRow == 2 and lastRowNum == 0:\n                  pass\n              elif lastRow == 2:   # lastRow == 1 => impossible\n                  if lastRowNum == 0:\n                      W = w\n                      possible = True\n                      break\n              elif lastRow >= 3:\n                  if lastRowNum >= 2 or lastRowNum == 0:\n                      W = w\n                      possible = True\n                      break\n                  elif C >= 4 and lastRowNum == 1 and R >= 3:\n                      W = w\n                      possible = True\n                      need_adjust = True\n                      break\n          if not possible:\n              for w in range(2, R+1):\n                  lastRow = int(E / w) + 1   # 1 base\n                  if lastRow > R: continue\n                  lastRowNum = E % w\n                  if lastRow == 2 and lastRowNum == 0:\n                      pass\n                  elif lastRow == 2:   # lastRow == 1 => impossible\n                      if lastRowNum == 0:\n                          W = w\n                          possible = True\n                          column_base = True\n                          break\n                  elif lastRow >= 3:\n                      if lastRowNum >= 2 or lastRowNum == 0:\n                          W = w\n                          possible = True\n                          column_base = True\n                          break\n                      elif C >= 4 and lastRowNum == 1 and R >= 3:\n                          W = w\n                          possible = True\n                          need_adjust = True\n                          column_base = True\n                          break\n                                  \n      if not possible:\n          if reverse:\n              R, C = (C, R)        \n          ans = 'Impossible %sx%s M=%s' % (R, C, M)\n          print 'Case #%(T)s: %(ans)s' % locals()\n          continue\n  \n      board = [['*'] * C for i in range(R)]\n      for i in range(E):\n          if not column_base:\n              c = i % W\n              r = i / W\n          else:\n              r = i % W\n              c = i / W            \n          board[r][c] = '.'\n      if need_adjust:\n          board[lastRow-1][1], board[lastRow-2][-1] = board[lastRow-2][-1], board[lastRow-1][1]\n      if reverse:\n          board = map(list, zip(*board))\n          R, C = (C, R)\n  \n      clicked = False\n      for r in range(R):\n          if clicked: break\n          for c in range(C):\n              cell = board[r][c]\n              if cell != '.': continue\n              if E == 1:\n                  board[r][c] = 'c'\n                  clicked = True\n                  break\n              \n              if r >= 1  and c >= 1  and board[r-1][c-1] == '*': continue\n              if r >= 1              and board[r-1][c]   == '*': continue\n              if r >= 1  and c < C-1 and board[r-1][c+1] == '*': continue\n              if             c >= 1  and board[r][c-1]   == '*': continue\n              if             c < C-1 and board[r][c+1]   == '*': continue\n              if r < R-1 and c >= 1  and board[r+1][c-1] == '*': continue\n              if r < R-1             and board[r+1][c]   == '*': continue\n              if r < R-1 and c < C-1 and board[r+1][c+1] == '*': continue\n              board[r][c] = 'c'\n              clicked = True\n              break\n  \n      ans = 'Possible' if possible else 'Impossible'\n      print 'Case #%(T)s:' % locals()\n      show_board(board)\n <CODESPLIT> 12
 \n  \n  N = int(sys.stdin.readline())\n  \n  for T in range(1, N+1):\n      first_ans = int(sys.stdin.readline())\n      first_grid = []\n      for i in range(4):\n          row = [int(v) for v in sys.stdin.readline().split(' ')]\n          first_grid.append(row)\n      first_list = set(first_grid[first_ans-1])\n      \n      second_ans = int(sys.stdin.readline())\n      second_grid = []\n      for i in range(4):\n          row = [int(v) for v in sys.stdin.readline().split(' ')]\n          second_grid.append(row)\n      second_list = set(second_grid[second_ans-1])\n  \n      intersection = first_list.intersection(second_list)\n  \n      if len(intersection) == 1:\n          ans = intersection.pop()\n      elif len(intersection) == 0:\n          ans = 'Volunteer cheated!'\n      else:\n          ans = 'Bad magician!'\n  \n      print 'Case #%(T)s: %(ans)s' % locals()\n <CODESPLIT> 12
 \n  def solve(W, H, M):\n    board = [['*' for x in xrange(H)] for x in xrange(W)]\n    board[0][0] = 'c'\n    \n    S = [((H*W)-1, board, 0, 0, set())]\n    H -= 1\n    W -= 1\n    while len(S) > 0:\n      state = S.pop()\n      mines = state[0]\n      board = deepcopy(state[1])\n      x = state[2]\n      y = state[3]\n      visited = deepcopy(state[4])\n      visited.add((x, y))\n      \n      if mines == M:\n        s = ''\n        for row in board:\n          s += ''.join(row)\n          s += '\n'\n        return s\n      \n      elif mines > M:\n        if x > 0 and board[x-1][y] == '*':\n          board[x-1][y] = '.'\n          mines -= 1\n        \n        if x < W and board[x+1][y] == '*':\n          board[x+1][y] = '.'\n          mines -= 1\n        \n        if y > 0 and board[x][y-1] == '*':\n          board[x][y-1] = '.'\n          mines -= 1\n        \n        if y < H and board[x][y+1] == '*':\n          board[x][y+1] = '.'\n          mines -= 1\n        \n        if x > 0 and y > 0 and board[x-1][y-1] == '*':\n          board[x-1][y-1] = '.'\n          mines -= 1\n        \n        if x > 0 and y < H and board[x-1][y+1] == '*':\n          board[x-1][y+1] = '.'\n          mines -= 1\n        \n        if x < W and y > 0 and board[x+1][y-1] == '*':\n          board[x+1][y-1] = '.'\n          mines -= 1\n        \n        if x < W and y < H and board[x+1][y+1] == '*':\n          board[x+1][y+1] = '.'\n          mines -= 1\n        \n        if x > 0 and not (x-1, y) in visited:\n          S.append((mines, board, x-1, y, visited))\n        \n        if x < W and not (x+1, y) in visited:\n          S.append((mines, board, x+1, y, visited))\n        \n        if y > 0 and not (x, y-1) in visited:\n          S.append((mines, board, x, y-1, visited))\n        \n        if y < H and not (x, y+1) in visited:\n          S.append((mines, board, x, y+1, visited))\n        \n        if x > 0 and y > 0 and not (x-1, y-1) in visited:\n          S.append((mines, board, x-1, y-1, visited))\n        \n        if x > 0 and y < H and not (x-1, y+1) in visited:\n          S.append((mines, board, x-1, y+1, visited))\n        \n        if x < W and y > 0 and not (x+1, y-1) in visited:\n          S.append((mines, board, x+1, y-1, visited))\n        \n        if x < W and y < H and not (x+1, y+1) in visited:\n          S.append((mines, board, x+1, y+1, visited))\n    return 'Impossible'\n  \n  T = int(raw_input())\n  for t in range(T):\n    W, H, M = map(int, raw_input().split())\n    print 'Case #%i:\n%s' % (t+1, solve(W, H, M).strip())\n <CODESPLIT> 13
T = int(raw_input())\n  for i in range(T):\n    index = int(raw_input())\n    X = []\n    for j in range(4):\n      X.append(map(int, raw_input().split()))\n    x1 = X[index-1]\n    index = int(raw_input())\n    X = []\n    for j in range(4):\n      X.append(map(int, raw_input().split()))\n    x2 = X[index-1]\n    ans = set(x1).intersection(set(x2))\n    if len(ans) == 0:\n      print 'Case #%i: Volunteer cheated!' % (i+1)\n    elif len(ans) == 1:\n      print 'Case #%i: %i' % (i+1, ans.pop())\n    else:\n      print 'Case #%i: Bad magician!' % (i+1)\n <CODESPLIT> 13
 \n  def all_grids(R,C,M, lp=0,placed=0):\n      rem = R*C-lp\n      if M-placed >= rem:\n          if M-placed > rem:\n              return None\n          \n          res = set()\n          for i in range(lp, R*C):\n              res.add(i)\n          return [res]\n          \n      if placed == M:\n          return [set()]\n  \n      res = []\n      for i in range(lp, R*C):\n          sub_sol = all_grids(R,C,M,i+1, placed+1)\n          if sub_sol is None:\n              continue\n              \n          for s in sub_sol:\n              s.add(i)\n              res.append(s)\n      return res\n  \n  def adj(R,C,i):\n      \n      res = []\n      left_edge = i % C == 0\n      top_edge = i // C == 0\n      right_edge = (i+1) % C == 0\n      bottom_edge = i // C == R-1\n      \n      if not left_edge:\n          res.append(i-1)\n          if not top_edge:\n              res.append(i-1-C)\n          if not bottom_edge:\n              res.append(i+C-1)\n              \n      if not right_edge:\n          res.append(i+1)\n          if not top_edge:\n              res.append(i+1-C)\n          if not bottom_edge:\n              res.append(i+1+C)\n              \n      if not bottom_edge:\n          res.append(i+C)\n      if not top_edge:\n          res.append(i-C)\n      return res\n          \n      \n      \n      \n  def solution(R,C,g):\n      M = R*C\n      res = []\n      num_zeroes = 0\n      for i in range(M):\n          if i in g:\n              res.append('x')\n              continue\n          x = 0\n          for a in adj(R,C,i):\n              if a in g:\n                  x += 1\n          if x == 0:\n              num_zeroes += 1\n          res.append(x)\n          \n      for i in range(M):\n          if i in g:\n              continue\n          r = res[i]\n          if r == 0 and num_zeroes == 1:\n              continue\n          connected = False\n          for a in adj(R,C,i):\n              if res[a] == 0:\n                  connected = True\n                  break\n          if not connected:\n              return None\n      \n      return res.index(0)\n  \n  def transcribe(R,C, g, sol):\n      res = []\n      for i in range(R):\n          r = []\n          for j in range(C):\n              x = i*C+j\n              if x in g:\n                  r.append('*')\n              elif x == sol:\n                  r.append('c')\n              else:\n                  r.append('.')\n          res.append(r)\n      return res\n  \n  def printed_sol(transcript):\n      if transcript is None:\n          return "Impossible"\n      else:\n          return "\n".join("".join(row) for row in transcript)\n  \n  def solve(R,C,M):\n      if M == R*C-1:\n          g = []\n          for i in range(R*C-1):\n              g.append(i)\n          return transcribe(R,C, g, R*C-1)\n      \n      for g in all_grids(R,C,M):\n          sol = solution(R,C,g)\n          if sol is None:\n              continue\n          return transcribe(R,C, g, sol)\n      return None\n              \n      \n  def output_grid(R,C,g):\n      for i in range(R):\n          for j in range(C):\n              if i*C+j not in g:\n                  sys.stdout.write(".")\n              else:\n                  sys.stdout.write("*")\n          sys.stdout.write("\n")\n  \n  if __name__ == "__main__":\n      T = int(raw_input())\n      for i in range(1,T+1):\n          R,C,M = map(int, raw_input().split())\n          print "Case #%d:" % i\n          print printed_sol(solve(R,C,M))\n <CODESPLIT> 14
def solve(c1, g1, c2, g2):\n      row_1 = g1[c1-1]\n      row_2 = g2[c2-1]\n      inter = set(row_1) & set(row_2)\n      if len(inter) == 0:\n          return "Volunteer cheated!"\n      if len(inter) > 1:\n          return "Bad magician!"\n      return str(inter.pop())\n  \n  if __name__ == "__main__":\n      T = int(raw_input())\n      for i in range(1,T+1):\n          c1 = int(raw_input())\n          g1 = []\n          for j in range(4):\n              g1.append(map(int, raw_input().split()))\n          c2 = int(raw_input())\n          g2 = []\n          for j in range(4):\n              g2.append(map(int, raw_input().split()))\n          print "Case #%d: %s" % (i, solve(c1,g1,c2,g2)) \n          \n      \n <CODESPLIT> 14
 \n  \n  tCase = int(sys.stdin.readline())\n  \n  \n  def map(R, C, Bombs):\n  	m = [["." for x in xrange(C)] for x in xrange(R)]\n  	print Bombs\n  	m[R-1][C-1] = 'c'\n  	lastSkip = False\n  	for i in xrange(R):\n  		for j in xrange(C):\n  			if Bombs == 0:\n  				break\n  			\n  			if lastSkip:\n  				m[i][j] = 'f'\n  				continue\n  			\n  			if R - i == 2 or C - j == 2:\n  				if Bombs == 1:\n  					m[i][j] = 'f'\n  					lastSkip = True\n  					continue\n  			\n  				\n  			m[i][j] = '*'\n  			Bombs -= 1\n  			lastSkip = False\n  		lastSkip = False\n  				\n  	\n  	\n  	for line in m:\n  		for c in line:\n  			print c,\n  		print\n  		\n  		\n  def imprimir(m):\n  	for line in m:\n  		for c in line:\n  			print c,\n  		print\n  		\n  def map2(R, C, Bombs):\n  	m = [["." for x in xrange(C)] for x in xrange(R)]\n  	m[R-1][C-1] = 'c'\n  	lastSkip = False\n  	\n  	ii = 0\n  	jj = 0\n  	while Bombs > 0:\n  		for j in xrange(jj, C):\n  			if Bombs >= (C - j) or Bombs <= (C - j - 2) and Bombs > 0:\n  				m[ii][j] = '*'\n  				Bombs -= 1\n  			else:\n  				continue\n  		\n  		\n  		for i in xrange(ii+1, R):\n  			if Bombs >= (R - i) or Bombs <= (R - i - 2) and Bombs > 0:\n  				m[i][jj] = '*'\n  				Bombs -= 1\n  			else:\n  				if Bombs > 0:\n  					print "Impossible"\n  					return\n  				continue\n  		jj += 1\n  		ii += 1\n  	imprimir(m)\n  	\n  				\n  	\n  	\n  \n  		\n  def main(R, C, M):\n  	vazios = R * C - M\n  \n  	if R == 1 or C == 1 or vazios == 1 or vazios >= 4:\n  		map2(R, C, M)\n  	else:\n  		print "Impossible"\n  \n  	return ""\n  		\n   \n  if __name__ == '__main__':\n  	for i in xrange(tCase):	\n  		\n  		R, C, M = [int(x) for x in sys.stdin.readline().split(' ')]\n  		print "Case #%d:" % (i + 1)\n  		main(R, C, M)\n <CODESPLIT> 15
 \n  \n  \n  class Test(unittest.TestCase):\n  	def test_1(self):\n  		self.assertEqual(main(5, 2, 2, [2,1]), 12)\n  	def test_2(self):\n  		self.assertEqual(main(5,2,2,[1,2]), 12)\n  	def test_3(self):\n  		self.assertEqual(main(3,3,4,[4,1,3,5]), 39)\n  	def test_4(self):\n  		self.assertEqual(main(5,2,4,[5, 1, 1, 5]), 51)\n  \n  \n  tCase = int(sys.stdin.readline())\n  \n  def main(A, B, AList, BList):\n  	resp = 0\n  	A = A - 1\n  	B = B - 1\n  	Alist = AList[A*4:A*4+4]\n  	BList = BList[B*4:B*4+4]\n  	cont = 0\n  	for aa in Alist:\n  		if aa in BList:\n  			resp = aa\n  			cont += 1\n  		\n  	if cont == 1:\n  		return resp\n  	elif cont == 0:\n  		return "Volunteer cheated!"\n  	else:\n  		return "Bad magician!"\n  		\n   \n  if __name__ == '__main__':\n  	for i in xrange(tCase):	\n  		\n  		A = [int(x) for x in sys.stdin.readline().split(' ')][0]\n  		NList = [int(x) for x in sys.stdin.readline().split(' ')]\n  		NList += [int(x) for x in sys.stdin.readline().split(' ')]\n  		NList += [int(x) for x in sys.stdin.readline().split(' ')]\n  		NList += [int(x) for x in sys.stdin.readline().split(' ')]\n  		B = [int(x) for x in sys.stdin.readline().split(' ')][0]\n  		BList = [int(x) for x in sys.stdin.readline().split(' ')]\n  		BList += [int(x) for x in sys.stdin.readline().split(' ')]\n  		BList += [int(x) for x in sys.stdin.readline().split(' ')]\n  		BList += [int(x) for x in sys.stdin.readline().split(' ')]\n  		print "Case #%d: %s" % (i + 1, main(A, B, NList, BList))\n <CODESPLIT> 15
 \n  def debug(v):\n      pass#print(v)\n  \n  def read(f):\n      t = tuple(int(v) for v in f.readline().split())\n      debug(t)\n      return t\n  \n  def readf(f):\n      t = tuple(float(v) for v in f.readline().split())\n      debug(t)\n      return t\n  \n  def answer(f, X, ans):\n      out = "Case #{}:\n{}".format(X, ans)\n      f.write(out)\n      f.write("\n")\n      print(out)\n  \n  def answer_cells(f, X, cells):\n      out = "Case #{}:".format(X)\n      f.write(out)\n      f.write("\n")\n      print(out)\n      for row in cells:\n          out = "".join(row)\n          f.write(out)\n          f.write("\n")\n          print(out)\n  \n  def main(inf, outf):\n      T, = read(inf)\n      for casenmbr in range(1, T + 1):\n          R, C, M = read(inf)\n  \n          if M == 0:\n              cells = [['.'] * C for i in range(R)]\n              cells[0][0] = 'c'\n              answer_cells(outf, casenmbr, cells)\n              continue\n  \n          empty = R * C - M\n  \n          if empty == 1:\n              cells = [['*'] * C for i in range(R)]\n              cells[0][0] = 'c'\n              answer_cells(outf, casenmbr, cells)\n              continue\n  \n          if R == 1 or C == 1:\n              cells = [['.'] * C for i in range(R)]\n              m = 0\n              for r in range(R):\n                  for c in range(C):\n                      cells[r][c] = '*'\n                      m += 1\n                      if m == M:\n                          break\n                  else:\n                      continue\n                  break\n              cells[-1][-1] = 'c'\n              answer_cells(outf, casenmbr, cells)\n              continue\n  \n          if empty in (2, 3, 5, 7):\n              answer(outf, casenmbr, "Impossible")\n              continue\n  \n          if (R == 2 or C == 2) and empty % 2:\n              answer(outf, casenmbr, "Impossible")\n              continue\n  \n          cells = [['*'] * C for i in range(R)]\n  \n  \n          cells[0][0] = 'c'\n          empty -= 1\n          cc = 1\n          rr = 1\n          while empty > 0:\n              if cc < C:\n                  for r in range(rr):\n                      if empty == 2 and r == rr - 1:\n                          break\n                      cells[r][cc] = '.'\n                      empty -= 1\n                      if empty == 0:\n                          break\n                  cc += 1\n              if rr < R and empty > 0:\n                  for c in range(cc):\n                      if empty == 2 and c == cc - 1:\n                          break\n                      cells[rr][c] = '.'\n                      empty -= 1\n                      if empty == 0:\n                          break\n                  rr += 1            \n  \n          answer_cells(outf, casenmbr, cells)\n  \n  \n  if __name__=="__main__":\n      infname = sys.argv[1]\n      outfname = os.path.splitext(infname)[0] + ".out"\n      with open(infname, "r") as inf:\n          with open(outfname, "w") as outf:\n              main(inf, outf)\n <CODESPLIT> 16
 \n  def debug(v):\n      pass #print(v)\n  \n  def read(f):\n      t = tuple(int(v) for v in f.readline().split())\n      debug(t)\n      return t\n  \n  def answer(f, X, ans):\n      out = "Case #{}: {}".format(X, ans)\n      f.write(out)\n      f.write("\n")\n      print(out)\n  \n  \n  \n  def main(inf, outf):\n      T, = read(inf)\n      for X in range(1, T + 1):\n          row1, = read(inf)\n          cards1 = tuple(read(inf) for i in range(4))\n          row2, = read(inf)\n          cards2 = tuple(read(inf) for i in range(4))\n  \n          kouho = set(cards1[row1 - 1]).intersection(cards2[row2 - 1])\n  \n          if kouho:\n              if len(kouho) == 1:\n                  ans = kouho.pop()\n              else:\n                  ans = "Bad magician!"\n          else:\n              ans = "Volunteer cheated!"\n  \n          answer(outf, X, ans)\n  \n  \n  if __name__=="__main__":\n      infname = sys.argv[1]\n      outfname = os.path.splitext(infname)[0] + ".out"\n      with open(infname, "r") as inf:\n          with open(outfname, "w") as outf:\n              main(inf, outf)\n <CODESPLIT> 16
 \n  if __name__ == "__main__":\n      f = sys.stdin\n      if len(sys.argv) >= 2:\n          fn = sys.argv[1]\n          if fn != '-':\n              f = open(fn)\n  \n      t = int(f.readline())\n      for _t in range(t):\n  \n          R, C, M = [int(x) for x in f.readline().split()]\n          free_spots = R * C - M - 1\n  \n          if M == 0:\n              answer = [["." for x in range(C)] for y in range(R)]\n              answer[0][0] = "c"\n          elif R == 1:\n              answer = [["c"] + ["." for x in range(free_spots)] + ["*" for m in range(M)]]\n          elif C == 1:\n              answer = [["c"] + ["." for x in range(free_spots)] + ["*" for m in range(M)]]\n              answer = zip(*answer[::-1])\n          elif free_spots >= 3: # and M % R >= 2:\n              answer = [["*" for x in range(C)] for y in range(R)]\n              answer[0][0] = "c"\n              answer[0][1] = "."\n              answer[1][1] = "."\n              answer[1][0] = "."\n              free_spots -= 3\n              tr, br, c = 0, 1, 2\n              if c >= C:\n                  tr, br, c = 2, 3, 0\n              for _i in range(free_spots):\n                  if answer[tr][c] == "*":\n                      answer[tr][c] = "."\n                  elif answer[br][c] == "*":\n                      answer[br][c] = "."\n                      if c < C-1:\n                          c+=1\n                      else:\n                          tr, br = tr + 2, br + 2\n                          c = 0\n                          if br == R:\n                              br, tr = br-1, tr-1\n                  \n          else:\n              answer = ["Impossible",]\n  \n          \n          \n          print ("Case #" + str(_t+1) + ":")\n          for _i in answer:\n              print "".join(_i)\n      \n  \n <CODESPLIT> 17
 \n  if __name__ == "__main__":\n      f = sys.stdin\n      if len(sys.argv) >= 2:\n          fn = sys.argv[1]\n          if fn != '-':\n              f = open(fn)\n  \n      t = int(f.readline())\n      for _t in range(t):\n          X = int(f.readline())\n          cardsX = [[int(y) for y in f.readline().split()] for x in range(4)]\n          row = cardsX[X-1]\n          Y = int(f.readline())\n          cardsY = [[int(y) for y in f.readline().split()] for x in range(4)]\n          column = cardsY[Y-1]\n          card = [x for x in row if x in column]\n          if len(card) > 1:\n              answer = "Bad magician!"\n          elif len(card) == 0:\n              answer = "Volunteer cheated!"\n          else:\n              answer = str(card[0])\n          print ("Case #" + str(_t+1) + ": " + answer)\n      \n  \n <CODESPLIT> 17
 \n  '''\n  Input\n  The first line of the input gives the number of test cases, T. T lines follow. \n  Each line contains three space-separated integers: R, C, and M (Rows, Columns, Mines).\n  \n  Output\n  For each test case, output a line containing "Case #x:", where x is the test case number. \n  On the following R lines, output the board configuration with C characters per line, \n  using '.' to represent an empty cell, '*' to represent a cell that contains a mine, \n  and 'c' to represent the clicked cell. If there is no possible configuration, \n  then instead of the grid, output a line with "Impossible" instead. \n  If there are multiple possible configurations, output any one of them.\n  \n  Limits\n  0 <= M < R * C.\n  \n  Small dataset\n  1 <= T <= 230.\n  1 <= R, C <= 5.\n  \n  Large dataset\n  1 <= T <= 140.\n  1 <= R, C <= 50.\n  \n  Sample\n  ---Input \n  5\n  5 5 23\n  3 1 1\n  2 2 1\n  4 7 3\n  10 10 82\n  \n  ---Output \n  Case #1:\n  Impossible\n  Case #2:\n  c\n  .\n  *\n  Case #3:\n  Impossible\n  Case #4:\n  ......*\n  .c....*\n  .......\n  ..*....\n  Case #5:\n  **********\n  **********\n  **********\n  ****....**\n  ***.....**\n  ***.c...**\n  ***....***\n  **********\n  **********\n  **********\n  \n  \n  '''\n  \n  \n  f = open(sys.argv[1])\n  def input(): return f.readline().strip();\n  \n  def genBoards(R, C, M):\n      for mines in combinations( product(range(R), range(C)), M):\n          board = [ ['.'] * C + [''] for _ in range(R) ]\n          for row, col in mines:\n              board[row][col] = '*'\n          yield board + [[''] * (C+1)]\n      pass\n  \n  def oneClickSolution(R, C, M):\n      for bd in genBoards(R, C, M):\n          minTile = 10\n          for r in range(R):\n              for c in range(C):\n                  if bd[r][c] == '.':\n                      n = sum(bd[r+i][c+j]=='*' for i in (-1,0,1) for j in (-1,0,1))\n                      bd[r][c] = `n`\n                      if n <= minTile:\n                          minTile = n\n                          minR, minC = r, c\n          if minTile < 10:\n              queue = [ (minR, minC) ]\n              nOpen = 0\n              while queue:\n                  r,c = queue.pop()\n                  if bd[r][c] == '0':\n                      for i in -1,0,1:\n                          for j in -1,0,1:\n                              if i or j: # we don't add the one we popped back\n                                  queue.append( (r+i, c+j) )\n                  if bd[r][c] not in '.*':\n                      bd[r][c] = '.'\n                      nOpen += 1\n              if M + nOpen == R*C:\n                  bd[minR][minC] = 'c'\n                  return '\n'.join( ''.join(row[:-1]) for row in bd[:-1] )\n  \n      return 'Impossible'\n  \n  \n  clk = clock()\n  \n  for caseNo in xrange(1, int(input())+1):\n      R, C, M = map(int, input().split())\n      print >>sys.stderr, caseNo, R, C, M #, oneClickSolution(R, C, M)<>'Impossible'\n      print 'Case #%d:' % caseNo  \n      print oneClickSolution(R, C, M)\n      \n  print >>sys.stderr, 'time= %.1f seconds' % (clock()-clk )\n  \n <CODESPLIT> 18
 \n  '''\n  ---Input \n  3\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  3\n  1 2 5 4\n  3 11 6 15\n  9 10 7 12\n  13 14 8 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  3\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  \n  ---Output \n  Case #1: 7\n  Case #2: Bad magician!\n  Case #3: Volunteer cheated!\n  '''\n  \n  \n  \n  \n  \n  f = open(sys.argv[1])\n  def input(): return f.readline().strip();\n  \n         \n  \n  \n  for caseNo in xrange(1, int(input())+1):\n      row_no = int(input())\n      for i in 1,2,3,4:\n          row = input()\n          if i == row_no:\n              nums = set(row.split())\n              \n      row_no = int(input())\n      for i in 1,2,3,4:\n          row = input()\n          if i == row_no:\n              nums &= set(row.split())\n  \n      if not nums:\n          res = 'Volunteer cheated!'\n      elif len(nums) > 1:\n          res = 'Bad magician!'        \n      else:\n          res = nums.pop()\n      print 'Case #%d:' % caseNo, res\n      \n  \n <CODESPLIT> 18
t = int(input())\n  \n  VIDE = 0\n  MINE = 1\n  CURSEUR = 2\n  \n  def test_position(arr, lignes, cols, y, x):\n      def voisinage_libre(arr, y, x):\n          if y > 0:\n              if x > 0 and arr[y-1][x-1] == MINE:\n                  return False\n              if arr[y-1][x] == MINE:\n                  return False\n              if x < cols - 1 and arr[y-1][x+1] == MINE:\n                  return False\n  \n          if x > 0 and arr[y][x-1] == MINE:\n              return False\n          if x < cols - 1 and arr[y][x+1] == MINE:\n              return False\n  \n          if y < lignes - 1:\n              if x > 0 and arr[y+1][x-1] == MINE:\n                  return False\n              if arr[y+1][x] == MINE:\n                  return False\n              if x < cols - 1 and arr[y+1][x+1] == MINE:\n                  return False\n  \n          return True\n  \n      def remplissage_rec(arr, y, x):\n          if x < 0 or y < 0 or x >= cols or y >= lignes:\n              return\n          elif arr[y][x] == CURSEUR:\n              return\n  \n          arr[y][x] = CURSEUR\n          if voisinage_libre(arr, y, x):\n              remplissage_rec(arr, y-1, x-1)\n              remplissage_rec(arr, y-1, x)\n              remplissage_rec(arr, y-1, x+1)\n              remplissage_rec(arr, y, x-1)\n              remplissage_rec(arr, y, x+1)\n              remplissage_rec(arr, y+1, x-1)\n              remplissage_rec(arr, y+1, x)\n              remplissage_rec(arr, y+1, x+1)\n  \n      if arr[y][x] != VIDE:\n          return False\n  \n      arr2 = [ [ arr[i][j] for j in range(0, cols) ] for i in range(0, lignes) ]\n  \n      remplissage_rec(arr2, y, x)\n  \n      for i in range(0, lignes):\n          for j in range(0, cols):\n              if arr2[i][j] == VIDE:\n                  return False\n      return True\n  \n  def dfs(arr, lignes, cols, mines, y, x):\n      cases_restantes = (cols - x) + ((lignes - y) * cols)\n  \n      if cases_restantes < mines:\n          return None\n      elif mines <= 0:\n          for i in range(0, lignes):\n              for j in range(0, cols):\n                  if test_position(arr, lignes, cols, i, j):\n                      return (i, j)\n      elif x >= cols:\n          return dfs(arr, lignes, cols, mines, y+1, 0)\n      elif y >= lignes:\n          return None\n      else:\n          res = dfs(arr, lignes, cols, mines, y, x+1)\n          if res != None:\n              return res\n  \n          arr[y][x] = MINE\n          res = dfs(arr, lignes, cols, mines-1, y, x+1)\n          if res != None:\n              return res\n  \n          arr[y][x] = VIDE\n          return None\n  \n  for i in range(0, t):\n      ligne  = input().split(" ")\n      lignes = int(ligne[0])\n      cols   = int(ligne[1])\n      mines  = int(ligne[2])\n  \n      arr = [ [VIDE] * cols for _ in range(0, lignes) ]\n  \n      res = dfs(arr, lignes, cols, mines, 0, 0)\n  \n      print ("Case #"+str(i+1)+":")\n  \n      if res == None:\n          print ("Impossible")\n      else:\n          (y, x) = res\n  \n          for i in range(0, lignes):\n              for j in range(0, cols):\n                  if i == y and j == x:\n                      print('c', end='')\n                  elif arr[i][j] == VIDE:\n                      print('.', end='')\n                  else:\n                      print('*', end='')\n  \n              print('', end='\n')\n <CODESPLIT> 19
 \n  \n  data Test = Test {\n        choix1 :: Int\n      , table1 :: [[Int]]\n      , choix2 :: Int\n      , table2 :: [[Int]]\n      } deriving Show\n  \n  data Solution = Bonne Int | BadMag | Cheat\n  \n  instance Show Solution where\n      show (Bonne i) = show i\n      show BadMag    = "Bad magician!"\n      show Cheat     = "Volunteer cheated!"\n  \n  main = do\n      interact (unlines . map showCase . zip [1..] . map (resoudre) . goTest . tail . lines)\n  \n    where\n      goTest [] = []\n      goTest ls =\n          let (c1, t1, ls')  = goTable ls\n              (c2, t2, ls'') = goTable ls'\n          in Test c1 t1 c2 t2 : goTest ls''\n  \n      goTable (n:ls) =\n          let c = read n\n              (t, ls') = splitAt 4 ls\n          in (c, map goLigne t, ls')\n  \n      goLigne = map read . words\n  \n      showCase :: (Int, Solution) -> String\n      showCase (i, s) = printf "Case #%d: %s" i (show s)\n  \n  resoudre :: Test -> Solution\n  resoudre Test {..} =\n      let choisis1 = table1 !! (choix1 - 1)\n          choisis2 = table2 !! (choix2 - 1)\n          communs  = filter (`elem` choisis1) choisis2\n      in case communs of\n          [x]     -> Bonne x\n          (_:_:_) -> BadMag\n          []      -> Cheat\n <CODESPLIT> 19
def get_a(r, c, f='.'):\n      A = []\n      for i in xrange(r):\n          A.append([f] * c)\n      return A\n  \n  \n  def apply(A, r, c, B):\n      for i, b in enumerate(B):\n          for j, v in enumerate(b):\n              A[r + i][c + j] = v\n  \n  \n  def draw(A):\n      if A is None:\n          return '\nImpossible'\n      res = ['']\n      for a in A:\n          res.append(''.join(a))\n      return '\n'.join(res)\n  \n  \n  def trans(A):\n      if not A:\n          return None\n      B = get_a(len(A[0]), len(A))\n      for i, a in enumerate(A):\n          for j, v in enumerate(a):\n              B[j][i] = v\n      return B\n  \n  \n  def check(A, m, r, c):\n      if A is None:\n          return True\n      cnts = {'c': 0, '*': 0, '.': 0}\n  \n      assert len(A) == r\n      for i in xrange(r):\n          assert len(A[i]) == c\n          for j in xrange(c):\n              cnts[A[i][j]] += 1\n      assert cnts['*'] == m\n      assert cnts['c'] == 1\n      assert cnts['.'] == r * c - m - 1\n  \n  \n  def CASE(IN):\n      def rstr():\n          return IN.readline().strip()\n  \n      def rint():\n          return int(rstr())\n  \n      def rints():\n          return map(int, rstr().split())\n      r, c, m = rints()\n      A = solve(m, r, c)\n      if A:\n          A[-1][-1] = 'c'\n      check(A, m, r, c)\n      return draw(A)\n  \n  \n  def solve(m, r, c):\n      if r > c:\n          return trans(solve(m, c, r))\n      assert r <= c\n      assert m != r * c\n      e = r * c - m\n      if e == 1:\n          A = get_a(r, c, '*')\n          return A\n      if r == 1:\n          A = get_a(1, c, '.')\n          for i in xrange(m):\n              A[0][i] = '*'\n          return A\n      if r == 2:\n          if e == 2 or e % 2 == 1:\n              return None\n          A = get_a(2, c, '.')\n          assert m % 2 == 0\n          for i in xrange(m / 2):\n              A[0][i] = A[1][i] = '*'\n          return A\n      assert r >= 3\n      A = get_a(r, c, '*')\n      if e in (2, 3, 5, 7):\n          return None\n      E = [c] * (e / c) + ([e % c] if e % c else [])\n      if sum(E) < e:\n          E.append(e % c)\n          assert sum(E) == e\n      if len(E) == 1:\n          E = [e / 2] * 2\n          if sum(E) < e:\n              e.append(1)\n      if E[0] != E[1]:\n          s = sum(E[:2])\n          E[0] = E[1] = s / 2\n          if sum(E[:2]) != s:\n              assert len(E) == 2\n              E.append(1)\n      if E[-1] == 1:\n          if len(E) > 3:\n              E[-2] -= 1\n              E[-1] += 1\n          else:\n              E[0] -= 1\n              E[1] -= 1\n              E[2] += 2\n      for i in xrange(len(E)):\n          for j in xrange(E[i]):\n              A[-i - 1][-j - 1] = '.'\n      return A\n  \n  \n  def RUN(IN, OUT):\n      t = int(IN.readline().strip())\n      for i in xrange(1, t + 1):\n          OUT.write("Case #%i: %s\n" % (i, CASE(IN)))\n  \n  if __name__ == "__main__":\n      RUN(sys.stdin, sys.stdout)\n <CODESPLIT> 20
def CASE(IN):\n      def rstr(): return IN.readline().strip()\n      def rint(): return int(rstr())\n      def rints(): return map(int, rstr().split())\n      def rr():\n          x = rint()\n          m = [rints() for i in xrange(4)]\n          return set(m[x-1])\n      s = rr().intersection(rr())\n      if not s:\n          return "Volunteer cheated!"\n      if len(s) == 1:\n          return s.pop()\n      return "Bad magician!"\n  \n  \n  def RUN(IN, OUT):\n      t = int(IN.readline().strip())\n      for i in xrange(1,t+1):\n          OUT.write("Case #%i: %s\n" % (i, CASE(IN)))\n  \n  if __name__ == "__main__":\n      RUN(sys.stdin, sys.stdout)\n <CODESPLIT> 20
 \n  \n  \n  class Minesweeper_2014_QC(puzutils.CodeJamProblem):\n    def __init__(self, inputFilename):\n      puzutils.CodeJamProblem.__init__(self, inputFilename)\n  \n      self.T = None\n  \n    def load(self):\n      """\n        input:\n  \n        T (number of test cases)\n  \n        R C M (integers)\n  \n      """\n  \n      self.tests = []\n  \n      with open(self.inputFilename, "rt") as file:\n        self.T = int(file.readline().strip())\n  \n        for i in xrange(self.T):\n          (R,C,M) = [int(x) for x in file.readline().split(' ')]\n  \n          self.tests.append([R,C,M])\n  \n      return True\n  \n    def boardToString(self, board):\n      retval = ""\n  \n      for row in board:\n        retval = retval + "\n" + "".join(row)\n  \n      return retval\n  \n    def executeTest(self, test):\n      """\n        Run a test and return output.\n      """\n  \n      (R,C,M) = test\n  \n      spaces = R * C\n      blanks = spaces - M\n  \n      if (blanks <= 0):\n        return "Impossible"\n  \n      board = [['.' for x in range(C)] for y in range(R)]\n  \n      board[R-1][C-1] = "c"\n  \n      badpositions=[]\n      positions=[]\n  \n      for x in xrange(C):\n        for y in xrange(R):\n          if (x == (C-1)) and (y == (R-1)):\n            continue\n          if (x == (C-1)) and (y == (R-2)):\n            badpositions.append((x,y))\n            continue\n          if (x == (C-2)) and (y == (R-1)):\n            badpositions.append((x,y))\n            continue\n          if (x == (C-2)) and (y == (R-2)):\n            badpositions.append((x,y))\n            continue\n  \n          positions.append((x,y))\n  \n      positions.reverse()\n  \n      for x in badpositions:\n        positions.insert(0, x)\n  \n      m = M\n  \n      while (m > 0):\n        if len(positions) <= 0:\n          return "Impossible"\n  \n        pos = positions.pop()\n        (x,y) = pos\n  \n        if (board[y][x] != "."):\n          return "Impossible"\n  \n        board[y][x] = '*'\n        m = m - 1\n  \n      mines = sum([x.count('*') for x in board])\n  \n      if (mines != M):\n        return "Impossible"\n  \n      if (blanks > 1):\n        if (R > 1):\n          if board[R - 2][C - 1] == "*":\n            return "Impossible"\n  \n        if (C > 1):\n          if board[R - 1][C - 2] == "*":\n            return "Impossible"\n  \n        if (R > 1) and (C > 1):\n          if board[R - 2][C - 2] == "*":\n            return "Impossible"\n  \n      return self.boardToString(board)\n  \n  with Minesweeper_2014_QC(sys.argv[1]) as problem:\n    problem.load()\n  \n    problem.run()\n <CODESPLIT> 21
 \n  \n  \n  class Magic_2014_QA(puzutils.CodeJamProblem):\n    def __init__(self, inputFilename):\n      puzutils.CodeJamProblem.__init__(self, inputFilename)\n  \n      self.T = None\n  \n    def load(self):\n      """\n        input:\n  \n        T (number of test cases)\n  \n        A (answer to first question)\n        x x x x\n        x x x x\n        x x x x\n        x x x x\n        B (answer to second question)\n        x x x x\n        x x x x\n        x x x x\n        x x x x\n  \n      """\n  \n      self.tests = []\n  \n      with open(self.inputFilename, "rt") as file:\n        self.T = int(file.readline().strip())\n  \n        for i in xrange(self.T):\n          a = int(file.readline().strip())\n          test = {'a': a}\n          board = []\n          \n          for j in xrange(4):\n            line = file.readline().strip()\n            row = set([int(x) for x in line.split(' ')])\n            board.append(row)\n  \n          test['aboard'] = board\n  \n          b = int(file.readline().strip())\n          test['b'] = b\n          board = []\n          \n          for j in xrange(4):\n            line = file.readline().strip()\n            row = set([int(x) for x in line.split(' ')])\n            board.append(row)\n  \n          test['bboard'] = board\n  \n          self.tests.append(test)\n  \n      return True\n  \n    def executeTest(self, test):\n      """\n        Run a test and return output.\n      """\n  \n  \n      rowA = test['aboard'][test['a'] - 1]\n      rowB = test['bboard'][test['b'] - 1]\n  \n  \n      intersect = rowA.intersection(rowB)\n  \n  \n      if (len(intersect) == 1):\n        (element,) = intersect\n        return element\n      elif (len(intersect) == 0):\n        return "Volunteer cheated!"\n      else:\n        return "Bad magician!"\n  \n  with Magic_2014_QA(sys.argv[1]) as problem:\n    problem.load()\n  \n    problem.run()\n <CODESPLIT> 21
 \n  f = open(sys.argv[1])\n  T = int(f.readline())\n  for test in range(T):\n      R, C, M = map(int, f.readline().strip().split())\n      Rorig = R\n      Corig = C\n      impossible = False\n      grid = [['.' for i in range(C)] for j in range(R)]\n  \n      curr_coord = [0,0]\n      while M > 0 and not impossible:\n          if (C > R): # more columns - fill one in\n              num_mines_in_column = R\n              if M < R:\n                  num_mines_in_column = min(R - 2, M)\n              if num_mines_in_column <= 0:\n                  impossible = True\n                  break\n              for ii in range(num_mines_in_column):\n                  grid[curr_coord[0] + ii][curr_coord[1]] = '*'\n              C -= 1\n              curr_coord[1] += 1\n              M -= num_mines_in_column\n          else:\n              num_mines_in_row = C\n              if M < C:\n                  num_mines_in_row = min(C - 2, M)\n              if num_mines_in_row <= 0:\n                  impossible = True\n                  break\n              for ii in range(num_mines_in_row):\n                  grid[curr_coord[0]][curr_coord[1] + ii] = '*'\n              R -= 1\n              curr_coord[0] += 1\n              M -= num_mines_in_row\n  \n      print "Case #%d:" % (test + 1)\n      if impossible:\n          print "Impossible"\n      else:\n          for ii in range(Rorig):\n              for jj in range(Corig):\n                  if grid[ii][jj] == '.':\n                      if ii - 1 >= 0 and grid[ii-1][jj] == '*':\n                          grid[ii][jj] = 'dirty'\n                      elif jj - 1 >= 0 and grid[ii][jj-1] == '*':\n                          grid[ii][jj] = 'dirty'\n                      elif jj - 1 >= 0 and ii - 1 >= 0 and grid[ii-1][jj-1] == '*':\n                          grid[ii][jj] = 'dirty'\n  \n          for ii in range(Rorig):\n              for jj in range(Corig):\n                  if grid[ii][jj] == 'dirty':\n                      if ii + 1 < Rorig and grid[ii+1][jj] == '.':\n                          grid[ii][jj] = '.'\n                      elif jj + 1 < Corig and grid[ii][jj+1] == '.':\n                          grid[ii][jj] = '.'\n                      elif jj + 1 < Corig and ii + 1 < Rorig and grid[ii+1][jj+1] == '.':\n                          grid[ii][jj] = '.'\n                      else:\n                          if ii != Rorig - 1 or jj != Corig - 1:\n                              impossible = True\n  \n          if impossible:\n              print "Impossible"\n          else:\n              grid[Rorig-1][Corig-1] = 'c'\n  \n              for ii in range(Rorig):\n                  print " ".join([val for val in grid[ii]])\n  \n  \n <CODESPLIT> 22
 \n  f = open(sys.argv[1])\n  T = int(f.readline())\n  for test in range(T):\n      first_row_index = int(f.readline())\n      first_row = []\n      for ii in range(4):\n          if (ii + 1) == first_row_index:\n              first_row = f.readline().strip().split()\n          else:\n              f.readline()\n      second_row_index = int(f.readline())\n      second_row = []\n      for ii in range(4):\n          if (ii + 1) == second_row_index:\n              second_row = f.readline().strip().split()\n          else:\n              f.readline()\n      combined = [val for val in first_row if val in second_row]\n  \n      print "Case #%d:" % (test + 1), "Bad magician!" if len(combined) > 1 else "Volunteer cheated!" if len(combined) == 0 else combined[0]\n  \n  \n <CODESPLIT> 22
"""\n  Google Code Jam 2014 Qualification Problem C\n  Usage:\n      python c.py < input.txt > output.txt\n  """\n  \n  \n  def iter_neighbors(x, y, cells):\n      columns = len(cells[0])\n      rows = len(cells)\n  \n      if y > 0:\n          if x > 0:\n              yield x - 1, y - 1\n          yield x, y - 1\n  \n          if x + 1 < columns:\n              yield x + 1, y - 1\n  \n      if x > 0:\n          yield x - 1, y\n  \n      if x + 1 < columns:\n          yield x + 1, y\n  \n      if y + 1 < rows:\n          if x > 0:\n              yield x - 1, y + 1\n  \n          yield x, y + 1\n  \n          if x + 1 < columns:\n              yield x + 1, y + 1\n  \n  \n  def try_to_click(x, y, cells, remaining):\n      if remaining == 0:\n          return cells\n  \n      recent = []\n  \n      opened = 0\n  \n      for n_x, n_y in iter_neighbors(x, y, cells):\n          if cells[n_y][n_x] == "?":\n              cells[n_y][n_x] = "."\n              opened += 1\n              recent.append((n_x, n_y))\n  \n      if opened == remaining:\n          return cells\n  \n      if opened > remaining:\n          return []\n  \n      for n_x, n_y in recent:\n          solution = try_to_click(n_x, n_y, copy.deepcopy(cells), remaining - opened)\n          if solution:\n              return solution\n  \n      return []\n  \n  \n  def solve_problem(rows, columns, mines):\n  \n      for x in xrange(columns):\n          for y in xrange(rows):\n              cells = [["?" for i in xrange(columns)] for j in xrange(rows)]\n              cells[y][x] = "c"\n              solution = try_to_click(x, y, cells, rows * columns - mines - 1)\n  \n              if solution:\n                  return "\n".join(["".join(row) for row in solution]).replace("?", "*")\n  \n      return "Impossible"\n  \n  \n  if __name__ == "__main__":\n      num_of_cases = int(sys.stdin.readline().strip())\n      for i in xrange(1, num_of_cases + 1):\n  \n          rows, columns, mines = map(int, sys.stdin.readline().strip().split())\n  \n          print "Case #{0}:\n{1}".format(i, solve_problem(rows, columns, mines))\n <CODESPLIT> 23
"""\n  Google Code Jam 2014 Qualification Problem A\n  Usage:\n      python a.py < input.txt > output.txt\n  """\n  \n  \n  def solve_problem(first, first_rows, second, second_rows):\n      intersection = set(first_rows[first - 1]) & set(second_rows[second - 1])\n  \n      if not intersection:\n          return "Volunteer cheated!"\n      elif len(intersection) > 1:\n          return "Bad magician!"\n      else:\n          return intersection.pop()\n  \n  \n  \n  if __name__ == "__main__":\n      num_of_cases = int(sys.stdin.readline().strip())\n  \n      for i in xrange(1, num_of_cases + 1):\n          first_answer = int(sys.stdin.readline().strip())\n          first_arrangement = [map(int, sys.stdin.readline().strip().split()) for x in xrange(4)]\n  \n          second_answer = int(sys.stdin.readline().strip())\n          second_arrangement = [map(int, sys.stdin.readline().strip().split()) for x in xrange(4)]\n  \n          print "Case #{0}: {1}".format(i, solve_problem(first_answer, first_arrangement, second_answer, second_arrangement))\n <CODESPLIT> 23
 if len(sys.argv) == 1:\n      sys.stdin = open("C.in")\n  else:\n      sys.stdin = open(sys.argv[1])\n  \n  def to_ints(s):\n      return map(int, s.split())\n  \n  def get_ints():\n      return to_ints(raw_input())\n  \n  sys.setrecursionlimit(4000)\n  \n  def fill(rows, cols, mines):\n      seen = set()\n      visited = set()\n  \n      def search(numbered, zeros, min_numbered):\n          left = (rows * cols - mines) - len(numbered)\n          if left == 0:\n              raise StopIteration((numbered, zeros))\n          if left < 0:\n              return\n          for n in xrange(min_numbered, len(numbered)):\n              number = numbered[n]\n              if number in zeros:\n                  continue\n              row, col = number\n              neigh = []\n              if row > 0:\n                  if col > 0: neigh.append((row - 1, col - 1))\n                  neigh.append((row - 1, col))\n                  if col < cols - 1: neigh.append((row - 1, col + 1))\n              if col > 0: neigh.append((row, col - 1))\n              if col < cols - 1: neigh.append((row, col + 1))\n              if row < rows - 1:\n                  if col > 0: neigh.append((row + 1, col - 1))\n                  neigh.append((row + 1, col))\n                  if col < cols - 1: neigh.append((row + 1, col + 1))\n              neigh = list(set(neigh) - set(numbered))\n              zeros.add(number)\n              search(numbered + neigh, zeros, n + 1)\n              zeros.remove(number)\n  \n      try:\n          for row in xrange(rows):\n              for col in xrange(cols):\n                  search([(row, col)], set(), 0)\n      except StopIteration, e:\n          numbered, zeros = e.message\n          board = {}\n          for row, col in numbered + list(zeros):\n              board[row, col] = '.'\n          if zeros:\n              board[zeros.pop()] = 'c'\n          else: # case where first click is on a number\n              board[0, 0] = 'c'\n          out = ''\n          for row in xrange(rows):\n              for col in xrange(cols):\n                  out += board.get((row, col), '*')\n              out += '\n'\n          return out.strip()\n      return 'Impossible'\n  \n  n_cases = input()\n  for case in xrange(1, n_cases + 1):\n      rows, cols, mines = get_ints()\n  \n      result = fill(rows, cols, mines)\n  \n      print "Case #%d:" % case\n      print result\n <CODESPLIT> 24
 if len(sys.argv) == 1:\n      sys.stdin = open("A.in")\n  else:\n      sys.stdin = open(sys.argv[1])\n  \n  def to_ints(s):\n      return map(int, s.split())\n  \n  def get_ints():\n      return to_ints(raw_input())\n  \n  n_cases = input()\n  \n  for case in xrange(1, n_cases + 1):\n      a_row, = get_ints()\n      a_layout = [get_ints() for _ in range(4)]\n      b_row, = get_ints()\n      b_layout = [get_ints() for _ in range(4)]\n  \n      poss = set(a_layout[a_row - 1])\n      poss.intersection_update(b_layout[b_row - 1])\n  \n      result = 'Bad magician!'\n  \n      if len(poss) == 0:\n          result = 'Volunteer cheated!'\n      elif len(poss) == 1:\n          result = poss.pop()\n  \n      print "Case #%d: %s" % (case, result)\n <CODESPLIT> 24
 \n  NEIGHBOURS = [\n      (-1, -1), (-1, 0), (-1, 1),\n      ( 0, -1),          ( 0, 1),\n      ( 1, -1), ( 1, 0), ( 1, 1),\n  ]\n  \n  MOVES = [(-1, 0), (1, 0), (0, 1), (0, -1)]\n  \n  def valid(size, location, changes):\n      y, x = location\n      for y1, x1 in changes:\n          y1 += y\n          x1 += x\n          if y1 < 0 or y1 >= size[0]:\n              continue\n          if x1 < 0 or x1 >= size[1]:\n              continue\n          yield (y1, x1)\n  \n  def click(size, grid, location):\n      y, x = location\n      if grid[y][x] is 0:\n          return None\n  \n      grid = [row[:] for row in grid]\n      grid[y][x] = 0\n  \n      for y, x in valid(size, location, NEIGHBOURS):\n          if grid[y][x]:\n              grid[y][x] = False\n  \n      return grid\n  \n  def sweep(R, C, M):\n      grid = [[True] * C for _ in range(R)]\n      size = (R, C)\n  \n      if M + 1 == R * C:\n          grid[0][0] = False\n          return grid, (0, 0)\n  \n      states = []\n      for y in range(R):\n          for x in range(C):\n              location = (y, x)\n              states.append((click(size, grid, location), location))\n  \n      while states:\n          grid, location = states.pop(0)\n  \n          mines_count = sum([sum(row) for row in grid])\n          if mines_count == M:\n              return grid, location\n  \n          if mines_count < M:\n              continue\n  \n          for new_location in valid(size, location, NEIGHBOURS):\n              new_grid = click(size, grid, new_location)\n              if new_grid:\n                  states.insert(0, (new_grid, new_location))\n  \n      return None\n  \n  def validate(size, grid, location):\n  \n      result = [row[:] for row in grid]\n  \n      y, x = location\n      result[y][x] = sum([\n          grid[y1][x1]\n          for y1, x1 in valid(size, (y, x), NEIGHBOURS)\n      ])\n      assert result[y][x] == 0\n  \n      seen = set([location])\n      locations = set([location])\n  \n      while locations:\n          location = locations.pop()\n          for y, x in valid(size, location, NEIGHBOURS):\n              assert grid[y][x] is not True\n              result[y][x] = sum([\n                  grid[y1][x1]\n                  for y1, x1 in valid(size, (y, x), NEIGHBOURS)\n              ])\n              if result[y][x] == 0 and (y, x) not in seen:\n                  locations.add((y, x))\n                  seen.add((y, x))\n  \n      for row in result:\n          for col in row:\n              assert col is not False\n  \n      for y, row in enumerate(result):\n          output = ''\n          for x, col in enumerate(row):\n              if col is True:\n                  output += '*'\n              else:\n                  output += str(col)\n          print output\n  \n  \n  def process(case, R, C, M):\n      result = sweep(R, C, M)\n  \n      print 'Case #%d:' % (case + 1)\n      if not result:\n          print 'Impossible'\n          return\n  \n      grid, location = result\n      for y, row in enumerate(grid):\n          output = ''\n          for x, col in enumerate(row):\n              if (y, x) == location:\n                  output += 'c'\n              elif col:\n                  output += '*'\n              else:\n                  output += '.'\n          print output\n  \n  \n  \n  def main():\n      cases = int(sys.stdin.readline())\n  \n      for case in range(cases):\n          R, C, M = map(int, sys.stdin.readline().split())\n          process(case, R, C, M)\n  \n      return\n      for case in range(100):\n          R = random.randrange(51) + 1\n          C = random.randrange(51) + 1\n          M = random.randrange(R * C - 1) + 1\n          process(case * 100000 + M - 1, R, C, M)\n  \n  \n  if __name__ == '__main__':\n      main()\n <CODESPLIT> 25
 \n  \n  def main():\n      cases = int(sys.stdin.readline())\n  \n      for case in range(cases):\n          row1 = int(sys.stdin.readline())\n          arrangement1 = [\n              map(int, sys.stdin.readline().split())\n              for _ in range(4)\n          ]\n          chosen1 = set(arrangement1[row1 - 1])\n  \n          row2 = int(sys.stdin.readline())\n          arrangement2 = [\n              map(int, sys.stdin.readline().split())\n              for _ in range(4)\n          ]\n          chosen2 = set(arrangement2[row2 - 1])\n  \n          chosen = chosen1 & chosen2\n  \n          if not chosen:\n              print 'Case #%d: Volunteer cheated!' % (case + 1)\n          elif len(chosen) != 1:\n              print 'Case #%d: Bad magician!' % (case + 1)\n          else:\n              print 'Case #%d: %d' % (case + 1, chosen.pop())\n  \n  if __name__ == '__main__':\n      main()\n <CODESPLIT> 25
 \n  T = int(raw_input())\n  \n  def generate(R, C, a, sw):\n      if sw:\n          R, C = C, R\n      res = [['*']*C for i in xrange(R)]\n      for i in xrange(len(a)):\n          for j in xrange(a[i]):\n              if sw:\n                  res[j][i] = '.'\n              else:\n                  res[i][j] = '.'\n      res[0][0] = 'c'\n      return str(res)[2:-2].replace(' ', '').replace("'",'').replace('[', '').replace('],','\n').replace(',', '')\n  \n  \n  def solveEq(k, s, x1):\n      if 2*(x1 + k - 2) > s or k*x1 < s:\n          return None\n      r = [0]*k\n      r[0] = r[1] = x1\n      s -= 2*x1\n      for i in xrange(k-2, 0, -1):\n          t = min(x1, s - 2*i + 2)\n          r[k-i] = t\n          s -= t\n      return r\n  \n  def solve(R, C, M):\n      S = R*C\n      nm = S - M\n      if R == 1 or C == 1:\n          if R == 1:\n              return '*'*M + '.'*(S-M-1) + 'c'\n          else:\n              return '*\n'*M + '.\n'*(S-M-1) + 'c'\n      else:\n          sw = False\n          if R > C:\n              R, C = C, R\n              sw = True\n          if nm == 2 or nm == 3 or nm == 5 or nm == 7 or (R == 2 and nm%2 == 1 and nm > 1):\n              return "Impossible"\n          if nm == 1:\n              return generate(R, C, [1], sw)\n          for k in xrange(2, R+1):\n              for x1 in xrange(2, C+1):\n                  r = solveEq(k, nm, x1)\n                  if r != None:\n                      return generate(R, C, r, sw)\n          return "Something wrong"\n  \n  for z in xrange(T):\n      c, f, x = map(int, raw_input().split())\n      print "Case #%d:\n%s" % (z+1, solve(c, f, x))\n <CODESPLIT> 26
T = int(raw_input())\n  \n  def readSq(n):\n      res = []\n      for i in xrange(n):\n          res.append(set(map(int, raw_input().split())))\n      return res\n  \n  def solve():\n      a1 = int(raw_input())\n      s1 = readSq(4)\n      a2 = int(raw_input())\n      s2 = readSq(4)\n      ans = s1[a1-1] & s2[a2-1]\n      if len(ans) == 0:\n          return "Volunteer cheated!"\n      if len(ans) > 1:\n          return "Bad magician!"\n      return str(list(ans)[0])\n  \n  for z in xrange(T):\n      print "Case #%d: %s" % (z+1, solve())\n <CODESPLIT> 26
 \n  T = int(input())\n  \n  for n in range(1, T+1):\n      print("Case #%d:" % n)\n      (R, C, M) = (int(x) for x in input().split())\n      dots = R*C - M\n      if M == 0:\n          print("\n".join(["c"+(C-1)*"."] + (R-1)*[C*"."]))\n      elif dots == 0:\n          print("Impossible")\n      elif R == 1:\n          assert C - M > 0\n          print("c"+(C-M-1)*"."+M*"*")\n      elif C == 1:\n          assert R - M > 0\n          print("c\n"+(R-M-1)*".\n"+M*"*\n", end='')\n      elif dots == 1:\n          print("\n".join(["c"+ (C-1)*"*"] + (R-1)*[C*"*"]))\n      elif dots > 3:\n          if (dots == 5) or (dots == 7):\n              print("Impossible")\n              continue\n          if (R == 2) or (C == 2):\n              if dots%2 != 0 :\n                  print("Impossible")\n                  continue\n              elif R == 2:\n                  l = int(dots/2)\n                  print("c"+(l-1)*"."+(C-l)*"*")\n                  print(l*"."+(C-l)*"*")\n                  continue\n              elif C == 2:\n                  l = int(dots/2)\n                  print("c.")\n                  print((l-1)*"..\n", end='')\n                  print(int(M/2)*"**\n", end='')\n                  continue\n          (lines, extra) = divmod(dots, C)\n          temp = []\n          if (lines >= 2) and (extra != 1):\n              temp.append("c"+(C-1)*".")\n              temp.extend((lines-1)*[C*"."])\n              temp.append(extra*"."+(C-extra)*"*")\n              temp.extend((R-lines-1)*[C*"*"])\n              print("\n".join(temp))\n              continue\n          elif (lines > 2) and (extra == 1):\n              temp.append("c"+(C-1)*".")\n              temp.extend((lines-2)*[C*"."])\n              temp.append((C-1)*"."+"*")\n              temp.append(".."+ (C-2)*"*")\n              temp.extend((R-lines-1)*[C*"*"])\n              print("\n".join(temp))\n              continue\n          elif (lines == 2) and (extra == 1):\n              temp.append("c"+(C-2)*"."+"*")\n              temp.append((C-1)*"."+"*")\n              temp.append(3*"."+(C-3)*"*")\n              temp.extend((R-3)*[C*"*"])\n              print("\n".join(temp))\n              continue\n          elif lines < 2:\n              (l, rem) = divmod(dots, 2)\n              if rem == 1:\n                  l -= 1\n                  rem += 2\n              temp.append("c"+(l-1)*"."+(C-l)*"*")\n              temp.append(l*"."+(C-l)*"*")\n              temp.append(rem*"."+(C-rem)*"*")\n              temp.extend( (R-3)*[ C*"*" ])\n              print("\n".join(temp))\n              continue\n      else:\n          print("Impossible")\n  \n <CODESPLIT> 27
 ncases = int(input())\n  \n  for n in range(1, ncases+1):\n      row = int(input())\n      for m in range(1, 5):\n          if m == row:\n              r1list = [int(x) for x in input().split()]\n              assert len(r1list) == 4\n          else:\n              tmp = input()\n      row = int(input())\n      for m in range(1,5):\n          if m == row:\n              r2list = [int(x) for x in input().split()]\n              assert len(r1list) == 4\n          else:\n              tmp = input()\n      nset = set(r1list) & set(r2list)\n      if len(nset) == 1:\n          print("Case #%d:" % n, nset.pop())\n      elif len(nset) > 1:\n          print("Case #%d:" % n, "Bad magician!")\n      else:\n          print("Case #%d:" % n, "Volunteer cheated!")\n <CODESPLIT> 27
 \n  \n  IMPOSSIBLE = []\n  \n  def transpose(grid):\n      return map(list, zip(*grid))\n  \n  def find_grid(R, C, M):\n      """Return a grid of a solution, if one exists, otherwise []\n  \n      Observations:\n      * WLOG, C <= R (otherwise, take the transpose of a solution)\n      * Trivial cases are:\n        - M = 0 or  M = RC - 1\n        - C = 1\n        - (R, C) = (2, 2)\n        - (R, C, M) = (3, 3, 2)\n        - (C, M) = (2, 1)\n      * If M >= C >= 2 and R >= 3, we can add a row of C mines to the bottom and consider M'=M-C, R'=R-1\n      * The remaining cases are M <= R-2, and M + 1 == R == C >= 4, which are both solvable\n      """\n      if M == 0:\n          grid = [['.' for c in xrange(C)] for r in xrange(R)]\n          grid[0][0] = 'c'\n          return grid\n      elif M == R * C - 1:\n          grid = [['*' for c in xrange(C)] for r in xrange(R)]\n          grid[0][0] = 'c'\n          return grid\n      elif C > R:\n          return transpose(find_grid(C, R, M))\n      elif C == 1:\n          return [['c']] + [['.'] for i in xrange(R-M-1)] + [['*'] for i in xrange(M)]\n      elif (R, C) == (2, 2) or (R, C, M) == (3, 3, 2) or (C, M) == (2, 1):\n          return IMPOSSIBLE\n  \n      assert 2 <= C <= R >= 3, "R={} C={} M={}".format(R, C, M)\n  \n      if M >= C:\n          s = find_grid(R-1, C, M-C)\n          return s and s + [['*' for c in xrange(C)]]\n      elif M <= R-2 and C >= 3:\n          grid = [['.' for c in xrange(C)] for r in xrange(R)]\n          grid[0][0] = 'c'\n          for i in xrange(M):\n              grid[R-i-1][C-1] = '*'\n          return grid\n      elif M + 1 == R == C >= 4:\n          grid = [['.' for c in xrange(C)] for r in xrange(R)]\n          grid[0][0] = 'c'\n          grid[R-1][C-2] = '*'\n          for i in xrange(M-1):\n              grid[R-i-1][C-1] = '*'\n          return grid\n  \n      assert False, "R={} C={} M={}".format(R, C, M)\n  \n  def check_soln(grid, R, C, M):\n      """checking, because debugging..."""\n      error = "R={} C={} M={}".format(R, C, M)\n      assert sum(row.count('*') for row in grid) == M, error\n      assert sum(row.count('c') for row in grid) == 1, error\n      assert len(grid) == R, error\n      assert all(len(row) == C for row in grid), error\n      _ = [i for i, row in enumerate(grid) if 'c' in row][0]\n      click = (_, [i for i, c in enumerate(grid[_]) if c == 'c'][0])\n  \n      def neighbours(r, c):\n          ns = [(i, j) for i in range(max(r-1,0),min(r+2,R)) for j in range(max(c-1,0),min(c+2,C))]\n          ns.remove((r, c))\n          return ns\n  \n      cpy = map(list, grid)\n      def fill(cpy, pos):\n          cpy[pos[0]][pos[1]] = str(sum(1 for i, j in neighbours(*pos) if grid[i][j] == '*'))\n          if cpy[pos[0]][pos[1]] == '0':\n              for i, j in neighbours(*pos):\n                  if cpy[i][j] == '.':\n                      fill(cpy, (i, j))\n      fill(cpy, click)\n      assert sum(row.count('.') for row in cpy) == 0, error\n  \n  def solve(R, C, M):\n      soln = find_grid(R, C, M)\n      if soln == IMPOSSIBLE:\n          return "Impossible"\n      else:\n          check_soln(soln, R, C, M)\n          return '\n'.join(''.join(row) for row in soln)\n  \n  if __name__ == '__main__':\n      fin = open(sys.argv[1], 'rU') if sys.argv[1:] else sys.stdin\n      fout = open(sys.argv[2], 'w') if sys.argv[2:] else sys.stdout\n      with fin, fout:\n          T = int(fin.readline())\n          for case in xrange(1, T+1):\n              r, c, m = map(int, fin.readline().split())\n              soln = solve(r, c, m)\n              print >> fout, "Case #{0}:\n{1}".format(case, soln)\n  \n <CODESPLIT> 28
 \n  \n  def read_row(fin, n):\n      rows = [set(map(int, fin.readline().strip().split())) for i in xrange(4)]\n      return rows[n-1]\n  \n  def solve(rowa, rowb):\n      both = rowa & rowb\n      if len(both) == 1:\n          return list(both)[0]\n      elif len(both) > 1:\n          return "Bad magician!"\n      elif not both:\n          return "Volunteer cheated!"\n  \n  if __name__ == '__main__':\n      fin = open(sys.argv[1], 'rU') if sys.argv[1:] else sys.stdin\n      fout = open(sys.argv[2], 'w') if sys.argv[2:] else sys.stdout\n      with fin, fout:\n          T = int(fin.readline())\n          for case in xrange(1, T+1):\n              n = int(fin.readline())\n              rowa = read_row(fin, n)\n              n = int(fin.readline())\n              rowb = read_row(fin, n)\n              soln = solve(rowa, rowb)\n              print >> fout, "Case #{0}: {1}".format(case, soln)\n  \n <CODESPLIT> 28
 \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n   \n  \n  \n  \n  \n  def debug(*args):\n      print(*args, file=sys.stderr)\n  \n  fin = sys.stdin\n  T = int(fin.readline())\n  for case in range(1, T + 1):\n      RR, CC, M = map(int, fin.readline().split())\n      R, C = None, None\n      blocks = RR*CC - M\n      inverse = False\n      if RR > CC:\n          inverse = True\n          R, C = CC, RR\n      else:\n          R, C = RR, CC\n      result = None\n      if R == 1:\n          result = [('.' * blocks) + ('*' * M)]\n      elif R == 2:\n          if blocks == 1:\n              result = ['.' + ('*' * (C-1)), '*' * C]\n          elif blocks % 2 == 0 and blocks != 2:\n              cc = blocks // 2\n              result = [('.' * cc) + ('*' * (C - cc)), ('.' * cc) + ('*' * (C - cc))] \n          else:\n              result = None\n      else:\n          if blocks == 1:\n              result = ['*' * C] * R\n          elif blocks == 4:\n              result = ['..' + (C-2)*'*']*2\n              result += ['*'*C] * (R-2)\n          elif blocks == 6:\n              result = ['...' + (C-3)*'*']*2\n              result += ['*'*C] * (R-2)\n          for rows in range(3, R+1):\n              for columns in range(rows, C+1):\n                  size = rows * columns\n                  if size - blocks >= 0:\n                      if size - blocks <= columns - 2: \n                          result = []\n                          for r in range(rows):\n                              if r < rows - 1:\n                                  result.append(('.' * columns) + ('*' * (C - columns)))\n                              else:\n                                  cc = columns - (size - blocks)\n                                  result.append(('.' * cc) + ('*' * (C - cc)))\n                          for r in range(R - rows):\n                              result.append('*' * C)\n                      elif size - blocks == columns - 1 and rows >= 4:\n                          result = []\n                          for r in range(rows):\n                              if r < rows - 2:\n                                  result.append(('.' * columns) + ('*' * (C - columns)))\n                              elif r == rows - 2:\n                                  cc = columns - 1\n                                  result.append(('.' * cc) + ('*' * (C - cc)))\n                              else:\n                                  cc = 2\n                                  result.append(('.' * cc) + ('*' * (C - cc)))\n                          for r in range(R - rows):\n                              result.append('*' * C)\n                      \n  \n  \n  \n      print("Case #%d: " % (case))\n      if result is None:\n          debug('impossible', blocks, RR, CC)\n          print("Impossible")\n      else:\n          mines = 0\n          for r in range(RR):\n              row = ''\n              for c in range(CC):\n                  rr, cc = r, c\n                  if inverse:\n                      rr, cc = c, r\n                  if rr == 0 and cc == 0:\n                      row += 'c'\n                  else:\n                      row += result[rr][cc]\n                      if result[rr][cc] == '*':\n                          mines += 1\n              print(row)\n          if mines != M:\n              raise Exception("%d != %d %d x %d" % (mines, M, RR, CC))\n              \n  \n  \n <CODESPLIT> 29
 \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  def debug(*args):\n      print(*args, file=sys.stderr)\n  \n  fin = sys.stdin\n  T = int(fin.readline())\n  for case in range(1, T + 1):\n      answer1 = int(fin.readline())\n      rows1 = []\n      for i in range(4):\n          rows1.append(set(map(int, fin.readline().split())))\n      answer2 = int(fin.readline())\n      rows2 = []\n      for i in range(4):\n          rows2.append(set(map(int, fin.readline().split())))\n  \n      possibilities1 = rows1[answer1-1]\n      possibilities2 = rows2[answer2-1]\n  \n      numbers = possibilities1.intersection(possibilities2)\n      result = None\n      if len(numbers) == 1:\n          result = list(numbers)[0]\n      elif len(numbers) == 0:\n          result = 'Volunteer cheated!'\n      else:\n          result = 'Bad magician!'\n  \n  \n      print("Case #%d: %s" % (case, result))\n  \n <CODESPLIT> 29
 \n  def generate_matrix(r, c, char):\n  	mat = [[char for i in range(c)] for j in range(r)]\n  	return mat\n  	\n  def merge(mat1, mat2):\n  	for i in range(len(mat1)):\n  		for j in range(len(mat1[i])):\n  			mat2[i][j] = mat1[i][j]\n  	return mat2\n  \n  def solve(r, c, m):\n  	if 0 == m:\n  		mat = generate_matrix(r, c, '.')\n  		mat[0][0] = 'c'\n  		return mat\n  		\n  	f = r * c - m\n  	\n  	if 0 == f:\n  		return False\n  		\n  	if 1 == f:\n  		mat = generate_matrix(r, c, '*')\n  		mat[0][0] = 'c'\n  		return mat\n  		\n  	if 1 == min(r, c):\n  		mat = generate_matrix(r, c, '*')\n  		for i in range(f):\n  			mat[0 if 1 == r else i][0 if 1 == c else i] = '.'\n  		mat[0][0] = 'c'\n  		return mat\n  \n  	if 2 == min(r, c):\n  		if (0 != f % 2) or (2 == f):\n  			return False\n  		mat = generate_matrix(r, c, '*')\n  		for i in range(f // 2):\n  			mat[0 if 2 == r else i][0 if 2 == c else i] = '.'\n  			mat[1 if 2 == r else i][1 if 2 == c else i] = '.'\n  		mat[0][0] = 'c'\n  		return mat\n  		\n  	if (3 == r) and (3 == c):\n  		if (4 == f) or (6 == f):\n  			mat = generate_matrix(r, c, '*')\n  			for i in range(f // 2):\n  				mat[0][i] = '.'\n  				mat[1][i] = '.'\n  			mat[0][0] = 'c'\n  			return mat\n  		if 8 == f:\n  			mat = generate_matrix(r, c, '.')\n  			mat[2][2] = '*'\n  			mat[0][0] = 'c'\n  			return mat\n  		return False\n  		\n  	rows_to_reduce = min(r - 3, m // c)\n  	if 0 < rows_to_reduce:\n  		res = solve(r - rows_to_reduce, c, m - rows_to_reduce * c)\n  		if False == res:\n  			return False\n  		mat = merge(res, generate_matrix(r, c, '*'))\n  		return mat\n  		\n  	cols_to_reduce = min(c - 3, m // r)\n  	if 0 < cols_to_reduce:\n  		res = solve(r, c - cols_to_reduce, m - cols_to_reduce * r)\n  		if False == res:\n  			return False\n  		mat = merge(res, generate_matrix(r, c, '*'))\n  		return mat\n  	\n  	mat = generate_matrix(r, c, '.')\n  	for i in range(min(m, r - 2)):\n  		mat[r - i - 1][c - 1] = '*'\n  	if m == r - 1:\n  		mat[r - 1][c - 2] = '*'\n  	mat[0][0] = 'c'\n  	return mat\n  			\n  \n  t = int(sys.stdin.readline().strip())\n  \n  for i in range(t):\n  	print "Case #" + str(i + 1) + ":"\n  \n  	r, c, m = [int(i) for i in sys.stdin.readline().strip().split()]\n  	\n  	res = solve(r, c, m)\n  	\n  	if False == res:\n  		print "Impossible"\n  	else:\n  		for i in range(r):\n  			for j in range(c):\n  				sys.stdout.write(res[i][j])\n  			print\n <CODESPLIT> 30
 \n  def read_row():\n  	a = int(sys.stdin.readline().strip())\n  	for j in range(a - 1):\n  		sys.stdin.readline()\n  	read_set = set(sys.stdin.readline().strip().split(" "))\n  	for j in range(5 - a - 1):\n  		sys.stdin.readline()\n  		\n  	return read_set\n  \n  \n  t = int(sys.stdin.readline().strip())\n  \n  for i in range(t):\n  	print "Case #" + str(i + 1) + ":",\n  \n  	set1 = read_row()\n  	set2 = read_row()\n  	\n  	intersect = set1.intersection(set2)\n  	\n  	if 1 == len(intersect):\n  		print intersect.pop()\n  	elif 0 == len(intersect):\n  		print "Volunteer cheated!"\n  	else:\n  		print "Bad magician!"\n <CODESPLIT> 30
directory = 'C:/users/me/desktop/google code jam/2014/qualification/C/'\n  \n  \n  \n  def solve_one_case (R,C,M):\n          l = []\n          for i in range(R):\n              for j in range(C):\n                  l.append((i,j))\n  \n          empty_mat = []\n          for i in range(R):\n              empty_mat.append(['.']*C)\n  \n          found = False\n  \n          assert (0,0) in l\n          l = l[1:]\n          l = l[::-1]\n          assert (0,0) not in l\n          \n          output = ''\n          \n          for mine_placement in itertools.combinations(l,M):\n              mat = deepcopy(empty_mat)\n              for cell in mine_placement:\n                  mat[cell[0]][cell[1]] = '*'\n              if isOneClick(mat, R, C, M):\n                  mat[0][0] = 'c'\n                  for line in mat:\n                      output += ''.join(line) + '\n'\n                  found = True\n                  return output\n              \n          if not found:\n              return 'Impossible\n'\n          \n          assert ValueError()\n          \n  def solve (f_in, f_out):\n      T = int(f_in.readline())\n      for testcase in range(1,T+1):\n          line = f_in.readline()\n          R,C,M = [int(q) for q in line.split()]\n          print (testcase,R,C,M)\n  \n          output = solve_one_case (R,C,M)\n          f_out.write('Case #' + str(testcase) + ':\n')\n          f_out.write(output)\n  \n          \n  \n  \n  def isOneClick (mat, R, C, M):\n  \n      mat_cpy = deepcopy(mat)\n      oneclickcells = [(0,0)]\n      while oneclickcells:\n          node = oneclickcells.pop()\n          mat_cpy[node[0]][node[1]] = 'v'\n          if noNearbyMines(mat_cpy,node):\n              oneclickcells.extend(getNearbyUnvisited(mat_cpy, node))\n  \n      return sum([l.count('.') for l in mat_cpy]) == 0\n      \n  \n  def getNearbyUnvisited(mat, node):\n      R = len(mat)\n      C = len(mat[0])\n      deltas_r = [0]\n      deltas_c = [0]\n      if node[0] > 0:\n          deltas_r.append(-1)\n      if node[1] > 0:\n          deltas_c.append(-1)\n      if node[0] < R-1:\n          deltas_r.append(1)\n      if node[1] < C-1:\n          deltas_c.append(1)\n  \n      ret_list = []\n      for delta_r in deltas_r:\n          for delta_c in deltas_c:\n              next_node = (node[0]+delta_r, node[1] + delta_c)\n              if mat[next_node[0]][next_node[1]] not in ['*','v']:\n                  ret_list.append((next_node[0],next_node[1]))\n  \n      return ret_list\n  \n  def noNearbyMines(mat,node):\n      R = len(mat)\n      C = len(mat[0])\n      deltas_r = [0]\n      deltas_c = [0]\n      if node[0] > 0:\n          deltas_r.append(-1)\n      if node[1] > 0:\n          deltas_c.append(-1)\n      if node[0] < R-1:\n          deltas_r.append(1)\n      if node[1] < C-1:\n          deltas_c.append(1)\n  \n      for delta_r in deltas_r:\n          for delta_c in deltas_c:\n              if mat[node[0] + delta_r][node[1] + delta_c] == '*':\n                  return False\n      return True\n      \n  def main_run():\n      filenames = [x for x in os.listdir (directory)]\n      filenames = [x for x in filenames if x.endswith('.in')]\n      l1 = [(os.stat(directory+x).st_mtime, x) for x in filenames]\n      chosen_filename =  sorted(l1)[-1][1][:-3]\n  \n      print ('Directory : ', directory)\n      print ('Chosen Filename : ',chosen_filename)\n      print()\n      print ('Start : ', time.ctime())\n      print()\n      \n      f_in = open(directory+chosen_filename+'.in')\n      f_out = open(directory+chosen_filename+'.out', 'w')\n      solve(f_in,f_out)\n      f_in.close()\n      f_out.close()\n  \n      print ()\n      print ('End : ', time.ctime())\n  \n  \n  main_run()\n  \n <CODESPLIT> 31
directory = 'C:/users/me/desktop/google code jam/2014/qualification/A/'\n  \n  \n  \n  def solve (f_in, f_out):\n      T = int(f_in.readline())\n      for testcase in range(1,T+1):\n          \n          c1 = int(f_in.readline())\n          l1 = []\n          for i in range(4):\n              l1.append(f_in.readline())\n          \n          c2 = int(f_in.readline())\n          l2 = []\n          for i in range(4):\n              l2.append(f_in.readline())\n  \n          d1 = l1[c1-1].split()\n          d2 = l2[c2-1].split()\n  \n          foundFlag = False\n          chosenCard = None\n          badMagician = False\n          for card in d1:\n              if card in d2:\n                  if not foundFlag:\n                      foundFlag = True\n                      chosenCard = card\n                  else:\n                      badMagician = True\n  \n          f_out.write('Case #' + str(testcase) + ': ')\n          if badMagician:\n              f_out.write('Bad magician!\n')\n          elif not foundFlag:\n              f_out.write('Volunteer cheated!\n')\n          else:\n              f_out.write(chosenCard + '\n')\n  \n  \n  \n  \n  def main_run():\n      filenames = [x for x in os.listdir (directory)]\n      filenames = [x for x in filenames if x.endswith('.in')]\n      l1 = [(os.stat(directory+x).st_mtime, x) for x in filenames]\n      chosen_filename =  sorted(l1)[-1][1][:-3]\n  \n      print ('Directory : ', directory)\n      print ('Chosen Filename : ',chosen_filename)\n      print()\n      print ('Start : ', time.ctime())\n      print()\n      \n      f_in = open(directory+chosen_filename+'.in')\n      f_out = open(directory+chosen_filename+'.out', 'w')\n      solve(f_in,f_out)\n      f_in.close()\n      f_out.close()\n  \n      print ()\n      print ('End : ', time.ctime())\n  \n  \n  main_run()\n <CODESPLIT> 31
 \n  \n  FREE = '.'\n  BOMB = '*'\n  CLICK = 'c'\n  \n  \n  class Board:\n  \n  	def __init__(self, R, C, M):\n  		self.initial_M = M\n  		self.R = R\n  		self.C = C\n  		self.M = M\n  		self.matrix = [[FREE for c in range(C)] for r in range(R)]\n  		self.endx = len(self.matrix[0])\n  		self.endy = len(self.matrix)  # 0 < R * C\n  		self.startx = 0\n  		self.starty = 0\n  \n  	def fill_row(self, row):\n  		for c in self.range_active_cols:\n  			self.matrix[row][c] = BOMB\n  		self.starty += 1\n  		self.M -= self.active_cols\n  \n  	def fill_col(self, col):\n  		for r in self.range_active_rows:\n  			self.matrix[r][col] = BOMB\n  		self.startx += 1\n  		self.M -= self.active_rows\n  \n  	def pprint(self):\n  		for row in self.matrix:\n  			for cell in row:\n  				print(cell, end='')\n  			print()\n  \n  	@property\n  	def active_rows(self):\n  		return self.endy - self.starty\n  \n  	@property\n  	def active_cols(self):\n  		return self.endx - self.startx\n  \n  	def optimize(self):\n  		while 1:\n  			if (self.active_cols <= self.active_rows\n  					and self.active_cols <= self.M):\n  				self.fill_row(self.starty)\n  			elif (self.active_rows < self.active_cols\n  					and self.active_rows <= self.M):\n  				self.fill_col(self.startx)\n  			else:\n  				break\n  \n  	@property\n  	def range_active_cols(self):\n  		return range(self.startx, self.endx)\n  \n  	@property\n  	def range_active_rows(self):\n  		return range(self.starty, self.endy)\n  \n  	def is_free(self, row, col):\n  		return self.matrix[row][col] == FREE\n  \n  	def place_bomb(self):\n  		for row in self.range_active_rows:\n  			for col in self.range_active_cols:\n  				if (self.is_free(row, col) \n  						and row + 2 < self.R\n  						and col + 2 < self.C):\n  					self.matrix[row][col] = BOMB\n  					self.M -= 1 \n  					return True\n  		for col in self.range_active_cols:\n  			for row in self.range_active_rows:\n  				if (self.is_free(row, col)\n  						and row + 2 < self.R\n  						and col + 2 < self.C):\n  					self.matrix[row][col] = BOMB\n  					self.M -= 1\n  					return True\n  		return False\n  \n  	def mark_click(self):\n  		self.matrix[-1][-1] = 'c'\n  \n  	def win_condition(self):\n  		click_row = len(self.matrix) - 1\n  		click_col = len(self.matrix[0]) - 1\n  		if (click_col - 1 >= 0\n  				and not self.is_free(click_row, click_col - 1)):\n  			return False\n  \n  		if (click_row - 1 >= 0\n  				and not self.is_free(click_row - 1, click_col)):\n  			return False\n  \n  		if (click_row -1 >= 0\n  				and click_col -1 >= 0\n  				and not self.is_free(click_row - 1, click_col - 1)):\n  			return False\n  		\n  		return True\n  \n  	def win_cond2(self):\n  		if self.initial_M + 1 == self.C * self.R:\n  			return True\n  		return False\n  \n  	def solve(self):\n  		self.optimize()\n  		while self.M > 0 and self.place_bomb():\n  			pass\n  		if self.M == 0 and (self.win_condition() or self.win_cond2()):\n  			self.mark_click()\n  			self.pprint()\n  		else:\n  			print('Impossible')\n  \n  \n  def read_case(f):\n  	return map(int, f.readline().split())\n  \n  \n  def main():\n  	fn = sys.argv[1]\n  	with open(fn, encoding='utf-8') as f:\n  		ncases = int(f.readline())\n  		for case in range(1, ncases + 1):\n  			R, C, M = read_case(f)\n  			print('Case #{}:'.format(case))\n  			b = Board(R, C, M)\n  			b.solve()\n  \n  \n  def main1():\n  	b = Board(2, 1, 1)\n  	b.solve()\n  \n  \n  if __name__ == '__main__':\n  	main()\n <CODESPLIT> 32
 \n  \n  \n  def read_grid(f):\n  	return [\n  		[int(x) for x in line.split()]\n  		for line in [f.readline() for _ in range(4)]\n  	]\n  \n  def read_case(f):\n  	answer1 = int(f.readline())\n  	grid1 = read_grid(f)\n  	answer2 = int(f.readline())\n  	grid2 = read_grid(f)\n  	return (grid1[answer1 - 1], grid2[answer2 - 1])\n  \n  \n  def solve(r1, r2):\n  	res = set(r1) & set(r2)\n  	if len(res) == 0:\n  		return 'Volunteer cheated!'\n  	if len(res) == 1:\n  		return list(res)[0]\n  	return 'Bad magician!'\n  \n  \n  \n  def main():\n  	fn = sys.argv[1]\n  	with open(fn, encoding='utf-8') as f:\n  		ncases = int(f.readline())\n  		for case in range(1, ncases + 1):\n  			row1, row2 = read_case(f)\n  			solution = solve(row1, row2)\n  			print('Case #{}: {}'.format(case, solution))\n  \n  \n  if __name__ == '__main__':\n  	main()\n <CODESPLIT> 32
 \n  lines = [line.strip() for line in open(sys.argv[1])]\n  count = int(lines[0])\n  \n  for i in xrange(count):\n      R,C,M = map(int, lines[i+1].split())\n      print "Case #%s:" % (i+1)\n  \n      w = max(R,C)\n      h = min(R,C)\n      X = R*C - M\n      assert X > 0\n  \n      if X == 1:\n          rows = ['c' + ('*' * (w-1))] + (h-1) * ['*' * w]\n      elif h == 1:\n          rows = ['c' + '.' * (X-1) + '*' * M]\n      elif X == 4:\n              rows = [\n                  'c.' + '*' * (w-2),\n                  '..' + '*' * (w-2),\n              ] + ['*' * w] * (h-2)\n      elif h == 2:\n          if X%2 == 1 or X == 2:\n              rows = None\n          else:\n              rows = [\n                  'c' + '.' * (X/2-1) + '*' * (M/2),\n                  '.' + '.' * (X/2-1) + '*' * (M/2)\n              ]\n      elif X <= 5 or X == 7:\n          rows = None\n  \n      elif X%2 == 0 and X <= w*2:\n          r = X/2\n          rows = [\n              'c' + '.' * (r - 1) + '*' * (w-r),\n                    '.' * r       + '*' * (w-r),\n          ] + ['*' * w] * (h-2)\n  \n      elif X <= w*3 and (X % 3) != 1:\n          n = (X+1) / 3\n          t = X - 2*n\n          rows = [\n              'c' + '.' * (n-1) + '*' * (w-n),\n                    '.' * n     + '*' * (w-n),\n                    '.' * t     + '*' * (w-t)\n          ] + ['*' * w] * (h-3)\n      else:\n          n = X / w\n          t = X % w\n          if t == 1:\n              rows = (\n                      ['c' + (w-1) * '.']\n                  +   ['.' * w] * (n-2)\n                  +   ['.' * (w-1) + '*']\n                  +   ['..' + '*' * (w-2)]\n                  +   ['*' * w] * (h - n - 1)\n              )\n          else:\n              k = 1 if t == 0 else 0\n              rows = (\n                      ['c' + (w-1) * '.']\n                  +   ['.' * w] * (n-1)\n                  +   ['.' * t + '*' * (w-t)] * (1 - k)\n                  +   ['*' * w] * (h - n - 1 + k)\n              )\n  \n      if rows:\n          if R > C:\n              rows = ["".join(row[i] for row in rows) for i in xrange(R)]\n  \n          for row in rows:\n              print row\n  \n          assert len(rows) == R\n          assert len(rows[0]) == C\n          assert sum(1 for row in rows for col in row if col == '*') == M\n  \n      else:\n          print "Impossible"\n  \n <CODESPLIT> 33
 \n  \n  lines = [map(int, line.strip().split(" ")) for line in open(sys.argv[1]).readlines()]\n  [count] = lines[0]\n  assert count * 10 + 1 == len(lines)\n  \n  for i in xrange(count):\n      base = i*10\n      [n1] = lines[base+1]\n      [n2] = lines[base+6]\n      row1 = set(lines[base+1+n1])\n      row2 = set(lines[base+6+n2])\n      common = row1.intersection(row2)\n      print "Case #%s:" % (i+1),\n      if len(common) == 1:\n          print list(common)[0]\n      elif not common:\n          print "Volunteer cheated!"\n      else:\n          print "Bad magician!"\n <CODESPLIT> 33
 \n  \n  \n  \n  INPUT = "tiny"\n  INPUT = "C-small-attempt1.in"\n  \n  def debug(*args):\n      sys.stderr.write(str(args) + "\n")\n  \n  class Memoize:\n      def __init__(self,function):\n          self._cache = {}\n          self._callable = function\n              \n      def __call__(self, *args, **kwds):\n          cache = self._cache\n          key = self._getKey(*args,**kwds)\n          try: return cache[key]\n          except KeyError:\n              cachedValue = cache[key] = self._callable(*args,**kwds)\n              return cachedValue\n      \n      def _getKey(self,*args,**kwds):\n          return kwds and (args, ImmutableDict(kwds)) or args    \n  \n  IMPOSSIBLE = set([(2,2,2), (2,2,1), (2,3,1), (2,4,1), (2,5,1)])\n  \n  for i in range(2,51):\n      IMPOSSIBLE.add((2,i,1))\n      IMPOSSIBLE.add((i,2,1))\n  \n  SOLN = {\n      (1,2,1) : ["c*"],\n      (2,1,1) : ["c", "*"],\n      (2,2,3) : ["c*", "**"],\n  }\n  \n  def solve(R, C, M):\n      if M == 0:\n          s = ["c%s" % ('.' * (C-1))]\n          for i in range(R-1):\n              s.append('.' * C)\n          return s\n      t = (R, C, M)\n      if t in IMPOSSIBLE:\n          debug("** %s %s %s" % t)\n          raise ValueError\n      if t in SOLN:\n          return SOLN[t]\n  \n      if C < M and R > 2:\n          try:\n              return solve(R-1, C, M-C) + ["*" * C]\n          except ValueError:\n              pass\n  \n      if C <= R:\n          if M >= C and R > 2:\n              return solve(R-1, C, M-C) + ["*" * C]\n      else:\n          if M >= R and C > 2:\n              return ["%s*" % s for s in solve(R, C-1, M-R)]\n      if R > 2:\n          mines = min(C, M)\n          if mines == C - 1:\n              mines -= 1\n          try:\n              return solve(R-1, C, M-mines) + [("." * (C - mines)) + ("*" * mines)]\n          except ValueError:\n              if C > 2:\n                  mines = min(R, M)\n              if mines == R - 1:\n                  mines -= 1\n              s = ["%s%s" % (s, '*' if k > C-mines else '.') for k, s in enumerate(solve(R, C-1, M-mines))]\n              return s\n      debug(R, C, M)\n      return []\n  \n  def do_trial(R, C, M):\n      try:\n          r = solve(R,C,M)\n          s = "\n" + '\n'.join(r)\n          assert len(r) == R\n          for r1 in r:\n              assert len(r1) == C\n          assert len(''.join(k for k in s if k == '*')) == M\n          return s\n      except ValueError:\n          return "\nImpossible"\n  \n  \n  def all():\n      for R in range(1,50):\n          for C in range(1,50):\n              for M in range(R*C):\n                  print(R, C, M)\n                  print(do_trial(R, C, M))\n      sys.exit(0)\n  \n  \n  f = file(INPUT)\n  T = int(f.readline()[:-1])\n  for i in range(T):\n      R, C, M = [int(x) for x in f.readline().split()]\n      v = do_trial(R, C, M)\n      print "Case #%d: %s" % (i+1, v)\n <CODESPLIT> 34
 \n  \n  \n  INPUT = "tiny"\n  if 1:\n      INPUT = "A-large.in"\n      INPUT = "A-small-attempt0.in"\n  \n  def debug(*args):\n      return\n      sys.stderr.write(str(args) + "\n")\n  \n  class Memoize:\n      def __init__(self,function):\n          self._cache = {}\n          self._callable = function\n              \n      def __call__(self, *args, **kwds):\n          cache = self._cache\n          key = self._getKey(*args,**kwds)\n          try: return cache[key]\n          except KeyError:\n              cachedValue = cache[key] = self._callable(*args,**kwds)\n              return cachedValue\n      \n      def _getKey(self,*args,**kwds):\n          return kwds and (args, ImmutableDict(kwds)) or args    \n  \n  def do_trial(a1, r1, a2, r2):\n      p1 = set(r1[a1-1])\n      p2 = set(r2[a2-1])\n      u = p1.intersection(p2)\n      if len(u) < 1:\n          return "Volunteer cheated!"\n      if len(u) > 1:\n          return "Bad magician!"\n      return list(u)[0]\n  \n  f = file(INPUT)\n  T = int(f.readline()[:-1])\n  for i in range(T):\n      rows1 = []\n      a1 = int(f.readline()[:-1])\n      for r in range(4):\n          rows1.append([int(x) for x in f.readline().split()])\n      a2 = int(f.readline()[:-1])\n      rows2 = []\n      for r in range(4):\n          rows2.append([int(x) for x in f.readline().split()])\n      v = do_trial(a1, rows1, a2, rows2)\n      print "Case #%d: %s" % (i+1, v)\n <CODESPLIT> 34
 \n  lines = iter('''\n  13\n  5 5 23\n  3 1 1\n  1 3 1\n  2 2 1\n  4 7 3\n  10 10 82\n  10 1 4\n  1 10 5\n  2 10 8\n  10 2 8\n  2 10 9\n  10 2 7\n  5 3 3\n  '''.splitlines(False)[1:])\n  out = sys.stdout\n  \n  sys.setrecursionlimit(1500)\n  \n  \n  class MyException(Exception):\n  	pass\n  lines = iter(open(r'C-small-attempt7.in').readlines(False))\n  out = open('c-small.answer', 'w')\n  \n  def solve(C, R, M):\n  	board = [['.']*C for _ in range(R)]\n  	board[-1][-1] = 'c'\n  	try:\n  		for r in range(R-2):\n  			for c in range(C-2):\n  				if r == R-3 and c == C-3:\n  					raise StopIteration()\n  				board[r][c] = '*'\n  				M -= 1\n  				if M == 0:\n  					return board \n  	except StopIteration:\n  		pass\n  		\n  	if M % 2 == 0:\n  		for r in range(R-3):\n  			board[r][C-1] = '*'\n  			board[r][C-2] = '*'\n  			M -= 2\n  			if M == 0:\n  				return board\n  		for c in range(C-3):\n  			board[R-1][c] = '*'\n  			board[R-2][c] = '*'\n  			M -= 2\n  			if M == 0:\n  				return board\n  		\n  		\n  		raise MyException()\n  	else:\n  		board[R-3][C-3] = '*'\n  		M -= 1\n  		if M == 0:\n  			return board\n  		for r in range(R-2):\n  			board[r][C-1] = '*'\n  			board[r][C-2] = '*'\n  			M -= 2\n  			if M == 0:\n  				return board\n  		for c in range(C-2):\n  			board[R-1][c] = '*'\n  			board[R-2][c] = '*'\n  			M -= 2\n  			if M == 0:\n  				return board\n  		\n  		raise MyException()\n  		\n  	\n  caseCnt = int(next(lines))\n  \n  for case in range(1, caseCnt+1):\n  	R,C,M = map(int, next(lines).split())\n  	\n  	print('Case #%d:'%case, file=out)\n  	if M == 0:\n  		print('c' + '.'*(C-1), file=out)\n  		for _ in range(R-1):\n  			print('.'*C, file=out)\n  	elif R*C==M+1:\n  		print('c' + '*'*(C-1), file=out)\n  		for _ in range(R-1):\n  			print('*'*C, file=out)\n  	elif C == 1 and R == 1:\n  		print('Impossible', file=out)\n  	elif C == 1:\n  		if M > R-1:\n  			print('Impossible', file=out)\n  		else:\n  			print('c', file=out)\n  			for _ in range(R-M-1):\n  				print('.', file=out)\n  			for _ in range(M):\n  				print('*', file=out)\n  	elif R == 1:\n  		if M > C-1:\n  			print('Impossible', file=out)\n  		else:\n  			print('c' + '.'*(C-M-1) + '*'*M, file=out)\n  	elif C == 2:\n  		if M %2 or M//2 > R-2:\n  			print('Impossible', file=out)\n  		else:\n  			print('c.', file=out)\n  			for _ in range(R-M//2-1):\n  				print('..', file=out)\n  			for _ in range(M//2):\n  				print('**', file=out)\n  	elif R == 2:\n  		if M %2 or M//2 > C-2:\n  			print('Impossible', file=out)\n  		else:\n  			print('c' + '.'*(C-M//2-1) + '*'*(M//2), file=out)\n  			print(      '.'*(C-M//2)   + '*'*(M//2), file=out)\n  	elif M > R*C-4:\n  		print('Impossible', file=out)\n  	else:\n  		try:\n  			board = solve(C, R, M)\n  			for line in board:\n  				print(''.join(line), file=out)\n  		except MyException:\n  			print('Impossible', file=out)\n  	\n  	\n <CODESPLIT> 35
 \n  input = open(r'C:\MyDocument\home\gcj\2014-04-12\A-small-attempt0.in')\n  caseCnt = int(input.readline())\n  for caseNo in range(1, caseCnt+1):\n  	ans1 = int(input.readline())\n  	for i in range(1, 5):\n  		line = input.readline()\n  		if ans1 == i:\n  			candidates = set(map(int, line.split()))\n  		\n  	ans2 = int(input.readline())\n  	for i in range(1, 5):\n  		line = input.readline()\n  		if ans2 == i:\n  			answers = candidates.intersection(set(map(int, line.split())))\n  		\n  	if len(answers) == 0:\n  		print('Case #%d: Volunteer cheated!'%caseNo)\n  	elif len(answers) > 1:\n  		print('Case #%d: Bad magician!'%caseNo)\n  	elif len(answers) == 1:\n  		answer = answers.pop()\n  		print('Case #%d: %d'%(caseNo, answer))\n <CODESPLIT> 35
 \n  def iterate_cases_1lpc(filepath):	#1lpc = 1 line per case\n  	with file(filepath, 'rb') as f_in:\n  		for line_index, line in enumerate(f_in):\n  			if line_index == 0: #T\n  				continue\n  			yield line_index, line.strip().split(' ')\n  \n  def iterate_cases_nlpc(filepath, n):	#1lpc = n line per case\n  	with file(filepath, 'rb') as f_in:\n  		case_counter = 1\n  		case = []\n  		for line_index, line in enumerate(f_in):\n  			if line_index == 0: #T\n  				continue\n  			case.append(line.strip().split(' '))\n  			if not line_index % n:\n  				yield case_counter, case\n  				case_counter += 1\n  				case = []\n  \n  def iterate_cases_glpc(filepath):		#glpc - given lines per case\n  	with file(filepath, 'rb') as f_in:\n  		case_counter = 0\n  		new_case = True\n  		for line_index, line in enumerate(f_in):\n  			if line_index == 0: #T\n  				continue\n  			if new_case:\n  				new_case = False\n  				case_counter += 1\n  				case = []\n  				assert len(line.strip().split(' ')) == 1\n  				lines_left = int(line.strip())\n  				if not lines_left:\n  					new_case = True\n  					yield case_counter, case\n  				continue\n  			if lines_left:\n  				lines_left -= 1\n  				case.append(line.strip().split(' '))\n  			if not lines_left:\n  				new_case = True\n  				yield case_counter, case\n  			\n  def part_of_list_to_int(array, flags):\n  	assert len(array) == len(flags)\n  	output = []\n  	for index, elem in enumerate(array):\n  		if flags[index]:\n  			output.append(int(elem))\n  		else:\n  			output.append(elem)\n  	return output\n  \n  def list_to_int(array):\n  	return part_of_list_to_int(array, [True] * len(array))\n  \n  def part_of_list_to_float(array, flags):\n  	assert len(array) == len(flags)\n  	output = []\n  	for index, elem in enumerate(array):\n  		if flags[index]:\n  			output.append(float(elem))\n  		else:\n  			output.append(elem)\n  	return output\n  \n  def list_to_float(array):\n  	return part_of_list_to_float(array, [True] * len(array))\n  \n  def get_max_array_on_index(array, index):\n  	elem_len = len(array[0])\n  	assert index < elem_len\n  	for elem in array:\n  		assert elem_len == len(elem)\n  	max_sub = array[0][index]\n  	max_elem = array[0]\n  	for elem in array:\n  		if elem[index] > max_sub:\n  			max_sub = elem[index]\n  			max_elem = elem\n  	return max_elem\n  \n  def list_index_in_sorted_with_position(a_list, value, pos):\n  	list_len = len(a_list)\n  	if list_len == 1:\n  		if a_list[0] == value:\n  			return pos\n  		return -1\n  	if a_list[list_len/2] > value:\n  		return list_index_in_sorted_with_position(a_list[:(list_len/2)], value, pos)\n  	else:\n  		return list_index_in_sorted_with_position(a_list[(list_len/2):], value, pos + (list_len/2))\n  	\n  def list_index_in_sorted_list(a_list, value):\n  	return list_index_in_sorted_with_position(a_list, value, 0)\n  \n  def copy_list(list):\n  	res = []\n  	for elem in list:\n  		res.append(elem)\n  	return res	\n  \n  \n  def conj_mat(a):\n  	R = len(a)\n  	C = len(a[0])\n  	res = [['.' for _ in xrange(R)] for __ in xrange(C)]\n  	for i in xrange(R):\n  		for j in xrange(C):\n  			res[j][i] = a[i][j]\n  	return res\n  \n  def one_line_builder(R, C, M):\n  	res = []\n  	res.extend(['*'] * M)\n  	res.extend(['.'] * (C - M))\n  	res[-1] = 'c'\n  	return [res]\n  	\n  def two_line_builder(R, C, M):\n  	line = []\n  	line.extend(['*'] * (M / 2))\n  	line.extend(['.'] * (C - M / 2))\n  	res = [line, copy_list(line)]\n  	res[1][-1] = 'c'\n  	if M%2 == 1:\n  		res[0][-1] = '*'\n  	return res\n  	\n  def three_line_builder(R, C, M):\n  	res = [['.' for _ in xrange(C)] for __ in xrange(R)]\n  	res[-1][-1] = 'c'\n  	m = min([M, R * C - 9])\n  	stop_flag = False\n  	for j in xrange(C):\n  		if stop_flag:\n  			break\n  		for i in xrange(R):\n  			if m == 0:\n  				stop_flag = True\n  				break\n  			res[i][j] = '*'\n  			m -= 1\n  	print i,j\n  	if i == 2:\n  		res[1][j-1] = '.'\n  		if j == C - 3:\n  			res[0][j] = '*'\n  		else:\n  			res[0][-1] = '*'\n  	\n  	if M <= R * C - 9:\n  		return res\n  	else:\n  		m = M - (R * C - 9)\n  		assert m not in [2, 4, 6, 7, 9]\n  		assert m > 0\n  		assert m < 10\n  		\n  		res[-3][-3] = '*'\n  		m -= 1\n  		if m == 0: return res\n  		res[-2][-3] = '*'\n  		res[-1][-3] = '*'\n  		m -= 2\n  		if m == 0: return res\n  		res[-3][-2] = '*'\n  		res[-3][-1] = '*'\n  		m -= 2\n  		if m == 0: return res\n  		res[-2][-2] = '*'\n  		res[-2][-1] = '*'\n  		res[-1][-2] = '*'\n  		m -= 3\n  		if m == 0: return res\n  		assert False\n  	\n  	\n  	\n  def over_three_line_builder(R, C, M):\n  	if M <= (R - 3) * C:\n  		res = [['*' for _ in xrange(C)] for __ in xrange(M / C)]\n  		flag = False\n  		if (M % C) != (C - 1):\n  			line = ['*' for _ in xrange(M % C)]\n  			line.extend(['.' for _ in xrange(C - (M % C))])\n  		else:\n  			line = ['*' for _ in xrange((M % C) - 1)]\n  			line.extend(['.' for _ in xrange((C - (M % C)) + 1)])\n  			flag = True\n  		res.append(line)\n  		index = len(res)\n  		res.extend([['.' for _ in xrange(C)] for __ in xrange(R - len(res))])\n  		if flag:\n  			res[index][0] = '*'\n  		res[-1][-1] = 'c'\n  		assert len(res) == R\n  		assert len(res[0]) == C\n  		return res\n  	else:\n  		res = [['*' for _ in xrange(C)] for __ in xrange(R - 3)]\n  		M -= (R - 3) * C\n  		tmp = three_line_builder(3, C, M)\n  		if len(tmp) != 3: # error msg\n  			return tmp\n  		res.extend(tmp)\n  		return res\n  	\n  def solve(R, C, M):\n  	res = None\n  	\n  	if M == R * C:\n  		return 'Impossible'\n  	if R >= 3 and C >= 3:\n  		if R*C - M in [7, 5, 3, 2]:\n  			return 'Impossible'\n  		return over_three_line_builder(R, C, M)\n  		\n  	elif R != 1 and C != 1:  #which means one of them is 2, and the other not 1\n  		if (R*C - M) % 2 == 1:\n  			if M < R*C - 1:\n  				return 'Impossible'\n  		if M + 2 == R * C:\n  			return 'Impossible'\n  		else:\n  			if R == 2:\n  				return two_line_builder(R, C, M)\n  			else:\n  				tmp = two_line_builder(C, R, M)\n  				return conj_mat(tmp)\n  	\n  	else:					#which means one of them is 1\n  		if R == 1:\n  			return one_line_builder(R, C, M)\n  		else:\n  			tmp = one_line_builder(C, R, M)\n  			return conj_mat(tmp)\n  		\n  	return res\n  \n  def mat_to_str(a):\n  	if a in ['Impossible', 'Not Implemented']:\n  		return a\n  	str_out = ''\n  	for row in a:\n  		for elem in row:\n  			str_out += elem\n  		str_out += '\n'\n  	return str_out[:-1]\n  	\n  def calc_result(case):\n  	result = None\n  	\n  	R = int(case[0])\n  	C = int(case[1])\n  	M = int(case[2])\n  	print R, C, M\n  	\n  	result = solve(R, C, M)\n  	\n  	str_out = mat_to_str(result)\n  	m = str_out.count('*')\n  	assert (m==0 or m==M)\n  	print str_out\n  	\n  	return '\n%s' % str_out\n  \n  def main(filepath):\n  	start_time = time.time()\n  	with file('output.txt', 'wb') as f_out:\n  		\n  		for case_index, case in iterate_cases_1lpc(filepath):\n  			\n  			print "case #%d: time:%.02f" % (case_index, time.time() - start_time)\n  			result = calc_result(case)\n  			\n  			f_out.write("Case #%d: %s\n" % (case_index, result))\n  				\n  if __name__ == '__main__':\n  	main(sys.argv[1])\n <CODESPLIT> 36
 \n  def iterate_cases_1lpc(filepath):	#1lpc = 1 line per case\n  	with file(filepath, 'rb') as f_in:\n  		for line_index, line in enumerate(f_in):\n  			if line_index == 0: #T\n  				continue\n  			yield line_index, line.strip().split(' ')\n  \n  def iterate_cases_nlpc(filepath, n):	#1lpc = n line per case\n  	with file(filepath, 'rb') as f_in:\n  		case_counter = 1\n  		case = []\n  		for line_index, line in enumerate(f_in):\n  			if line_index == 0: #T\n  				continue\n  			case.append(line.strip().split(' '))\n  			if not line_index % n:\n  				yield case_counter, case\n  				case_counter += 1\n  				case = []\n  \n  def iterate_cases_glpc(filepath):		#glpc - given lines per case\n  	with file(filepath, 'rb') as f_in:\n  		case_counter = 0\n  		new_case = True\n  		for line_index, line in enumerate(f_in):\n  			if line_index == 0: #T\n  				continue\n  			if new_case:\n  				new_case = False\n  				case_counter += 1\n  				case = []\n  				assert len(line.strip().split(' ')) == 1\n  				lines_left = int(line.strip())\n  				if not lines_left:\n  					new_case = True\n  					yield case_counter, case\n  				continue\n  			if lines_left:\n  				lines_left -= 1\n  				case.append(line.strip().split(' '))\n  			if not lines_left:\n  				new_case = True\n  				yield case_counter, case\n  			\n  def part_of_list_to_int(array, flags):\n  	assert len(array) == len(flags)\n  	output = []\n  	for index, elem in enumerate(array):\n  		if flags[index]:\n  			output.append(int(elem))\n  		else:\n  			output.append(elem)\n  	return output\n  \n  def list_to_int(array):\n  	return part_of_list_to_int(array, [True] * len(array))\n  \n  def part_of_list_to_float(array, flags):\n  	assert len(array) == len(flags)\n  	output = []\n  	for index, elem in enumerate(array):\n  		if flags[index]:\n  			output.append(float(elem))\n  		else:\n  			output.append(elem)\n  	return output\n  \n  def list_to_float(array):\n  	return part_of_list_to_float(array, [True] * len(array))\n  \n  def get_max_array_on_index(array, index):\n  	elem_len = len(array[0])\n  	assert index < elem_len\n  	for elem in array:\n  		assert elem_len == len(elem)\n  	max_sub = array[0][index]\n  	max_elem = array[0]\n  	for elem in array:\n  		if elem[index] > max_sub:\n  			max_sub = elem[index]\n  			max_elem = elem\n  	return max_elem\n  \n  def list_index_in_sorted_with_position(a_list, value, pos):\n  	list_len = len(a_list)\n  	if list_len == 1:\n  		if a_list[0] == value:\n  			return pos\n  		return -1\n  	if a_list[list_len/2] > value:\n  		return list_index_in_sorted_with_position(a_list[:(list_len/2)], value, pos)\n  	else:\n  		return list_index_in_sorted_with_position(a_list[(list_len/2):], value, pos + (list_len/2))\n  	\n  def list_index_in_sorted_list(a_list, value):\n  	return list_index_in_sorted_with_position(a_list, value, 0)\n  \n  def copy_list(list):\n  	res = []\n  	for elem in list:\n  		res.append(elem)\n  	return res	\n  \n  \n  def intersect(arr_A, arr_B):\n  	print '\t\t%s\n\t\t%s' % (arr_A, arr_B)\n  	res = []\n  	for a in arr_A:\n  		if arr_B.count(a):\n  			res.append(a)\n  	print '\t\t%s' % res\n  	return res\n  \n  def solve(row_A_selected, board_A,\n  		  row_B_selected, board_B):\n  	res = intersect(board_A[row_A_selected - 1], \n  					board_B[row_B_selected - 1])\n  	if len(res) == 0:\n  		return 'Volunteer cheated!'\n  	if len(res) == 1:\n  		return res[0]\n  	return 'Bad magician!'\n  	\n  def calc_result(case):\n  	result = None\n  	\n  	row_A_selected = int(case[0][0])\n  	row_B_selected = int(case[5][0])\n  	board_A = case[1:5]\n  	board_B = case[6:10]\n  	\n  	print "row_A_selected: %s" % row_A_selected\n  	print "row_B_selected: %s" % row_B_selected\n  	print \n  	print board_A\n  	print \n  	print board_B\n  	print\n  	\n  	result = solve(row_A_selected, board_A,\n  				   row_B_selected, board_B)\n  	print result\n  	\n  	\n  	return result\n  \n  def main(filepath):\n  	start_time = time.time()\n  	with file('output.txt', 'wb') as f_out:\n  		\n  		for case_index, case in iterate_cases_nlpc(filepath, 10):\n  			\n  			print "case #%d: time:%.02f" % (case_index, time.time() - start_time)\n  			result = calc_result(case)\n  			\n  			f_out.write("Case #%d: %s\n" % (case_index, result))\n  				\n  if __name__ == '__main__':\n  	main(sys.argv[1])\n <CODESPLIT> 36
 \n  def Fill(outmat,R,C,F):\n      nF=F\n      outmat[:2,:2]='.'\n      nF-=4\n      if nF==0: return\n  \n      outmat[2,:2]='.'\n      nF-=2\n      if nF==0: return    \n  \n      outmat[:2,2]='.'\n      nF-=2\n      if nF==0: return\n  \n      for iC in xrange(3,C):\n          if nF==1:\n              outmat[2,2]='.'\n              return\n          outmat[:2,iC]='.'\n          nF-=2\n          if nF==0: return\n          \n      for iR in xrange(3,R):\n          if nF==1:\n              outmat[2,2]='.'\n              return\n          outmat[iR,:2]='.'\n          nF-=2\n          if nF==0: return\n  \n      for iR,iC in ( (iR,iC) for iR in xrange(2,R)\n                     for iC in xrange(2,C)):\n          outmat[iR,iC]='.'\n          nF-=1\n          if nF==0: return\n      \n  \n  \n  \n  def Solve(R,C,M):\n      F=R*C-M\n      if F==0: return '\nImpossible'\n      if (R>1 and C>1 and F in (2,3)):\n          return '\nImpossible'\n  \n      outmat=np.zeros( (R,C), dtype='S1')\n      outmat[:,:]='*'\n  \n      if R==1:\n          for i in xrange(F):\n              outmat[0][i]='.'\n      \n      elif C==1:\n          for i in xrange(F):\n              outmat[i][0]='.'\n  \n      elif F>1:\n          if F in (2,3,5,7): return "\nImpossible"\n          elif (R==2 or C==2) and F%2 != 0:\n              return "\nImpossible"\n          elif R==2:\n              outmat[:,:F/2]='.'\n          elif C==2:\n              outmat[:F/2,:]='.'\n          else: Fill(outmat,R,C,F)\n          \n      outmat[0,0]='c'\n      outmatlines=[ ''.join(x) for x in outmat ]\n      answer='\n'+'\n'.join(outmatlines)\n  \n      Verify(answer,F)\n  \n      return answer\n  \n  disp=[ (dx,dy) for dx in (-1,0,1)\n      for dy in (1,0,-1) if (dx !=0 or dy!=0) ]\n  \n  def Verify(answer,F):\n      lines=[list(x) for x in answer.split('\n')]\n      if len(lines[0])==0: lines.pop(0)\n      R,C=len(lines),len(lines[0])\n      assert lines[0][0]=='c'\n      assert answer.count('.')+1==F\n      q=Queue.Queue()\n      q.put( (0,0) )\n  \n      def adjToMine(x,y):\n          for dx,dy in disp:\n              if 0<=x+dx<R and 0<=y+dy<C:\n                  if lines[x+dx][y+dy]=='*': return True\n          return False\n                  \n  \n      while not q.empty():\n          x,y=q.get()\n          for dx,dy in disp:\n              if 0<=x+dx<R and 0<=y+dy<C:\n                  if lines[x+dx][y+dy]=='c': continue\n                  lines[x+dx][y+dy]='c'\n                  if not adjToMine(x+dx,y+dy):\n                      q.put( (x+dx,y+dy) )\n  \n      clicked='\n'.join([ ''.join(x) for x in lines])\n      if clicked.find('.')>=0:\n          print '\n','*'*20,"\nERROR, input:"\n          print answer\n          print 'OUTPUT:'\n          print clicked\n      \n  \n  \n  \n  def parse(infile):\n      R,C,M=map(int, infile.readline().split() )\n      return R,C,M\n  \n  \n  \n  class GCJ_Parser( object ):\n      def __init__(self,fname):\n          self.infile=open(fname,'r')\n          self.NumCases=int(self.infile.readline().strip() )\n          self.caseNum=0\n  \n      def __iter__(self): return self\n  \n      def next(self):\n          if self.caseNum==self.NumCases: raise StopIteration\n          self.caseNum += 1\n          args=parse(self.infile)\n          return self.caseNum , args\n  \n  \n  def runmain():\n      myCases=GCJ_Parser(sys.argv[1])\n  \n      outname=sys.argv[1].rstrip('.in')+'.out'\n      if os.path.isfile(outname):\n          oldout=outname+'.old'\n          ii=0\n          while os.path.isfile(oldout):\n              ii+=1\n              oldout=outname+'.old'+str(ii)\n          os.rename(outname,oldout)\n          print 'Rename: %s -> %s'%(outname,oldout)   \n   \n      outfile=open(outname,'w')\n  \n      for iCase, args in myCases:\n          answer=Solve(*args)\n  \n          print 'Case #'+str(iCase)+':',answer\n          print >> outfile, 'Case #'+str(iCase)+':',answer\n  \n  \n  \n  \n  if __name__=='__main__':\n      runmain()\n <CODESPLIT> 37
 \n  \n  def Solve(F1,r1,F2,r2):\n      s1=set(F1[r1-1])\n      s2=set(F2[r2-1])\n      sx=s1.intersection(s2)\n      if len(sx)>1:\n          return "Bad magician!"\n      elif len(sx)==0:\n          return "Volunteer cheated!"\n      else:\n          return sx.__iter__().next()\n  \n  \n  \n  def parse(infile):\n      r1=int(infile.readline().strip())\n      F1=[]\n      for i in xrange(4):\n          F1.append( map(int, infile.readline().split() ))\n      r2=int(infile.readline().strip())\n      F2=[]\n      for i in xrange(4):\n          F2.append( map(int, infile.readline().split() ))\n      return F1,r1,F2,r2\n  \n  \n  \n  class GCJ_Parser( object ):\n      def __init__(self,fname):\n          self.infile=open(fname,'r')\n          self.NumCases=int(self.infile.readline().strip() )\n          self.caseNum=0\n  \n      def __iter__(self): return self\n  \n      def next(self):\n          if self.caseNum==self.NumCases: raise StopIteration\n          self.caseNum += 1\n          args=parse(self.infile)\n          return self.caseNum , args\n  \n  \n  def runmain():\n      myCases=GCJ_Parser(sys.argv[1])\n  \n      outname=sys.argv[1].rstrip('.in')+'.out'\n      if os.path.isfile(outname):\n          oldout=outname+'.old'\n          ii=0\n          while os.path.isfile(oldout):\n              ii+=1\n              oldout=outname+'.old'+str(ii)\n          os.rename(outname,oldout)\n          print 'Rename: %s -> %s'%(outname,oldout)   \n   \n      outfile=open(outname,'w')\n  \n      for iCase, args in myCases:\n          answer=Solve(*args)\n  \n          print 'Case #'+str(iCase)+':',answer\n          print >> outfile, 'Case #'+str(iCase)+':',answer\n  \n  \n  \n  \n  if __name__=='__main__':\n      runmain()\n <CODESPLIT> 37
f = open('input.in')\n  g = open('output', 'w')\n  \n  T = int(f.readline()[:-1])\n  \n  for case in xrange(T) :\n      R, C, M = map(int, f.readline()[:-1].split())\n      FREE = R*C - M\n      if FREE == 0 : res = '\nImpossible'\n      elif FREE != 1 and M > 0 and (R == 2 or C == 2) and (FREE == 2 or FREE % 2 == 1) : res = '\nImpossible'\n      elif R > 2 and C > 2 and FREE in (2, 3, 5, 7) : res = '\nImpossible'\n      else :\n          MAP = [['.' for c in range(C)] for r in range(R)]\n          MAP[0][0] = 'c'\n          if R == 1 :\n              for i in range(C-1, C-M-1, -1) : MAP[0][i] = '*'\n          elif C == 1 :\n              for i in range(R-1, R-M-1, -1) : MAP[i][0] = '*'\n          elif R == 2 :\n              for i in range(C-1, C-M/2-1, -1) : MAP[0][i], MAP[1][i] = '*', '*'\n              if FREE == 1 : MAP[1][0] = '*'\n          elif C == 2 :\n              for i in range(R-1, R-M/2-1, -1) : MAP[i][0], MAP[i][1] = '*', '*'\n              if FREE == 1 : MAP[0][1] = '*'\n          else :\n              com = M / C\n              for i in range(R-1, max(R-com-1, 2), -1) :\n                  MAP[i] = ['*' for j in range(C)]\n                  M -= C\n              I = max([i for i, j in enumerate(MAP) if j[0] == '.'])\n              if I == 2 :\n                  com = M / 3\n                  if com == 0 : i = C\n                  for i in range(C-1, C-com-1, -1) :\n                      MAP[0][i], MAP[1][i], MAP[2][i] = '*', '*', '*'\n                      M -= 3\n                  if M >= 1 : MAP[2][i-1] = '*'\n                  if M >= 2 :\n                      if i != 1 : MAP[2][i-2] = '*'\n                      else : MAP[1][0] = '*'\n              else :\n                  for i in range(C-1, C-M-1, -1) : MAP[I][i] = '*'\n                  if i == 1 :\n                      MAP[I][i] = '.'\n                      MAP[I-1][C-1] = '*'\n          res = '\n' + '\n'.join([''.join(i) for i in MAP])\n      output = 'Case #' + str(case + 1) + ': ' + str(res)\n      g.write(output + '\n')\n      print output\n  \n  f.close()\n  g.close()\n <CODESPLIT> 38
f = open('input.in')\n  g = open('output', 'w')\n  \n  T = int(f.readline()[:-1])\n  \n  for case in xrange(T) :\n      a1 = int(f.readline()[:-1])\n      M1 = [map(int, f.readline()[:-1].split()) for i in range(4)]\n      a2 = int(f.readline()[:-1])\n      M2 = [map(int, f.readline()[:-1].split()) for i in range(4)]\n      r1 = M1[a1-1]\n      r2 = M2[a2-1]\n      res = set(r1).intersection(set(r2))\n      if len(res) == 1 : res = res.pop()\n      elif len(res) == 0 : res = 'Volunteer cheated!'\n      else : res = 'Bad magician!'\n      output = 'Case #' + str(case + 1) + ': ' + str(res)\n      g.write(output + '\n')\n      print output\n  \n  f.close()\n  g.close()\n <CODESPLIT> 38
 \n  \n  '''\n  ...\n  ...\n  ...\n  ...\n  ...\n  '''\n  \n  for i in range(int(input())):\n  \n      r, c, m = tuple(map(int, str.split(input())))\n      count = r * c - m\n      field = dict(map(lambda c: (c, "*"), itertools.product(range(c), range(r))))\n      answer = "Impossible"\n  \n      if m == 0:\n  \n          answer = field\n  \n      elif 1 in (r, c):\n  \n          for p in itertools.islice(itertools.product(range(c), range(r)), count):\n  \n              field[p] = "."\n  \n          answer = field\n  \n      elif count in (0, 2, 3, 5, 7):\n  \n          pass\n  \n      elif count == 1:\n  \n          answer = field\n  \n      elif count // 2 < c or count == c * 2 + 1:\n  \n          if count % 2 != 0:\n  \n              tail = 3\n              ncount = count - 3\n  \n          else:\n  \n              tail = 0\n              ncount = count\n  \n          for x in range(ncount // 2):\n  \n              field[(x, 0)] = field[(x, 1)] = "."\n  \n          for x in range(tail):\n  \n              field[(x, 2)] = "."\n  \n          answer = field\n  \n      elif not (c == 2 and count % c == 1):\n  \n          for x in range(c):\n  \n              field[(x, 0)] = field[(x, 1)] = "."\n  \n          count -= 2 * c\n          tail = 0\n          if count % c == 1:\n  \n              tail = 2\n              count -= 1\n  \n          y = 2\n          while count > 0:\n  \n              rx = min(count, c)\n              for x in range(rx):\n  \n                  field[(x, y)] = "."\n  \n              count -= rx\n              y += 1\n  \n          for x in range(tail):\n  \n              field[(x, y)] = "."\n  \n          answer = field\n  \n      field[(0, 0)] = "c"\n      print(str.format("Case #{}:", i + 1))\n      if isinstance(answer, dict):\n  \n          for y in range(r):\n  \n              print(str.join("", map(lambda x: field[(x, y)], range(c))))\n  \n      else:\n  \n          print(answer)\n <CODESPLIT> 39
def read_case():\n  \n      answer = int(input())\n      lines = tuple(map(lambda _: set(str.split(input())), range(4)))\n      return lines[answer - 1]\n  \n  \n  for i in range(int(input())):\n  \n      intersection = read_case() & read_case()\n      count = len(intersection)\n      if count == 1:\n  \n          answer = intersection.pop()\n  \n      elif count > 1:\n  \n          answer = "Bad magician!"\n  \n      elif count < 1:\n  \n          answer = "Volunteer cheated!"\n  \n      print(str.format("Case #{}: {}", i + 1, answer))\n <CODESPLIT> 39
 \n  class Solver(object):\n      def __init__(self):\n          pass\n      \n      def solve(self, inputs):\n          R, C, M = [int(x) for x in inputs[0].split()]\n          mp = []\n          for r in range(R):\n              mp.append(['.']*C)\n          mp[0][0] = 'c'\n          outputs = []\n          if M == 0:\n              for row in mp:\n                  outputs.append(''.join(row))\n              return outputs\n          rr, cc, rm = R, C, M\n          while rm >= min(rr, cc):\n              if rr <= cc:\n                  for r in range(rr):\n                      mp[r][cc-1] = '*'\n                  cc -= 1\n                  rm -= rr\n              else:\n                  for c in range(cc):\n                      mp[rr-1][c] = '*'\n                  rr -= 1\n                  rm -= cc\n          \n          if rm == 0:\n              if (min(rr, cc), max(rr, cc)) == (1, 2) and min(R, C) != 1:\n                  return ['Impossible']\n          else:\n              if min(rr, cc) - rm >= 2:\n                  if rr <= cc:\n                      for r in range(rr-rm, rr):\n                          mp[r][cc-1] = '*'\n                  else:\n                      for c in range(cc-rm, cc):\n                          mp[rr-1][c] = '*'\n              else:\n                  if min(rr, cc) >= 4:\n                      if rr <= cc:\n                          for r in range(2, rr):\n                              mp[r][cc-1] = '*'\n                          mp[rr-1][cc-2] = '*'\n                      else:\n                          for c in range(2, cc):\n                              mp[rr-1][c] = '*'\n                          mp[rr-2][cc-1]='*'\n                  elif min(rr,cc) == 3:\n                      if max(rr, cc) == 3:\n                          return ['Impossible']\n                      else:\n                          if rr <= cc:\n                              mp[2][cc-1] = '*'\n                              mp[2][cc-2] = '*'\n                          else:\n                              mp[rr-1][2] = '*'\n                              mp[rr-2][2] = '*'\n                  else:\n                      return ['Impossible']\n                      \n          for row in mp:\n              outputs.append(''.join(row))\n          return outputs\n          pass\n      \n      def feed(self, inputs):\n          lines = [x.strip() for x in inputs]\n          outputs = []\n          test_case_n = int(lines[0])\n          cur = 1\n          for i in range(test_case_n):\n              i = i\n              case_line_cnt = 1\n              case_inputs = lines[cur:cur+case_line_cnt]\n              cur += case_line_cnt\n              R, C, M = [int(x) for x in case_inputs[0].split()]\n              rslt = self.solve(case_inputs)\n              if self.verify(rslt, R, C, M):\n                  outputs.append(rslt)\n              else:\n                  raise 'Failed'\n          return outputs\n      \n      def verify(self, outputs, RR, CC, MCNT):\n          if 'Impossible' == outputs[0]:\n              return True\n          rr = len(outputs)\n          cc = len(outputs[0])\n          if RR != rr or CC != cc:\n              return False\n          bd = []\n          mask = []\n          for i in range(rr):\n              mask.append([1]*cc)\n              bd.append([0]*cc)\n              for j in range(cc):\n                  if outputs[i][j] == '*':\n                      bd[i][j] = 9\n                  elif outputs[i][j] == 'c':\n                      start = (i, j)\n          for r in range(rr):\n              for c in range(cc):\n                  if bd[r][c] == 9:\n                      for i in [r-1,r,r+1]:\n                          for j in [c-1,c,c+1]:\n                              if 0 <= i < rr and 0 <= j < cc:\n                                  if bd[i][j] != 9:\n                                      bd[i][j] += 1\n  \n          nlist = [start]\n          while len(nlist):\n              i, j = nlist.pop(0)\n              if mask[i][j] != 0:\n                  mask[i][j] = 0\n                  if bd[i][j] == 9:\n                      raise '!!! BOMB'\n                  elif bd[i][j] == 0:\n                      for ii in [i-1,i,i+1]:\n                          for jj in [j-1,j,j+1]:\n                              if 0<=ii<rr and 0<=jj<cc:\n                                  if ii != i or jj != j:\n                                      nlist.append((ii,jj))\n          mcnt = 0\n          for r in range(rr):\n              for c in range(cc):\n                  if mask[r][c] == 1:\n                      mcnt += 1\n                  if mask[r][c] == 1 and bd[r][c] != 9:\n                      return False\n                  if mask[r][c] != 1 and bd[r][c] == 9:\n                      return False\n          return (mcnt == MCNT)\n                  \n  \n  if __name__ == '__main__':\n      iname = 'C-small-attempt0.in'\n      sample_in = '''\n  7\n  5 5 23\n  3 1 1\n  2 2 1\n  4 7 3\n  10 10 82\n  3 4 0\n  2 2 3\n      '''\n      sample_out = '''\n  Case #1: 1.0000000\n  Case #2: 39.1666667\n  Case #3: 63.9680013\n  Case #4: 526.1904762\n      '''\n      if os.path.exists(iname):\n          with open(iname) as f:\n              inputs = f.readlines()\n      else:\n          inputs = [x.strip() for x in sample_in.split('\n') if x.strip()]\n      solver = Solver()\n      outputs = solver.feed(inputs)\n      fail_flag = False\n      if os.path.exists(iname):\n          with open(iname+'.out', 'w') as f:\n              for i, v in enumerate(outputs):\n                  print >> f, 'Case #%d:'%(i+1)\n                  print >> f, '\n'.join(v)\n      print '===================================================='\n      for i, v in enumerate(outputs):\n          print 'Case #%d:'%(i+1)\n          print '\n'.join(v)\n      print '===================================================='\n      print 'done' if not fail_flag else 'fail'\n      pass\n <CODESPLIT> 40
 \n  class Solver(object):\n      def __init__(self):\n          pass\n      \n      def solve(self, inputs):\n          r1 = int(inputs[0])\n          cs1 = set([int(x) for x in inputs[r1].split()])\n          r2 = int(inputs[5])\n          cs2 = set([int(x) for x in inputs[5+r2].split()])\n          r = cs1.intersection(cs2)\n          cnt = len(r)\n          if 1 == cnt:\n              return max(r)\n          elif 0 == cnt:\n              return 'Volunteer cheated!'\n          else:\n              return 'Bad magician!'\n          pass\n      \n      def feed(self, inputs):\n          lines = [x.strip() for x in inputs]\n          outputs = []\n          test_case_n = int(lines[0])\n          cur = 1\n          for i in range(test_case_n):\n              i = i\n              case_line_cnt = 10\n              case_inputs = lines[cur:cur+case_line_cnt]\n              cur += case_line_cnt\n              outputs.append(self.solve(case_inputs))\n          return outputs\n  \n  if __name__ == '__main__':\n      iname = 'A-small-attempt0.in'\n      sample_in = '''\n      3\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  3\n  1 2 5 4\n  3 11 6 15\n  9 10 7 12\n  13 14 8 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  3\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n      '''\n      sample_out = '''\n   Case #1: 7\n  Case #2: Bad magician!\n  Case #3: Volunteer cheated!\n      '''\n      if os.path.exists(iname):\n          with open(iname) as f:\n              inputs = f.readlines()\n      else:\n          inputs = [x.strip() for x in sample_in.split('\n') if x.strip()]\n      solver = Solver()\n      outputs = solver.feed(inputs)\n      fail_flag = False\n      if os.path.exists(iname):\n          with open(iname+'.out', 'w') as f:\n              for i, v in enumerate(outputs):\n                  print >> f, 'Case #%d: %s'%(i+1, str(v))\n      else:\n          ans = set([x.strip() for x in sample_out.split('\n') if x.strip()])\n          for i, v in enumerate(outputs):\n              t = 'Case #%d: %s'%(i+1, str(v))\n              if t not in ans:\n                  print '!!! Wrong:', t\n                  fail_flag = True\n      print '===================================================='\n      for i, v in enumerate(outputs):\n          print 'Case #%d: %s'%(i+1, str(v))\n      print '===================================================='\n      print 'done' if not fail_flag else 'fail'\n      pass\n <CODESPLIT> 40
'''\n  Created on Apr 12, 2014\n  \n  @author: mostasem\n  '''\n  \n  def getFloorRoots(m):\n      r1 = -1 + math.sqrt(1 + (8 * m))/2\n      r2 = -1 - math.sqrt(1 + (8 * m))/2\n      return int(math.floor(r1))\n      \n  def boardHasZero(R,C,M):\n      if(R > 1 and C > 1):\n          S = M/C\n          Sr = M % C\n          print S,Sr\n          return R >= S+3 or (R == S+2 and ((Sr % 2) == 0 or (((C + Sr) % 3 == 0) and (2*C >= (C + Sr + 4))))) or (R == S+1  and (C + Sr) % 2 == 0 and (2*C >= (C + Sr + 4)))  #M <= ((R*C) - 4)\n      else :\n          return M <= ((R*C) - 2)\n  \n  \n  def generateMineSweeperCase(R,C,M):\n  \n      board = ""\n  \n      if( R > 1 and C > 1 ): # generate special\n          S = M/C\n          Sr = M % C\n          print S,Sr\n          if(S): # all rows of *\n              board +="\n"\n              if(R >= S+3 or (R == S+2 and Sr % 2 == 0)):\n                  board += (S - 1) * ((C*"*") + "\n")\n              else:\n                  board += (S - 2) * ((C*"*") + "\n")\n              board +=  ((C*"*"))\n              \n          if(R >= S+3):\n              if(Sr):\n                  board +="\n"\n                  board += ((Sr *"*") + ((C - Sr) *"."))\n              Rm = R - (S + 1)\n              if(Rm):\n                  board +="\n"\n                  board += (Rm - 1) * ((C*".") + "\n")\n                  board +=  ((C*"."))\n                  \n          elif(R == S + 2):\n              Sm = 0\n              if(Sr % 2 == 0):\n                  board +="\n"\n                  board += (((Sr / 2) *"*") + ((C - (Sr / 2)) *".") +"\n")\n                  board += ((Sr / 2) *"*") + ((C - (Sr / 2)) *".")\n              else:\n                  board +="\n"\n                  board += (((Sr / 3) *"*") + ((C - (Sr / 3)) *".") +"\n")\n                  board += ((Sr / 3) *"*") + ((C - (Sr / 3)) *".")\n          else :\n              Sm = Sr + C\n              board +="\n"\n              board += (((Sm / 2) *"*") + ((C - (Sm / 2)) *".") +"\n")\n              board += ((Sm / 2) *"*") + ((C - (Sm / 2)) *".")\n                  \n          list_board = list(board)\n          list_board[len(list_board) - 1] = 'c'\n          board = "".join(list_board)\n      else:\n          board +="\n"\n          if(C == 1):\n              board += M * "*\n"\n              board += (R-M-1) * ".\n"\n              board +=  "c"\n          else:\n              board += M * "*"\n              board += (C-M-1) * "."\n              board += "c"\n              \n      return board\n         \n         \n         \n  \n  f_r = open('C.in',"r")\n  n_test=int(f_r.readline().strip()) \n  f_w = open("C.out", "w")\n  result = ""\n  for i in range(n_test):\n      R,C,M = map(int,f_r.readline().split())\n      print R,C,M\n      if(boardHasZero(R,C,M)):\n          result = generateMineSweeperCase(R,C,M)\n      else :\n          result ="\nImpossible"\n      print result\n      output_str='Case #{itr}:{res}'.format(itr=(i+1),res=result)\n      f_w.write(output_str+'\n')\n      \n  f_r.close()\n <CODESPLIT> 41
'''\n  Created on Apr 11, 2014\n  \n  @author: mostasem\n  '''\n  \n  \n  \n  def getIntersection(A,B):\n      intersect_list = []\n      dict = {};\n      for i in range(4):\n          if(dict.get(A[i]) <> None):\n              dict[A[i]] += 1\n              if(intersect_list.count(A[i]) == 0):\n                  intersect_list.append(A[i])\n          else:\n              dict[A[i]] = 1\n          if(dict.get(B[i]) <> None):\n              dict[B[i]] += 1\n              if(intersect_list.count(B[i]) == 0):\n                  intersect_list.append(B[i])\n          else:\n              dict[B[i]] = 1\n  \n      return intersect_list\n  \n  f_r = open('A.in',"r")\n  n_test=int(f_r.readline().strip()) \n  f_w = open("A.out", "w")\n  result = ""\n  for i in range(n_test):\n      cards1 = []\n      row_index_1 = int(f_r.readline()) - 1\n      for j in range(4):\n          cards1.append(map(int,f_r.readline().split()))\n      cards2 = []\n      row_index_2 = int(f_r.readline()) - 1\n      for j in range(4):\n          cards2.append(map(int,f_r.readline().split())) \n      int_list =  getIntersection(cards1[row_index_1], cards2[row_index_2])\n      result = ""\n      if(len(int_list) == 0):\n          result = "Volunteer cheated!"\n      elif(len(int_list)  == 1):\n          result = str(int_list[0])\n      else:\n          result = "Bad magician!"\n      output_str='Case #{itr}: {res}'.format(itr=(i+1),res=result)\n      print output_str\n      f_w.write(output_str+'\n')\n  f_r.close()\n  f_w.close()\n <CODESPLIT> 41
 \n  FILE_NAME_BASE = 'C-small-attempt0'\n  NUM_PROCESSES = 0\n  MEM_LIMIT_GB = 1.5 # per worker process\n  RECURSION_LIMIT = 1000\n  \n  def parse(inp):\n  	rows, cols, mines = (int(x) for x in inp.readline().split())\n  	return rows, cols, mines\n  \n  def search(rows, cols, mines):\n  \n  	assert 0 <= mines < rows * cols\n  	if mines == 0:\n  		return ['c' + '.' * (cols - 1)] + ['.' * cols] * (rows - 1)\n  	if mines == rows * cols - 1:\n  		return ['c' + '*' * (cols - 1)] + ['*' * cols] * (rows - 1)\n  \n  	if rows == 1:\n  		return ['c' + '.' * (cols - 1 - mines) + '*' * mines]\n  	if cols == 1:\n  		return ['c'] + ['.'] * (rows - 1 - mines) + ['*'] * mines\n  \n  	if mines > rows * cols - 4:\n  		return None\n  \n  \n  	return None\n  \n  class SearchBoard(object):\n  \n  	def __init__(self, rows, cols):\n  		self.counts = [[0] * (cols + 2) for _ in xrange(rows + 2)]\n  		self.mineCount = 0\n  \n  	def addMine(self, row, col):\n  		counts = self.counts\n  		assert counts[row + 1][col + 1] < 10\n  		top = counts[row + 0]\n  		top[col + 0] += 1\n  		top[col + 1] += 1\n  		top[col + 2] += 1\n  		mid = counts[row + 1]\n  		mid[col + 0] += 1\n  		mid[col + 1] += 10\n  		mid[col + 2] += 1\n  		bot = counts[row + 2]\n  		bot[col + 0] += 1\n  		bot[col + 1] += 1\n  		bot[col + 2] += 1\n  		self.mineCount += 1\n  \n  	def removeMine(self, row, col):\n  		counts = self.counts\n  		assert counts[row + 1][col + 1] >= 10\n  		top = counts[row + 0]\n  		top[col + 0] -= 1\n  		top[col + 1] -= 1\n  		top[col + 2] -= 1\n  		mid = counts[row + 1]\n  		mid[col + 0] -= 1\n  		mid[col + 1] -= 10\n  		mid[col + 2] -= 1\n  		bot = counts[row + 2]\n  		bot[col + 0] -= 1\n  		bot[col + 1] -= 1\n  		bot[col + 2] -= 1\n  		self.mineCount -= 1\n  \n  	def checkConnected(self):\n  		counts = self.counts\n  		cols = len(counts[0]) - 2\n  		rows = len(counts) - 2\n  \n  		for rowIdx, row in enumerate(counts):\n  			if rowIdx == 0 or rowIdx > rows:\n  				continue\n  			try:\n  				colIdx = row.index(0, 1, -1)\n  			except ValueError:\n  				pass\n  			else:\n  				click = (rowIdx, colIdx)\n  				break\n  		else:\n  			return None\n  \n  		revealed = set()\n  		def reveal(row, col):\n  			if 1 <= row <= rows and 1 <= col <= cols:\n  				pos = (row, col)\n  				if pos not in revealed:\n  					revealed.add(pos)\n  					count = counts[row][col]\n  					if count == 0:\n  						for dr in (-1, 0, 1):\n  							for dc in (-1, 0, 1):\n  								if dr != 0 or dc != 0:\n  									reveal(row + dr, col + dc)\n  					else:\n  						assert count < 10\n  		reveal(*click)\n  		numNonMines = rows * cols - self.mineCount\n  		if len(revealed) != numNonMines:\n  			assert len(revealed) < numNonMines\n  			return None\n  \n  		board = [\n  				['.' if cell < 10 else '*' for cell in row[1 : -1]]\n  				for row in counts[1 : -1]\n  				]\n  		board[click[0] - 1][click[1] - 1] = 'c'\n  		return [''.join(row) for row in board]\n  \n  def searchBruteForce(rows, cols, mines):\n  	if mines == rows * cols - 1:\n  		return ['c' + '*' * (cols - 1)] + ['*' * cols] * (rows - 1)\n  \n  	searchBoard = SearchBoard(rows, cols)\n  \n  	def searchRec(idx, remaining):\n  		if remaining == 0:\n  			return searchBoard.checkConnected()\n  		elif idx < remaining:\n  			return None\n  		else:\n  			pos = divmod(idx, cols)\n  			searchBoard.addMine(*pos)\n  			found = searchRec(idx - 1, remaining - 1)\n  			searchBoard.removeMine(*pos)\n  			if found is not None:\n  				return found\n  			return searchRec(idx - 1, remaining)\n  \n  	return searchRec(rows * cols - 1, mines)\n  \n  def solve(rows, cols, mines):\n  	board = search(rows, cols, mines)\n  \n  	if board is None:\n  		board = searchBruteForce(rows, cols, mines)\n  		if board is None:\n  			return '\n' + 'Impossible'\n  		print 'ERROR: fast search missed solution for %dx%d board, %d mines:' \\n  				% (rows, cols, mines)\n  		for row in board:\n  			print row\n  		print\n  \n  	assert len(board) == rows\n  	assert all(len(row) == cols for row in board)\n  	counts = { 'c': 0, '.': 0, '*': 0 }\n  	for row in board:\n  		for cell in row:\n  			counts[cell] += 1\n  	assert counts['c'] == 1\n  	assert counts['*'] == mines\n  \n  	flowBoard = [\n  			['.' if cell == 'c' else cell for cell in row]\n  			for row in board\n  			]\n  	def countMinesOn(row, col):\n  		if 0 <= row < rows and 0 <= col < cols:\n  			return 1 if flowBoard[row][col] == '*' else 0\n  		else:\n  			return 0\n  	def countMinesNear(row, col):\n  		return sum(\n  			countMinesOn(row + dr, col + dc)\n  			for dr in (-1, 0, 1)\n  			for dc in (-1, 0, 1)\n  			)\n  	def reveal(row, col):\n  		if 0 <= row < rows and 0 <= col < cols:\n  			assert flowBoard[row][col] != '*'\n  			if flowBoard[row][col] == '.':\n  				count = countMinesNear(row, col)\n  				flowBoard[row][col] = str(count)\n  				if count == 0:\n  					for dr in (-1, 0, 1):\n  						for dc in (-1, 0, 1):\n  							reveal(row + dr, col + dc)\n  	clickRow, = [i for i, row in enumerate(board) if 'c' in row]\n  	clickCol = board[clickRow].index('c')\n  	reveal(clickRow, clickCol)\n  	assert all('.' not in row for row in flowBoard), flowBoard\n  \n  	assert all(type(row) == str for row in board)\n  	return '\n' + ''.join('\n' + ''.join(row) for row in board)\n  \n  def main():\n  	sys.setrecursionlimit(RECURSION_LIMIT)\n  \n  	soft, hard = resource.getrlimit(resource.RLIMIT_AS)\n  	resource.setrlimit(resource.RLIMIT_AS, (MEM_LIMIT_GB * 1024 ** 3, hard))\n  \n  	inp = open(FILE_NAME_BASE + '.in', 'r')\n  	numCases = int(inp.readline())\n  	if NUM_PROCESSES == 0:\n  		results = [\n  			solve(*parse(inp))\n  			for _ in range(numCases)\n  			]\n  	else:\n  		pool = Pool(NUM_PROCESSES)\n  		results = [\n  			pool.apply_async(solve, parse(inp))\n  			for _ in range(numCases)\n  			]\n  	inp.close()\n  	out = open(FILE_NAME_BASE + '.out', 'w')\n  	for case, result in enumerate(results):\n  		value = result if NUM_PROCESSES == 0 else result.get()\n  		out.write('Case #%d: %s\n' % (case + 1, value))\n  		out.flush()\n  	out.close()\n  \n  if __name__ == '__main__':\n  	main()\n <CODESPLIT> 42
 \n  FILE_NAME_BASE = 'A-small-attempt0'\n  NUM_PROCESSES = 0\n  MEM_LIMIT_GB = 1.5 # per worker process\n  RECURSION_LIMIT = 1000\n  \n  def parseBoard(inp):\n  	rowSel, = (int(x) for x in inp.readline().split())\n  	board = tuple(\n  		tuple(int(x) for x in inp.readline().split())\n  		for _ in xrange(4)\n  		)\n  	return board, rowSel - 1\n  \n  def parse(inp):\n  	before, beforeSel = parseBoard(inp)\n  	after, afterSel = parseBoard(inp)\n  	return before, beforeSel, after, afterSel\n  \n  def solve(before, beforeSel, after, afterSel):\n  	candidates = set(before[beforeSel]) & set(after[afterSel])\n  \n  	if len(candidates) == 0:\n  		return "Volunteer cheated!"\n  	elif len(candidates) == 1:\n  		return candidates.pop()\n  	else:\n  		return "Bad magician!"\n  \n  def main():\n  	sys.setrecursionlimit(RECURSION_LIMIT)\n  \n  	soft, hard = resource.getrlimit(resource.RLIMIT_AS)\n  	resource.setrlimit(resource.RLIMIT_AS, (MEM_LIMIT_GB * 1024 ** 3, hard))\n  \n  	inp = open(FILE_NAME_BASE + '.in', 'r')\n  	numCases = int(inp.readline())\n  	if NUM_PROCESSES == 0:\n  		results = [\n  			solve(*parse(inp))\n  			for _ in range(numCases)\n  			]\n  	else:\n  		pool = Pool(NUM_PROCESSES)\n  		results = [\n  			pool.apply_async(solve, parse(inp))\n  			for _ in range(numCases)\n  			]\n  	inp.close()\n  	out = open(FILE_NAME_BASE + '.out', 'w')\n  	for case, result in enumerate(results):\n  		value = result if NUM_PROCESSES == 0 else result.get()\n  		out.write('Case #%d: %s\n' % (case + 1, value))\n  		out.flush()\n  	out.close()\n  \n  if __name__ == '__main__':\n  	main()\n <CODESPLIT> 42
T = int(raw_input().strip())\n  misses = set()\n  \n  for i in xrange(T):\n  	R, C, M = map(int, raw_input().strip().split(' '))\n  	F = R * C - M\n  	impossible = False\n  	if F == 1:\n  		matrix = ["c" + "*" * (C - 1)]\n  		for _ in xrange(R - 1):\n  			matrix.append("*" * C)\n  	elif R == 1:\n  		matrix = ["c" + "." * (F - 1) + "*" * (C - F)]\n  	elif C == 1:\n  		matrix = ["c"]\n  		for _ in xrange(F - 1):\n  			matrix.append(".")\n  		for _ in xrange(R - F):\n  			matrix.append("*")\n  	elif R == 2:\n  		if F % 2 == 0 and (C > 1 and F != 2 or C == 1 and F <= 2):\n  			matrix = [\n  				"c" + "." * (F / 2 - 1) + "*" * (C - F / 2),	\n  				"." * (F / 2) + "*" * (C - F / 2)\n  			]\n  		else:\n  			matrix = []\n  			impossible = True\n  	else:\n  		stack = []\n  		matrix = []\n  		for j in xrange(C, 1, -1):\n  			if F - 2 * j >= 0 and (R - 2) * j >= F - 2 * j:\n  				stack.append([j, j])\n  \n  		while stack:\n  			elems = stack.pop()\n  			se = sum(elems)\n  			if se == F:\n  				for count in elems:\n  					matrix.append("." * count + "*" * (C - count))\n  				for _ in xrange(R - len(elems)):\n  					matrix.append("*" * C)\n  				matrix[0] = "c" + matrix[0][1:]\n  				break\n  			elif len(elems) < R:\n  				for j in xrange(elems[-1], 1, -1):\n  					if F - se - j >= 0 and (R - len(elems)) * j >= F - se:\n  						stack.append(elems[::] + [j])\n  \n  		if matrix == []:\n  			impossible =True\n  \n  	print "Case #%s:" % (i + 1)\n  	if impossible:\n  		print "Impossible"\n  	else:\n  		for row in matrix:\n  			print row\n <CODESPLIT> 43
T = int(raw_input().strip())\n  \n  for j in xrange(T):\n  	row_num1 = int(raw_input().strip())\n  	for i in xrange(4):\n  		if i + 1 == row_num1:\n  			row1 = set(map(int, raw_input().strip().split(' ')))\n  		else:\n  			raw_input()\n  	row_num2 = int(raw_input().strip())\n  	for i in xrange(4):\n  		if i + 1 == row_num2:\n  			row2 = set(map(int, raw_input().strip().split(' ')))\n  		else:\n  			raw_input()\n  	common = row1 & row2\n  	lc = len(common)\n  	if lc == 1:\n  		stuff = list(common)[0]\n  	elif lc > 1:\n  		stuff = "Bad magician!"\n  	else:\n  		stuff = "Volunteer cheated!"\n  \n  	print "Case #%s: %s" % (j + 1, stuff)\n <CODESPLIT> 43
 \n  \n  f = open(sys.argv[1],'r')\n  \n  num = int(f.readline())\n  \n  def count(z, r, c):\n      return len(z_and_nei(z,r,c))\n  \n  def nei(z, r, c):\n      s = z_and_nei(z, r, c)\n      s -= set(z)\n      return s\n  \n  def z_and_nei(z, r, c):\n      s = set()\n      for x in z:\n          s.add(x)\n          s.add((x[0]-1,x[1]-1))\n          s.add((x[0]-1,x[1]))\n          s.add((x[0]-1,x[1]+1))\n          s.add((x[0],x[1]-1))\n          s.add((x[0],x[1]+1))\n          s.add((x[0]+1,x[1]-1))\n          s.add((x[0]+1,x[1]))\n          s.add((x[0]+1,x[1]+1))\n      o = set()\n      for x in s:\n          if x[0] < 0 or x[0] > r-1 or x[1] < 0 or x[1] > c-1:\n              o.add(x)\n      s-=o\n      return s\n  \n  def find_config(z, r, c, t):\n      if count(z,r,c) == t:\n          return z\n      if count(z,r,c) > t:\n          return []\n      n = nei(z,r,c)\n      for x in n:\n          z.append(x)\n          if find_config(z,r,c,t) != []:\n              return z\n          z.pop()\n      return []\n  \n  for i in range(num):\n      print 'Case #{}:'.format(i+1)\n      r, c, m = [int(x) for x in f.readline().split()]\n      if r*c-m == 1:\n          print 'c' + '*'*(c-1)\n          for i in range(r-1):\n              print '*'*c\n      else:\n          z = find_config([(0,0)], c, r, c*r-m)\n          if z == []:\n              print "Impossible"\n          else:\n              s = z_and_nei(z, c, r)\n              for j in range(r):\n                  for k in range(c):\n                      if j == 0 and k == 0:\n                          print 'c',\n                      elif (k,j) in s:\n                          print '.',\n                      else:\n                          print '*',\n                  print\n  \n  \n <CODESPLIT> 44
 \n  \n  f = open(sys.argv[1],'r')\n  \n  num = int(f.readline())\n  \n  for i in range(num):\n      q1 = int(f.readline())\n      for j in range(4):\n          if j+1 == q1:\n              line1 = f.readline()\n          else:\n              f.readline()\n      q2 = int(f.readline())\n      for j in range(4):\n          if j+1 == q2:\n              line2 = f.readline()\n          else:\n              f.readline()\n      line1 = [int(x) for x in line1.split()]\n      line2 = [int(x) for x in line2.split()]\n      count = 0\n      for x in line1:\n          if x in line2:\n              count += 1\n              y = x\n      if count == 0:\n          print 'Case #{}: Volunteer cheated!'.format(i+1)\n      elif count == 1:\n          print 'Case #{}: {}'.format(i+1, y)\n      else:\n          print 'Case #{}: Bad magician!'.format(i+1)\n <CODESPLIT> 44
 \n  def check_bounds(state, coord):\n      if coord[0] < 0 or coord[1] < 0:\n          return False\n      elif coord[0] > (len(state) - 1):\n          return False\n      elif coord[1] > (len(state[coord[0]]) - 1):\n          return False\n      else:\n          return True\n  \n  def clear(state, coord):\n      for r in range(-1,2):\n          for c in range(-1,2):\n              row = coord[0] + r\n              col = coord[1] + c\n              if check_bounds(state, (row, col)):\n                  state[row][col] = 0\n  \n  def count(state):\n      return sum([sum(x) for x in state])\n  \n  def state_print(state):\n      print("c" + "".join(["*"  if x else "." for x in state[0][1:]]))\n      for line in state[1:]:\n          print("".join(["*"  if x else "." for x in line]))\n  \n  def solve(state, mines):\n      prev_state = deepcopy(state)\n      for row in range(len(state)):\n          for col in range(len(state[row])):\n              new_state = deepcopy(state)\n              clear(new_state, (row, col))\n              c = count(new_state)\n              if(c < mines):\n                  state = prev_state\n              elif( c == mines):\n                  state_print(new_state)\n                  return True\n              else:\n                  if col == len(state[row]) -2:\n                      prev_state = deepcopy(state)\n                  state = new_state\n      print("Impossible")\n      return False\n  \n  \n  \n  \n  def main():\n      filename = "C-small-attempt0.in"\n  \n  \n      inp = open(filename, "rU")\n  \n      n = int(inp.readline().strip())\n  \n      for case in range(1, n + 1):\n          R, C, M = map(int, inp.readline().strip().split(" "))\n          state = [[1 for x in range(C)] for y in range(R)]\n          print("Case #{}:".format(case))\n          solve(state, M)\n  \n  main()\n <CODESPLIT> 45
 \n  filename = "A-small-attempt0.in"\n  \n  inp = open(filename, "rU")\n  \n  n = int(inp.readline().strip())\n  \n  for case in range(1, n+1):\n      gr = lambda x: [list(map(int, inp.readline().strip().split(" "))) for p in range(4)][x-1]\n      ans1 = int(inp.readline().strip())\n      row1 = set(gr(ans1))\n      ans2 = int(inp.readline().strip())\n      row2 = set(gr(ans2))\n      sect = row1 & row2\n      if len(sect) <= 0:\n          print("Case #{}: Volunteer cheated!".format(case))\n      elif len(sect) == 1:\n          print("Case #{}: {}".format(case, sect.pop()))\n      elif len(sect) > 1:\n          print("Case #{}: Bad magician!".format(case))\n      else:\n          print("ERROR")\n <CODESPLIT> 45
 \n  def transpose(result, R, C):\n  	resultSplitted = result.split("\n")\n  	aux = R*[""]\n  	for i in xrange(R):\n  		for j in xrange(C):\n  		    aux[i] += resultSplitted[j][i]\n  		aux[i] += "\n"\n  	result = ""\n  	for item in aux:\n  		result += item + "\n"\n  	return result.strip()\n  \n  \n  inputFileName = sys.argv[1]\n  \n  f = file(inputFileName)\n  fout = file("output.txt", "w")\n  \n  T = int(f.readline())\n  \n  for case in xrange(T):\n  	data = f.readline().strip().split(" ")\n  	R = int(data[0])\n  	C = int(data[1])\n  	M = int(data[2])\n  \n  	result = ""\n  \n  	x = min(R,C)\n  	y = max(R,C)\n  \n  	if M > (y - 2)*x and M != y*x - 1:\n  		N = M - (y-2)*x\n  		if N%2 == 1 or y*x - M == 2:\n  			result = "Impossible"\n  	if result != "Impossible":\n  		i = 0\n  		while M > 0: # 2\n  			if i < y - 2:\n  				if M >= x:\n  					result += x*"*" + "\n"\n  					M -= x\n  					i += 1\n  				elif M <= x - 2:\n  					result += M*"*" + (x - M) * "." + "\n"\n  					M = 0\n  					i += 1\n  				elif i + 2 < y - 1:\n  					result += (M-1)*"*" + (x - M + 1) * "." + "\n" + "*" + (x-1)*"." + "\n"\n  					M = 0\n  					i += 2\n  				else:\n  					result = "Impossible"\n  					break\n  			else:\n  				if M%2 != 0:\n  					result += x*"*" + "\n"\n  					result += (x-1)*"*" + "c"\n  				else:\n  					n = M/2\n  					result += n*"*" + (x-n)*"." + "\n"\n  					result += n*"*" + (x-n-1)*"." + "c"\n  				M = 0\n  				i += 2\n  					\n  		while i <= y - 1 and result != "Impossible":\n  			if i == y - 1:\n  				result += (x-1)*"." + "c"\n  			else:\n  				result += x*"." + "\n"\n  			i += 1\n  	\n  	if R < C and result != "Impossible":\n  		result = transpose(result, R, C)\n  \n  	fout.write("Case #%d:\n%s\n" %(case + 1, result))\n <CODESPLIT> 46
 \n  inputFileName = sys.argv[1]\n  \n  f = file(inputFileName)\n  fout = file("output.txt", "w")\n  \n  T = eval(f.readline())\n  \n  for case in xrange(T):\n  \n  	A1 = int(f.readline().strip())\n  \n  	for i in xrange(4):\n  		if i == A1 - 1:\n  			possibles1 = f.readline().strip().split(" ")\n  		else:\n  			f.readline().strip().split(" ")\n  \n  	A2 = int(f.readline().strip())\n  \n  	for i in xrange(4):\n  		if i == A2 - 1:\n  			possibles2 = f.readline().strip().split(" ")\n  		else:\n  			f.readline().strip().split(" ")\n  \n  	final = []\n  	for item in possibles2:\n  		if item in possibles1:\n  			final.append(item)\n  \n  	if len(final) == 0:	\n  		fout.write("Case #%d: Volunteer cheated!\n" %(case + 1))\n  	elif len(final) == 1:\n  		fout.write("Case #%d: %s\n" %(case + 1, final[0]))\n  	else:\n  		fout.write("Case #%d: Bad magician!\n" %(case + 1))\n <CODESPLIT> 46
 \n  \n  EOL = "\n"\n  \n  \n  def is_equal_approx(x, y, epsilon=1e-6):\n      """Returns True iff y is within relative or absolute 'epsilon' of x.\n      \n      By default, 'epsilon' is 1e-6.\n      """\n      if -epsilon <= x - y <= epsilon:\n          return True\n  \n      if -epsilon <= x <= epsilon or -epsilon <= y <= epsilon:\n          return False\n  \n      return (-epsilon <= (x - y) / x <= epsilon\n          or -epsilon <= (x - y) / y <= epsilon)\n    \n  def read_syms(fd):\n      """Read a line of whitespace separated symbols."""\n      return fd.readline().strip().split()\n  \n  def read_ints(fd):\n      """Read a line of whitespace separated integers."""\n      return [int(p) for p in read_syms(fd)]\n  \n  def read_floats(fd):\n      """Read a line of whitespace separated floats."""\n      return [float(p) for p in read_syms(fd)]\n  \n  \n  class Mtrx(object):\n      """A matrix object."""\n      \n      def __init__(self, rows, cols, data):\n          assert len(data) == rows * cols\n          self.rows = rows\n          self.cols = cols\n          self.data = data\n          \n      def cell(self, r, c):\n          return self.data[r * self.cols + c]\n      \n      def getrow(self, i):\n          return [self.cell(i, c) for c in xrange(self.cols)]\n  \n      def getcol(self, i):\n          return [self.cell(c, i) for c in xrange(self.rows)]\n      \n      @classmethod\n      def readfromfile(cls, fd, readfunc, rows=None, cols=None):\n          """Read matrix from file, assuming first line at location is `R C`.\n          \n          Return a new Mtrx object. Reading values is performed by the `readfunc`.\n          Pre-determined size can be passed using `rows` and `cols`.\n          """\n          data = []\n          if rows is None:\n              assert cols is None\n              rows, cols = read_ints(fd)\n          else:\n              assert cols is not None\n          for _ in range(rows):\n              line = readfunc(fd)\n              assert len(line) == cols\n              data.extend(line)\n          return Mtrx(rows, cols, data)\n              \n      @classmethod\n      def read_int_matrix(cls, fd, rows=None, cols=None):\n          return cls.readfromfile(fd, read_ints, rows, cols)\n              \n      @classmethod\n      def read_sym_matrix(cls, fd, rows=None, cols=None):\n          return cls.readfromfile(fd, read_syms, rows, cols)\n              \n      def __str__(self):\n          res = ""\n          for i in xrange(self.rows):\n              res += str(self.getrow(i)) + EOL\n          return res\n      \n      def __repr__(self):\n          return "{}({}, {}, {})".format(self.__class__.__name__, self.rows,\n                                         self.cols, self.data)\n  \n  \n  cachetotals = 0\n  cachemisses = 0\n  \n  def statreset():\n      global cachemisses, cachetotals\n      cachemisses = 0\n      cachetotals = 0\n  \n  class memoizeit(object):\n      """Decorator. Caches a function's return value each time it is called.\n      \n      If called later with the same arguments, the cached value is returned \n      (not reevaluated).\n      """\n      \n      def __init__(self, func):\n          self.func = func\n          self.cache = {}\n          \n      def __call__(self, *args):\n          \n          global cachetotals, cachemisses\n          cachetotals += 1\n          \n          try:\n              return self.cache[args]\n          except KeyError:\n              \n              cachemisses += 1\n              \n              value = self.func(*args)\n              self.cache[args] = value\n              return value\n          except TypeError:\n  \n              cachemisses += 1\n  \n              return self.func(*args)\n      \n      @property\n      def __name__(self):\n          return self.func.__name__\n      \n      def __get__(self, obj, objtype):\n          """Support instance methods."""\n          return functools.partial(self.__call__, obj)\n  \n  \n  class timeit(object):\n      """Decorator that times a function.\n      \n      When function ends, print name, runtime, return value and cache stats.\n      """\n      \n      def __init__(self, func):\n          self.func = func\n          \n      def __call__(self, *args):\n          start = time.time()\n          value = self.func(*args)\n          delta = time.time() - start\n          cachedata = (1 - cachemisses/(cachetotals * 1.0)) if \\n              cachetotals else 0\n          print self.func.__name__, "{:7.3f}s, (res: {}, cache: {:.2%})".format(\n              delta, value, cachedata)\n          return value\n      \n      def __get__(self, obj, objtype):\n          return functools.partial(self.__call__, obj)\n  \n  \n  def read_input(filename):\n      data = []\n      with open(filename, "r") as f:\n          cases = read_ints(f)[0]\n          for _ in xrange(cases):\n              case = {}\n              case["R"], case["C"], case["M"] = read_ints(f)\n              data.append(case)\n      return data\n  \n  def make_output(fname, output):\n      CASE_PRFX = "Case #%s: "\n      fname = fname + time.strftime("%H%M%S") + ".out"\n      with open(fname, "w") as f:\n          restext = []\n          print "Output content ==============="\n          for i, outdata in enumerate(output):\n              line = CASE_PRFX % (i + 1,) + EOL + str(outdata) + EOL\n              print line,\n              restext.append(line)\n          print "=" * 30\n          f.writelines(restext)\n  \n  \n  MINE = "*"\n  CLICK = "c"\n  UNK = "."\n  \n  class Board(object):\n      \n      def __init__(self, r, c):\n          self.rows = r\n          self.cols = c\n          self.edge_row_idx = self.rows - 1\n          self.edge_col_idx = self.cols - 1\n          self.board = [[UNK for _ in xrange(c)] for _ in xrange(r)]\n          self.board[0][0] = CLICK\n  \n      def fill_edge_row(self, m):\n          i = self.edge_col_idx\n          while m > 0 and i >= 0:\n              self.board[self.edge_row_idx][i] = MINE\n              i -= 1\n              m -= 1\n          self.edge_row_idx -= 1\n  \n      def fill_edge_col(self, m):\n          i = self.edge_row_idx\n          while m > 0 and i >= 0:\n              self.board[i][self.edge_col_idx] = MINE\n              i -= 1\n              m -= 1\n          self.edge_col_idx -= 1\n  \n      def __str__(self):\n          return EOL.join(["".join(r) for r in self.board])\n  \n  @memoizeit\n  def is_stage_solvable(rows, cols, mines):\n      """Return True iff stage is solvable. \n      Also return fill instruction:\n      0 if impossible/dontcare, 1 to fill row, 2 to fill column, \n      3 for row special (most in the row), 4 for col special (most in the col)\n      """\n      rc = rows * cols\n      \n      if mines == rc:\n          return False, 0\n  \n      if rows == 1:\n          return mines <= rc - 1, 2\n      if cols == 1:\n          return mines <= rc - 1, 1\n      \n      if mines == rc - 1:\n          return True, 1  # doesn't matter what to fill\n      \n      if mines > rc - 4:\n          return False, 0\n      \n      if rows == 2:\n          return (False, 0) if mines == 1 else (True, 2)\n      if cols == 2:\n          return (False, 0) if mines == 1 else (True, 1)\n          \n      if rows <= cols:\n          if mines >= rows:\n              return True, 2\n          if mines == rows - 1:\n              if mines == cols - 1:\n                  if rows == 3:\n                      return False, 0\n                  return True, 4 # L shape fill, most in the column\n              else:\n                  return True, 1 # fill row\n          return True, 2 \n      else:\n          if mines >= cols:\n              return True, 1\n          if mines == cols - 1:\n              if mines == rows - 1:\n                  if cols == 3:\n                      return False, 0\n                  return True, 3 # L shape fill, most in the row\n              else:\n                  return True, 2 # fill column\n          return True, 1 \n  \n  @timeit\n  def solveit(case):\n      rows = case["R"]\n      cols = case["C"]\n      mines = case["M"]\n      \n      b = Board(rows, cols)\n      r, c, m = rows, cols, mines\n      \n      while m >= 0:\n          okgo, howtofill = is_stage_solvable(r, c, m)\n          if not okgo:\n              return "Impossible"\n          if howtofill == 1: # fill row\n              b.fill_edge_row(m)\n              if m <= c:\n                  break # fill and done\n              m -= c\n              r -= 1\n          elif howtofill == 2: # fill column\n              b.fill_edge_col(m)\n              if m <= r:\n                  break # fill and done\n              m -= r\n              c -= 1\n          elif howtofill == 3: # L shape fill, most in the row\n              b.fill_edge_row(m - 1)\n              b.fill_edge_col(1)\n              break # fill and done\n          elif howtofill == 4: # L shape fill, most in the column\n              b.fill_edge_col(m - 1)\n              b.fill_edge_row(1)\n              break # fill and done\n          else:\n              assert False\n  \n      return str(b) \n  \n  \n  \n  @timeit\n  def main(fname):\n      data = read_input(fname)\n      output = []\n      for case in data:\n          statreset() # reset cache stats\n          res = solveit(case)\n          output.append(res)\n      make_output(fname, output)\n  \n  \n  if __name__ == '__main__':\n      main("C-small-attempt0.in")\n <CODESPLIT> 47
 \n  \n  EOL = "\n"\n  \n  \n  def is_equal_approx(x, y, epsilon=1e-6):\n      """Returns True iff y is within relative or absolute 'epsilon' of x.\n      \n      By default, 'epsilon' is 1e-6.\n      """\n      if -epsilon <= x - y <= epsilon:\n          return True\n  \n      if -epsilon <= x <= epsilon or -epsilon <= y <= epsilon:\n          return False\n  \n      return (-epsilon <= (x - y) / x <= epsilon\n          or -epsilon <= (x - y) / y <= epsilon)\n    \n  def read_syms(fd):\n      """Read a line of whitespace separated symbols."""\n      return fd.readline().strip().split()\n  \n  def read_ints(fd):\n      """Read a line of whitespace separated integers."""\n      return [int(p) for p in read_syms(fd)]\n  \n  def read_floats(fd):\n      """Read a line of whitespace separated floats."""\n      return [float(p) for p in read_syms(fd)]\n  \n  class Mtrx(object):\n      """A matrix object."""\n      \n      def __init__(self, rows, cols, data):\n          assert len(data) == rows * cols\n          self.rows = rows\n          self.cols = cols\n          self.data = data\n          \n      def cell(self, r, c):\n          return self.data[r * self.cols + c]\n      \n      def getrow(self, i):\n          return [self.cell(i, c) for c in xrange(self.cols)]\n  \n      def getcol(self, i):\n          return [self.cell(c, i) for c in xrange(self.rows)]\n      \n      @classmethod\n      def readfromfile(cls, fd, readfunc, rows=None, cols=None):\n          """Read matrix from file, assuming first line at location is `R C`.\n          \n          Return a new Mtrx object. Reading values is performed by the `readfunc`.\n          Pre-determined size can be passed using `rows` and `cols`.\n          """\n          data = []\n          if rows is None:\n              assert cols is None\n              rows, cols = read_ints(fd)\n          else:\n              assert cols is not None\n          for _ in range(rows):\n              line = readfunc(fd)\n              assert len(line) == cols\n              data.extend(line)\n          return Mtrx(rows, cols, data)\n              \n      @classmethod\n      def read_int_matrix(cls, fd, rows=None, cols=None):\n          return cls.readfromfile(fd, read_ints, rows, cols)\n              \n      @classmethod\n      def read_sym_matrix(cls, fd, rows=None, cols=None):\n          return cls.readfromfile(fd, read_syms, rows, cols)\n              \n      def __str__(self):\n          res = ""\n          for i in xrange(self.rows):\n              res += str(self.getrow(i)) + EOL\n          return res\n      \n      def __repr__(self):\n          return "{}({}, {}, {})".format(self.__class__.__name__, self.rows,\n                                         self.cols, self.data)\n  \n               \n  cachetotals = 0\n  cachemisses = 0\n  \n  def statreset():\n      global cachemisses, cachetotals\n      cachemisses = 0\n      cachetotals = 0\n  \n  class memoizeit(object):\n      """Decorator. Caches a function's return value each time it is called.\n      \n      If called later with the same arguments, the cached value is returned \n      (not reevaluated).\n      """\n      \n      def __init__(self, func):\n          self.func = func\n          self.cache = {}\n          \n      def __call__(self, *args):\n          \n          global cachetotals, cachemisses\n          cachetotals += 1\n          \n          try:\n              return self.cache[args]\n          except KeyError:\n              \n              cachemisses += 1\n              \n              value = self.func(*args)\n              self.cache[args] = value\n              return value\n          except TypeError:\n  \n              cachemisses += 1\n  \n              return self.func(*args)\n      \n      @property\n      def __name__(self):\n          return self.func.__name__\n      \n      def __get__(self, obj, objtype):\n          """Support instance methods."""\n          return functools.partial(self.__call__, obj)\n  \n  class timeit(object):\n      """Decorator that times a function.\n      \n      When function ends, print name, runtime, return value and cache stats.\n      """\n      \n      def __init__(self, func):\n          self.func = func\n          \n      def __call__(self, *args):\n          start = time.time()\n          value = self.func(*args)\n          delta = time.time() - start\n          cachedata = (1 - cachemisses/(cachetotals * 1.0)) if \\n              cachetotals else 0\n          print self.func.__name__, "{:7.3f}s, (res: {}, cache: {:.2%})".format(\n              delta, value, cachedata)\n          return value\n      \n      def __get__(self, obj, objtype):\n          return functools.partial(self.__call__, obj)\n  \n <CODESPLIT> 47
 \n  \n  \n  directions = list(itertools.product([1, 0, -1], [1, 0, -1]))\n  def count_neighbors(table, r, c):\n      cols = len(table[0])\n      rows = len(table)\n      return sum(table[r + x][c + y] == "*" for x, y in directions \n                  if r + x >= 0 and c + y >= 0 and cols > c + y and rows > r + x)\n  \n  def is_valid(table):\n      cols = len(table[0])\n      rows = len(table)\n      for r in xrange(rows):\n          for c in xrange(cols):\n              has_zero = any(table[r + x][c + y] == 0 for x, y in directions \n                              if r + x >= 0 and c + y >= 0 and cols > c + y and rows > r + x)\n              if table[r][c] != "*" and not has_zero:\n                  return False\n  \n      return True\n  \n  \n  def draw_table(table, hide=False):\n      cols = len(table[0])\n      rows = len(table)\n      ascii_table = ""\n      for r in xrange(rows):\n          for c in xrange(cols):\n              if table[r][c] != "*":\n                  ch = "c" if r == 0 and c == 0 else "."\n                  table[r][c] = count_neighbors(table, r, c) if not hide else ch\n  \n              ascii_table += str(table[r][c])\n  \n          ascii_table += "\n"\n  \n      return ascii_table[:-1]\n  \n  def solve(R, C, M):\n      r = c = 0\n      current_mines = R * C\n      table = [["*"] * C for k in xrange(R)]\n      while M < current_mines:\n          if table[r][c] == '*':\n              table[r][c] = "."\n              current_mines -= 1\n  \n          if current_mines > M and r + 1 < R and table[r+1][c] == "*":\n              table[r+1][c] = "."\n              current_mines -= 1\n  \n          draw_table(table)\n          c += 1\n          if c >= C:\n              c = 0\n              r += 1\n  \n      return table\n  \n  for i in xrange(readint()):\n      R, C, M = readintarray()\n  \n      print "Case #%d:" % (i + 1)\n      if M < (R * C) - 1:\n          table = solve(R, C, M)\n          if is_valid(table):\n              print draw_table(table, hide=True)\n          else:\n              table = solve(C, R, M)\n              rotated = [["*"] * C for k in xrange(R)]\n              for r in xrange(R - 1, -1, -1):\n                  for c in xrange(C):\n                      rotated[R - r - 1][c] = table[c][r]\n  \n              print draw_table(rotated, hide=True) if is_valid(rotated) else "Impossible"\n  \n      elif M == R * C:\n          print "Impossible"\n  \n      else:\n          table = [["*"] * C for k in xrange(R)]\n          table[0][0] = '.'\n          print draw_table(table, hide=True)\n <CODESPLIT> 48
 \n  def readint():\n      return int(sys.stdin.readline())\n  \n  def readintarray():\n      return map(int, sys.stdin.readline().strip().split())\n  \n  def readpairs(start=0):\n      elems = readintarray()[start:]\n      return [elems[i:i+2] for i in xrange(0, len(elems), 2)]\n  \n  def readstring():\n      return sys.stdin.readline()[:-1]\n  \n <CODESPLIT> 48
 \n  \n  ncases = int(sys.stdin.readline().strip())\n  \n  def print_board(r, c, free):\n      board = {}\n      for row in range(0, r):\n          board[row] = {}\n          for col in range(0, c):\n              board[row][col] = '*'\n  \n      pending = free\n  \n      if free == 1:\n          board[0][0] = '.'\n      elif r == 1 or c == 1:\n          for row in range(0, r):\n              for col in range(0, c):\n                  if pending > 0:\n                      pending -= 1\n                      board[row][col] = '.'\n      else:\n          for row in range(0,2):\n              for col in range(0,2):\n                  board[row][col] = '.'\n          pending -= 4\n          col=2\n          row=2\n  \n          while pending >= 2 and (col<c or row<r):\n              if pending >= 2 and col<c:\n                  board[0][col] = '.'\n                  board[1][col] = '.'\n                  col += 1\n                  pending -= 2\n              if pending >= 2 and row<r:\n                  board[row][0] = '.'\n                  board[row][1] = '.'\n                  row += 1\n                  pending -= 2\n  \n          for row in range(2, r):\n              for col in range(2, c):\n                  if pending > 0:\n                      board[row][col] = '.'\n                      pending -= 1\n  \n      board[0][0] = 'c'\n  \n      for row in range(0, r):\n          line = ''\n          for col in range(0, c):\n              line += board[row][col]\n          print(line)\n  \n  \n  for t in range(1, ncases+1):\n      values = sys.stdin.readline().strip().split()\n      r = int(values[0])\n      c = int(values[1])\n      m = int(values[2])\n  \n      cells = r * c\n      free = cells - m\n  \n      possible = False\n  \n      if r == 1 or c == 1:\n          if free >= 1:\n              possible = True\n      elif r == 2 or c == 2:\n          if free == 1 or (free >= 4 and free%2 == 0):\n              possible = True\n      else:\n          if free == 1 or (free >= 4 and free != 5 and free != 7):\n              possible = True\n  \n      print("Case #{0}:".format(t))\n  \n      if possible:\n          print_board(r, c, free)\n      else:\n          print("Impossible")\n <CODESPLIT> 49
 \n  \n  ncases = int(sys.stdin.readline().strip())\n  \n  def read_arrangement():\n      arr = []\n      for row in range(0,4):\n          arr.append(sys.stdin.readline().strip().split(' '))\n      return arr\n  \n  for t in range(1, ncases+1):\n      answer1 = int(sys.stdin.readline().strip())\n      arrang1 = read_arrangement()\n      answer2 = int(sys.stdin.readline().strip())\n      arrang2 = read_arrangement()\n  \n      row1 = arrang1[answer1-1]\n      row2 = arrang2[answer2-1]\n  \n      intersect = set(row1) & set(row2)\n  \n      if len(intersect) == 1:\n          print("Case #{0}: {1}".format(t, intersect.pop()))\n      elif len(intersect) == 0:\n          print("Case #{0}: Volunteer cheated!".format(t))\n      else:\n          print("Case #{0}: Bad magician!".format(t))\n <CODESPLIT> 49
 \n  def read_word(f):\n      return next(f).strip()\n  \n  def read_int(f, b=10):\n      return int(read_word(f), b)\n  \n  def read_letters(f):\n      return list(read_word(f))\n  \n  def read_digits(f, b=10):\n      return [int(x, b) for x in read_letters(f)]\n  \n  def read_words(f, d=' '):\n      return read_word(f).split(d)\n  \n  def read_ints(f, b=10, d=' '):\n      return [int(x, b) for x in read_words(f, d)]\n  \n  def read_floats(f, d=' '):\n      return [float(x) for x in read_words(f, d)]\n  \n  def read_arr(f, R, reader=read_ints, *args, **kwargs):\n      return [reader(f, *args, **kwargs) for i in range(R)]\n  \n  def solve(solver, fn, out_fn=None):\n      in_fn = fn + '.in'\n      if out_fn is None:\n          out_fn = fn + '.out'\n      with open(in_fn, 'r') as fi:\n          with open(out_fn, 'w') as fo:\n              T = read_int(fi)\n              for i in range(T):\n                  case = read_case(fi)\n                  res = solver(case)\n                  write_case(fo, i, res)\n  \n  \n  def read_case(f):\n      return read_ints(f)\n  \n  def write_case(f, i, res):\n      f.write('Case #%d: '%i)\n      if isinstance(res, list):\n          res[0][0] = 'c'\n          res = '\n'.join(''.join(c for c in r) for r in res)\n      f.write('\n%s'%res)\n      f.write('\n')\n  \n  \n  def solve_small(case):\n      (R, C, M) = case\n      if R == 1:\n          return 'c' + '.'*(C-M-1) + '*'*M\n      if C == 1:\n          return '\n'.join(['c'] + ['.']*(R-M-1) + ['*']*M)\n      m = R*C - M\n      res = [['*']*C for r in range(R)]\n      if m == 1:\n          return res\n      for r in range(2, R+1):\n          c = m // r\n          z = m % r\n          if c < 2 or c + (z>0) > C:\n              continue\n          if z == 1 and (r < 3 or c < 3):\n              continue\n          for x in range(r):\n              for y in range(c):\n                  res[x][y] = '.'\n          for y in range(z):\n              res[y][c] = '.'\n          if z == 1:\n              res[z][c] = '.'\n              res[r-1][c-1] = '*'\n          return res\n      return 'Impossible'\n  \n  def solve_large(case):\n      return solve_small(case)\n  \n  DEBUG = 'f'\n  \n <CODESPLIT> 50
 \n  def read_word(f):\n      return next(f).strip()\n  \n  def read_int(f, b=10):\n      return int(read_word(f), b)\n  \n  def read_letters(f):\n      return list(read_word(f))\n  \n  def read_digits(f, b=10):\n      return [int(x, b) for x in read_letters(f)]\n  \n  def read_words(f, d=' '):\n      return read_word(f).split(d)\n  \n  def read_ints(f, b=10, d=' '):\n      return [int(x, b) for x in read_words(f, d)]\n  \n  def read_floats(f, d=' '):\n      return [float(x) for x in read_words(f, d)]\n  \n  def read_arr(f, R, reader=read_ints, *args, **kwargs):\n      return [reader(f, *args, **kwargs) for i in range(R)]\n  \n  def solve(solver, fn, out_fn=None):\n      in_fn = fn + '.in'\n      if out_fn is None:\n          out_fn = fn + '.out'\n      with open(in_fn, 'r') as fi:\n          with open(out_fn, 'w') as fo:\n              T = read_int(fi)\n              for i in range(T):\n                  case = read_case(fi)\n                  res = solver(case)\n                  write_case(fo, i, res)\n  \n  \n  def read_case(f):\n      R1 = read_int(f)\n      Q1 = read_arr(f, 4)\n      R2 = read_int(f)\n      Q2 = read_arr(f, 4)\n      return (R1, Q1, R2, Q2)\n  \n  def write_case(f, i, res):\n      f.write('Case #%d: '%i)\n      f.write('%s'%res)\n      f.write('\n')\n  \n  \n  def solve_small(case):\n      (R1, Q1, R2, Q2) = case\n      s = set(Q1[R1-1]) & set(Q2[R2-1])\n      if len(s) == 0:\n          return 'Volunteer cheated!'\n      if len(s) == 1:\n          return s.pop()\n      return 'Bad magician!'\n  \n  def solve_large(case):\n      return solve_small(case)\n  \n  DEBUG = 'i'\n  \n <CODESPLIT> 50
__author__ = 'jrokicki'\n  \n  RL = lambda: sys.stdin.readline().strip()\n  IA = lambda: map(int, RL().split(" "))\n  LA = lambda: map(long, RL().split(" "))\n  FA = lambda: map(float, RL().split(" "))\n  \n  T = int(sys.stdin.readline())\n  \n  def clear(R,C,b, x, y):\n      b = b[:]\n      n = 0\n      for i in range(max(0,x-1), min(R,x+2)):\n          for j in range(max(0,y-1), min(C, y+2)):\n              if b[C*i+j] == '*':\n                  n += 1\n                  b = b[:C*i+j] + '.' + b[C*i+j+1:]\n      return b, n\n  mem = dict()\n  def pb(R,C,b):\n      for x in range(R):\n          print b[x*C:x*C+C]\n  \n  def board(R,C,b,x,y,M,m):\n      global mem\n      print x\n      key = (R,C,b,M,x,y,m)\n      if key in mem: return mem[key]\n      if x >= R or y >= C:\n          mem[key] = None\n      else:\n          lb = b\n          n = 0\n          good = False\n          for i in range(y,C):\n              nb,nn = clear(R,C, lb, x, i)\n              n += nn\n              if m - n - M == 0:\n                  mem[key] = nb\n                  good = True\n                  break\n              elif m - n - M < 0:\n                  break\n              lb = bb\n          mem[key] = board(R,C,bb,M,x+1,0,m-n)\n      return mem[key]\n  \n  for CASE in range(T):\n      R,C,M = IA()\n      IMPOSSIBLE = "Impossible"\n  \n      b = ""\n      cleared = R*C-M\n      for x in range(R):\n          b += "*" * C\n      if M == R*C-1:\n          b = "c" + b[1:]\n          answer = b\n      else:\n          good = False\n          x,y = 0,0\n          q = [(b,0,0,0)]\n          mem = {}\n          while not good and q:\n              board,total_cleared,x,y = q.pop(0)\n              if (board,total_cleared,x,y) in mem:\n                  continue\n              mem[(board,total_cleared,x,y)] = True\n              if x >= R: continue\n              if y >= C:\n                  q.append((last_board,total_cleared,x+1,0))\n                  continue\n              last_board = board\n              new_board, cleared_mines = clear(R,C,last_board,x,y)\n              total_cleared += cleared_mines\n  \n              if total_cleared == cleared:\n                  good = True\n                  last_board = new_board\n                  q = []\n                  break\n              elif total_cleared - cleared == -1:\n                  q.append((new_board,total_cleared,x,y+1))\n                  q.append((new_board,total_cleared,x+1,0))\n                  q.append((last_board,total_cleared-cleared_mines,x+1,0))\n              elif total_cleared > cleared:\n                  q.append((last_board,total_cleared-cleared_mines,x+1,0))\n              else:\n                  q.append((new_board,total_cleared,x,y+1))\n              last_board = new_board\n          if good:\n              answer = last_board\n          else:\n              answer = None\n      if not answer:\n          answer = "Impossible"\n      else:\n          b = ""\n          for x in range(R):\n              b += answer[x*C:x*C+C] + "\n"\n          answer = "c" + b[1:-1]\n      print "Case #%d:\n%s" % (CASE+1, answer)\n  \n <CODESPLIT> 51
__author__ = 'jrokicki'\n  \n  RL = lambda: sys.stdin.readline().strip()\n  IA = lambda: map(int, RL().split(" "))\n  LA = lambda: map(long, RL().split(" "))\n  \n  T = int(sys.stdin.readline())\n  \n  for CASE in range(T):\n      g1 = IA()[0]-1\n      board1 = []\n      for i in range(4):\n          board1.append(IA())\n      g2 = IA()[0]-1\n      board2 = []\n      for i in range(4):\n          board2.append(IA())\n  \n      r1 = board1[g1]\n      r2 = board2[g2]\n  \n      answer = set(r1).intersection(r2)\n      if len(answer) > 1:\n          answer = "Bad magician!"\n      elif len(answer) == 0:\n          answer = "Volunteer cheated!"\n      else:\n          answer = list(answer)[0]\n  \n      print "Case #%d: %s" % (CASE+1, answer)\n  \n <CODESPLIT> 51
class Sweeper(object):\n      def __init__(self, r, c, m):\n          self.matrix = [['.' for j in range(0, c)] for i in range(0, r)]\n          self.matrix[0][0] = 'c'\n  \n          self.r = r\n          self.c = c\n          self.m = m\n          self.current_r = r\n          self.current_c = c\n          self.current_m = m\n  \n      def fill_row(self):\n          if self.current_r >= 3 and self.current_m >= self.current_c:\n              for i in range(0, self.current_c):\n                  self.matrix[self.current_r - 1][i] = '*'\n              self.current_r -= 1\n              self.current_m -= self.current_c\n              return True\n          return False\n  \n      def fill_col(self):\n          if self.current_c >= 3 and self.current_m >= self.current_r:\n              for i in range(0, self.current_r):\n                  self.matrix[i][self.current_c - 1] = '*'\n              self.current_c -= 1\n              self.current_m -= self.current_r\n              return True\n          return False\n  \n      def fill_partial(self):\n          if self.current_r >= 3:\n              fill_num = min(self.current_m, self.current_c - 2)\n              for i in range(0, fill_num):\n                  self.matrix[self.current_r - 1][self.current_c - 1 - i] = '*'\n              self.current_m -= fill_num\n              if fill_num > 0:\n                  self.current_r -= 1\n          if self.current_c >= 3:\n              fill_num = min(self.current_m, self.current_r - 2)\n              for i in range(0, fill_num):\n                  self.matrix[self.current_r - 1 - i][self.current_c - 1] = '*'\n              self.current_m -= fill_num\n              if fill_num > 0:\n                  self.current_c -= 1\n          if self.current_m > 0:\n              return False\n          else:\n              return True\n  \n      def fill_special_one(self):\n          if self.current_r * self.current_c == self.current_m + 1:\n              for i in range(0, self.current_r):\n                  for j in range(0, self.current_c):\n                      self.matrix[i][j] = '*'\n              self.matrix[0][0] = 'c'\n              self.current_r = 0\n              self.current_c = 0\n              self.current_m = 0\n              return True\n          return False\n  \n      def fill_special_col(self):\n          if self.current_c == 1 and self.current_r > self.current_m:\n              for i in range(0, self.current_m):\n                  self.matrix[self.current_r - 1 - i][0] = '*'\n              self.matrix[0][0] = 'c'\n              self.current_m = 0\n              self.current_r = 0\n              self.current_c = 0\n              return True\n          return False\n  \n      def fill_special_row(self):\n          if self.current_r == 1 and self.current_c > self.current_m:\n              for i in range(0, self.current_m):\n                  self.matrix[0][self.current_c - 1 - i] = '*'\n              self.matrix[0][0] = 'c'\n              self.current_m = 0\n              self.current_r = 0\n              self.current_c = 0\n              return True\n          return False\n  \n  def print_matrix(matrix):\n      for row in matrix:\n          s = ''\n          for col in row:\n              s += col\n          print s\n  \n      \n  def solve_case(t):\n      r, c, m = [int(num) for num in raw_input().strip().split()]\n      sweeper = Sweeper(r, c, m)\n      print 'Case #%d:' % (t,)\n      if sweeper.fill_special_one() or sweeper.fill_special_col() or sweeper.fill_special_row():\n          print_matrix(sweeper.matrix)\n          return\n      f_result = True\n      while sweeper.current_m > 0 and f_result:\n          f_result = False\n          f_result |= sweeper.fill_row()\n          f_result |= sweeper.fill_col()\n      if sweeper.current_m > 0:\n          sweeper.fill_partial()\n      if sweeper.current_m > 0:\n          print 'Impossible'\n      else:\n          print_matrix(sweeper.matrix)\n  \n  def main():\n      t = int(raw_input().strip())\n      for i in range(1, t + 1):\n          solve_case(i)\n  \n  if __name__ == '__main__':\n      main()\n <CODESPLIT> 52
def solve_case(t):\n      interested_row = int(raw_input().strip())\n      i = 1\n      while i <= 4:\n          row = raw_input()\n          if i == interested_row:\n              first_set = set(row.strip().split())\n          i += 1\n      interested_row = int(raw_input().strip())\n      i = 1\n      while i <= 4:\n          row = raw_input()\n          if i == interested_row:\n              second_set = set(row.strip().split())\n          i += 1\n      ans_set = first_set & second_set\n      if len(ans_set) == 1:\n          print 'Case #%d: %s' % (t, ans_set.pop(),)\n      elif len(ans_set) > 1:\n          print 'Case #%d: Bad magician!' % (t,)\n      else:\n          print 'Case #%d: Volunteer cheated!' % (t,)\n  \n  def main():\n      t = int(raw_input().strip())\n      for i in range(1, t + 1):\n          solve_case(i)\n  \n  if __name__ == '__main__':\n      main()\n <CODESPLIT> 52
 \n  \n  def read_str(): return stdin.readline().rstrip('\n')\n  def read_int(): return int(stdin.readline())\n  def read_ints(): return map(int, stdin.readline().split())\n  def read_floats(): return map(float, stdin.readline().split())\n  \n  \n  def atos(A):\n      return '\n'.join([''.join(row) for row in A])\n      \n  \n  def get_field(r, c):\n      field = [['.'] * c for i in range(r)]\n      field[0][0] = 'c'\n      return field\n      \n      \n  def is_forbidden(i, j):\n      return i == 0 and j == 0 or i == 0 and j == 1 or \\n          i == 1 and j == 0 or i == 1 and j == 1\n      \n      \n  def fill(field, r, c, m):\n      left = m\n      for ii in range(r - 1, -1, -1):\n          i = ii\n          j = c - 1\n          while i < r and j >= 0:\n              if is_forbidden(i, j):\n                  i += 1\n                  j -= 1\n                  continue\n              if left == 0:\n                  return 0\n              field[i][j] = '*'\n              left -= 1\n              \n              i += 1\n              j -= 1\n              \n          if ii == 0:\n              for jj in range(c - 2, 1, -1):\n                  i = ii\n                  j = jj\n                  while i < r and j >= 0:\n                      if is_forbidden(i, j):\n                          i += 1\n                          j -= 1\n                          continue\n                      if left == 0:\n                          return 0\n                      field[i][j] = '*'\n                      left -= 1\n                      \n                      i += 1\n                      j -= 1\n              \n      if r * c == m + 1:\n          if r > 1:\n              field[1][0] = '*'\n          if c > 1:\n              field[0][1] = '*'\n          if r > 1 and c > 1:\n              field[1][1] = '*'\n          return 0\n              \n      return left\n  \n      \n  def solve_case():\n      r, c, m = read_ints()\n      \n      field = get_field(r, c)\n          \n      left = fill(field, r, c, m)\n          \n      return 'Impossible' if left != 0 else atos(field)\n      \n      \n  def main():\n      cases = read_int()\n      for case in range(1, cases + 1):\n          print('Case #{}:\n{}'.format(case, solve_case()))\n  \n          \n  main()\n <CODESPLIT> 53
 \n  def read_str(): return stdin.readline().rstrip('\n')\n  def read_int(): return int(stdin.readline())\n  def read_ints(): return map(int, stdin.readline().split())\n  \n  def read_cards():\n      cards = []\n      for i in range(4):\n          cards.append(read_ints())\n      return cards\n  \n  def main():\n      cases = read_int()\n      for case in range(1, cases + 1):\n          row = read_int() - 1\n          cards = read_cards()\n          candidates1 = set(cards[row])\n          \n          row = read_int() - 1\n          cards = read_cards()\n          candidates2 = set(cards[row])\n          \n          candidates = candidates1.intersection(candidates2)\n          if len(candidates) == 1:\n              ans = list(candidates)[0]\n          elif len(candidates) == 0:\n              ans = 'Volunteer cheated!'\n          else:\n              ans = 'Bad magician!'\n          \n          print('Case #{}: {}'.format(case, ans))\n          \n  main()\n <CODESPLIT> 53
T = int(input())\n  \n  def solve(R,C,M):\n      if R>C:\n          flipboard = solve(C,R,M)\n          if flipboard:\n              return [[flipboard[j][i] for j in range(C)] for i in range(R)]\n          else:\n              return\n      if M==0:\n          board = [['.']*C for i in range(R)]\n          board[-1][-1] = 'c'\n          return board\n      if R == 1:\n          board = ['*' if i<M else '.' for i in range(R*C)]\n          board[-1] = 'c'\n          return [board]\n      if R == 2:\n          if R*C==M+1:\n              board = [['*']*C for i in range(R)]\n              board[-1][-1] = 'c'\n              return board\n          if (M%2) or (M+2)==(R*C):\n              return\n          board = [['*' if i<(M/2) else '.' for i in range(C)] for j in range(R)]\n          board[-1][-1] = 'c'\n          return board\n      if M>=R:\n          subboard = solve(R,C-1,M-R)\n          if subboard:\n              return [['*']+r for r in subboard]\n          return\n      if (R,C,M) == (3,3,2):\n          return\n      k = min(M,C-2)\n      board = [['*']*k+['.']*(C-k)]\n      for i in range(M-k):\n          board.append(['*']+['.']*(C-1))\n      while len(board)<R:\n          board.append(['.']*(C))\n      board[-1][-1] = 'c'\n      return board\n      \n           \n      \n  \n  for case in range(1,T+1):\n      print("Case #",case,": ",sep='')\n      R,C,M = (int(x) for x in input().split())\n      ans = solve(R,C,M)\n      if ans:\n          for r in ans:\n              print(''.join(r))\n      else:\n          print('Impossible')\n  \n  \n <CODESPLIT> 54
T = int(input())\n  for case in range(1,T+1):\n      row1 = int(input())\n      for i in range(1,5):\n          l = input()\n          if i==row1:\n              first = set(int(x) for x in l.split())\n      row2 = int(input())\n      for i in range(1,5):\n          l = input()\n          if i==row2:\n              second = set(int(x) for x in l.split())\n      poss = first & second\n      if len(poss) ==0:\n          ans = 'Volunteer cheated!'\n      elif len(poss) >1:\n          ans = 'Bad magician!'\n      else:\n          ans = min(poss)\n      print("Case #",case,": ",ans,sep = '')\n <CODESPLIT> 54
filename = raw_input("Name of file: ")\n  infile = open(filename, "r")\n  outfile = open(filename + ".out", "w")\n  \n  \n  T = int(infile.readline()[:-1])\n  \n  def addMinesDiagonally(r, c, m):\n      field = []\n      for i in range (r):\n          row = []\n          for j in range(c):\n              row += ["."]\n          field += [row]\n          \n      for i in range (r + c):\n          ver = min (i, r - 1)\n          hor = max (0, 1 + i - r)\n          while ver >= 0 and hor <= c - 1 and m > 0:\n              if m == 1 and hor == c - 2 and ver == r - 2:\n                  ver -= 1\n                  hor += 1\n              field[ver][hor] = "*"\n              ver -= 1\n              hor += 1\n              m -= 1\n          \n      return field\n  \n  def isPossible(field):\n      if field[-1][-1] != ".":\n          return False\n      up = True\n      left = True\n      diag = True\n      if len(field) > 1 and field[-2][-1] != ".":\n              up = len(field[-1]) <= 1\n      if len(field[-1]) > 1 and field[-1][-2] != ".":\n              left = len(field) <= 1\n      if len(field) > 1 and len(field[-1]) > 1 and field[-2][-2] != ".":\n          diag = False\n      return (up and left and diag) or \\n             ((not up) and (not left) and (not diag))\n      \n  \n  for t in range(1, T + 1):\n      items = infile.readline()[:-1].split(" ")\n      r = int(items[0])\n      c = int(items[1])\n      m = int(items[2])\n      field = addMinesDiagonally(r, c, m)\n      if isPossible(field):\n          field[-1][-1] = "c"\n          s = ""\n          for line in field:\n              for cell in line:\n                  s += cell\n              s += "\n"\n          outfile.write("Case #%d:\n%s\n" %(t, s[:-1]))\n      else:\n          s = "IMPOSSIBLE!!!!\n"\n          for line in field:\n              for cell in line:\n                  s += cell\n              s += "\n"\n          outfile.write("Case #%d:\n%s\n" %(t, s[:-1]))\n      \n          \n      \n  \n  outfile.close()\n  infile.close()\n <CODESPLIT> 55
filename = raw_input("Name of file: ")\n  f = open(filename, "r")\n  o = open(filename + ".out", "w")\n  \n  \n  T = int(f.readline()[:-1])\n  \n  many_possible = "Bad magician!"\n  zero_possible = "Volunteer cheated!"\n  \n  for t in range(1, T + 1):\n      first = int(f.readline()[:-1]) - 1\n      grid1 = []\n      for i in range(4):\n          grid1 += [f.readline()[:-1].split(" ")]\n          \n      second = int(f.readline()[:-1]) - 1\n      grid2 = []\n      for i in range(4):\n          grid2 += [f.readline()[:-1].split(" ")]\n  \n      possible = []\n      for num in grid1[first]:\n          if num in grid2[second]:\n              possible += [num]\n  \n      if len(possible) == 1:\n          o.write("Case #%d: %s\n" %(t, possible[0]))\n      elif len(possible) == 0:\n          o.write("Case #%d: %s\n" %(t, zero_possible))\n      else:\n          o.write("Case #%d: %s\n" %(t, many_possible))\n          \n      \n  \n  o.close()\n  f.close()\n <CODESPLIT> 55
 \n  def DrawMines( R, C, M, Flip, gridMines, sideMines, bottomMines ):\n    x = []\n    numSpaces = 0\n    numMines = 0\n  \n    gridRows = max( R-2, 0 )\n    gridCols = max( C-2, 0 )\n  \n    for r in xrange( 0, R ):\n      x.append( [] )\n      for c in xrange( 0, C ):\n        x[ r ].append( '.' )\n        numSpaces += 1\n  \n    if gridMines > 0:\n      for r in xrange( 0, gridRows ):\n        if numMines >= gridMines:\n          break;\n        for c in xrange( 0, gridCols ):\n          x[ r ][ c ] = '*'\n          numMines += 1\n          numSpaces -= 1\n          if numMines >= gridMines:\n            break;\n  \n    for r in xrange( 0, R ):\n      if sideMines <= 0:\n        break\n      for c in xrange( gridCols, C ):\n        x[ r ][ c ] = '*'\n        numMines += 1\n        numSpaces -= 1\n        sideMines -= 1\n        if sideMines <= 0:\n          break\n  \n    for c in xrange( 0, C ):\n      if bottomMines <= 0:\n        break\n      for r in xrange( gridRows, R ):\n        x[ r ][ c ] = '*'\n        numMines += 1\n        numSpaces -= 1\n        bottomMines -= 1\n        if bottomMines <= 0:\n          break\n      \n    x[ R - 1][ C - 1 ] = 'c'\n    \n    if numMines != M and ( R * C ) - M != 1:\n      print "ERROR!!!!!!!!!!!!!!!!!!!!!!!!"\n      print ( R * C ) - M\n  \n  \n    o = ""\n  \n    if Flip:\n      for c in xrange( 0, C ):\n        for r in xrange( 0, R ):\n           o += x[ r ][ c ]\n        o += '\n'\n    else:\n      for r in xrange( 0, R ):\n        for c in xrange( 0, C ):\n           o += x[ r ][ c ]\n        o += '\n'\n  \n    return o[:-1] #strip the extra newline\n  \n  \n  \n  \n  numCases = input()\n  for case in xrange( 1, numCases + 1 ):\n    R, C, M = [int(x) for x in raw_input().split()]\n  \n    Output = None\n  \n    Flip = C > R\n    if Flip:\n      temp = R\n      R = C\n      C = temp\n  \n    NonMines = ( R * C ) - M\n    if ( NonMines == 0 ):\n      Output = "Impossible"\n    elif ( C == 1 ):\n      gridMines = 0\n      extraMines = M - gridMines\n      Output = DrawMines( R, C, M, Flip, gridMines, extraMines, 0 )\n    elif ( NonMines == 2 or  NonMines == 3 ):\n      Output = "Impossible"\n    else:\n      maxGridCols = max( 0, C - 2 )\n      maxGridRows = max( 0, R - 2 )\n      gridMines = min( M, maxGridCols * maxGridRows )\n      extraMines = M - gridMines\n      extraPairs = ( extraMines + 1 ) / 2\n      extraPairsSide = max( min( extraPairs, maxGridRows - 1 ), 0 )\n      extraPairsBottom = max( min( extraPairs - extraPairsSide, maxGridCols - 1 ), 0 )\n      safeExtraPairs = extraPairsSide + extraPairsBottom\n      blockingPairsSide = max( min( extraPairs - safeExtraPairs, 1 ), 0 )\n      blockingPairsBottom = max( min( extraPairs - blockingPairsSide - safeExtraPairs, 1 ), 0 )\n      blockingPairs = blockingPairsSide + blockingPairsBottom\n      totalPairs = safeExtraPairs + blockingPairs\n  \n      \n      if ( gridMines > 0 and extraMines % 2 != 0 and blockingPairs == 0 ):\n        extraMines += 1\n        gridMines -= 1\n  \n      if ( NonMines == 1 ):\n        if extraMines % 2 != 0:\n          extraMines += 1\n        blockingPairsSide += 1\n        blockingPairsBottom += 1\n      \n      if extraMines % 2 == 0:\n        sideMines = 2 * ( extraPairsSide + blockingPairsSide )\n        bottomMines = 2 * ( extraPairsBottom + blockingPairsBottom )\n        Output = DrawMines( R, C, M, Flip, gridMines, sideMines, bottomMines )\n      else:\n        Output = "Impossible"\n  \n    output = "\n" + Output\n    print 'Case #' + str( case ) + ': ' + str( output )\n <CODESPLIT> 56
 \n  numCases = input()\n  for case in range( 1, numCases + 1 ):\n    row1 = input()\n    grid1 = []\n    for i in range( 0, 4 ):\n      grid1.append( raw_input().split() )\n  \n    cards = grid1[ row1 - 1 ]\n  \n    row2 = input()\n    grid2 = []\n    for i in range( 0, 4 ):\n      grid2.append( raw_input().split() )\n  \n    bad = True\n        \n    cards2 = grid2[ row2 - 1 ]\n  \n    numPossibleAnswers = 0\n    for card in cards:\n      for card2 in cards2:\n        if ( card == card2 ):\n          if numPossibleAnswers == 0:\n            output = card\n          numPossibleAnswers += 1\n          break\n  \n    if numPossibleAnswers == 0:\n      output = "Volunteer cheated!"\n    elif numPossibleAnswers > 1:\n      output = "Bad magician!"\n  \n    print 'Case #' + str( case ) + ': ' + str( output )\n <CODESPLIT> 56
 \n  def mines_refill(board, xr, xc, nfree):\n      to_refill = xr*xc - nfree\n      for r in reversed(range(2, xr)):\n          for c in reversed(range(2, xc)):\n              if not to_refill:\n                  return\n              assert(board[r][c] == '.')\n              board[r][c] = '*'\n              to_refill -= 1\n      for r in reversed(range(xr)):\n          for c in reversed(range(xc)):\n              if not to_refill:\n                  return\n              if board[r][c] == '.':\n                  board[r][c] = '*'\n                  to_refill -= 1\n      assert(to_refill == 0)\n      \n  def generate_board(nrows, ncols, nmines):\n      nfree = nrows*ncols - nmines\n      xr=1; xc=1;\n      while True:\n          if xr*xc >= nfree:\n              break\n          if xr < nrows:\n              xr += 1\n          if xr*xc >= nfree:\n              break\n          if xc < ncols:\n              xc += 1\n      board = [['*' for c in range(ncols)] for r in range(nrows)]\n      for r in range(xr):\n          for c in range(xc):\n              board[r][c] = '.'\n      mines_refill(board, xr, xc, nfree)\n      board[0][0] = 'c'\n      return board\n          \n  def find_click_point(board):\n      nrows = len(board)\n      ncols = len(board[0])\n      for r in range(nrows):\n          for c in range(ncols):\n              if board[r][c] == 'c':\n                  return (r,c)\n      raise ValueError('Start point not present')\n  \n  def enum_neighbour_coords(r0, c0, nrows, ncols):\n      for r in range(r0-1, r0+2):\n          if r<0 or r>=nrows:\n              continue\n          for c in range(c0-1, c0+2):\n              if c<0 or c>=ncols:\n                  continue\n              yield (r,c)\n  \n  def click_board(board, click_coords):\n      nrows = len(board)\n      ncols = len(board[0])\n      points = [click_coords]\n      while points:\n          r0,c0 = points.pop()\n          mines_cnt = 0\n          for r,c in enum_neighbour_coords(r0, c0, nrows, ncols):\n              if board[r][c] == '*':\n                  mines_cnt += 1\n          board[r0][c0] = str(mines_cnt)\n          if not mines_cnt:\n              for r,c in enum_neighbour_coords(r0, c0, nrows, ncols):\n                  if board[r][c] == '.':\n                      points.append((r,c))\n  \n  def all_fields_checked(board):\n      nrows = len(board)\n      ncols = len(board[0])\n      for r in range(nrows):\n          for c in range(ncols):\n              if board[r][c] == '.':\n                  return False\n      return True\n  \n  def is_board_oneclick(original_board):\n      board = [row[:] for row in original_board] # deep copy\n      assert(board[0][0] == 'c')\n      r,c = find_click_point(board)\n      click_board(board, (r,c))\n      is_oneclick = all_fields_checked(board)\n      return is_oneclick\n  \n  def board2result(board):\n      return [''.join(row) for row in board]\n  \n  def process_case(nrows, ncols, nmines):\n      board = generate_board(nrows, ncols, nmines)\n      if is_board_oneclick(board):\n          result = board2result(board)\n      else:\n          result = ['Impossible']\n      return result\n  \n  def result_gen(lines):\n      ncases = int(next(lines))\n      for ci in range(1,ncases+1):\n          R, C, M = line_of_numbers(next(lines))\n          result = process_case(R, C, M)\n          yield 'Case #{0}:\n'.format(ci, result)\n          for res_line in result:\n              yield res_line + '\n'\n      \n  def line_of_numbers(s):\n      return [int(sub) for sub in s.split()]\n  \n  def input_gen(f_in):\n      for line in f_in:\n          if line.endswith('\n'):\n              line = line[:-1]\n          yield line\n  \n  def start(basename):\n      infile = basename + '.in'\n      outfile = basename + '.out'\n      f_in = open(infile, 'r')\n      f_out = open(outfile, 'w')\n      f_out.writelines(result_gen(input_gen(f_in)))\n      f_in.close()\n      f_out.close()\n  \n  start('C-small-attempt0')\n <CODESPLIT> 57
 \n  def process_case(row1, tab1, row2, tab2):\n      s1 = set(tab1[row1])\n      s2 = set(tab2[row2])\n      xset = s1 & s2\n      if len(xset) == 1:\n          result = xset.pop()\n      elif len(xset) == 0:\n          result = 'Volunteer cheated!'\n      else:\n          result = 'Bad magician!'\n      return result\n  \n  def result_gen(lines):\n      ncases = int(next(lines))\n      for ci in range(1,ncases+1):\n          row1 = int(next(lines)) - 1\n          tab1 = [line_of_numbers(next(lines)) for i in range(4)]\n          row2 = int(next(lines)) - 1\n          tab2 = [line_of_numbers(next(lines)) for i in range(4)]\n          result = process_case(row1, tab1, row2, tab2)\n          yield 'Case #{0}: {1}\n'.format(ci, result)\n      \n  def line_of_numbers(s):\n      return [int(sub) for sub in s.split()]\n  \n  def input_gen(f_in):\n      for line in f_in:\n          if line.endswith('\n'):\n              line = line[:-1]\n          yield line\n  \n  def start(basename):\n      infile = basename + '.in'\n      outfile = basename + '.out'\n      f_in = open(infile, 'r')\n      f_out = open(outfile, 'w')\n      f_out.writelines(result_gen(input_gen(f_in)))\n      f_in.close()\n      f_out.close()\n  \n  start('A-small-attempt0')\n <CODESPLIT> 57
 \n  \n  \n  \n  \n  \n  \n  class memoize(object):\n     """Decorator. Caches a function's return value each time it is called.\n     If called later with the same arguments, the cached value is returned\n     (not reevaluated).\n     """\n     def __init__(self, func):\n        self.func = func\n        self.cache = {}\n     def __call__(self, *args):\n        if not isinstance(args, collections.Hashable):\n           return self.func(*args)\n        if args in self.cache:\n           return self.cache[args]\n        else:\n           value = self.func(*args)\n           self.cache[args] = value\n           return value\n     def __repr__(self):\n        '''Return the function's docstring.'''\n        return self.func.__doc__\n     def __get__(self, obj, objtype):\n        '''Support instance methods.'''\n        return functools.partial(self.__call__, obj)\n  \n  \n  def precalculate():\n      """Perform any calculations that need to be performed before the main path\n      (e.g., preparing lookup tables, etc.)\n      \n      N.B. Make sure you make any important variables global so that other\n      functions can access them.\n      """\n      pass\n  \n  def read_input(infile):\n      """This function should take an open input file, load in all of the\n      relevant information for a single case of the problem, and output it\n      as a single object.    \n      """\n      def read_int():\n          return int(infile.readline().strip())\n      def read_ints():\n          return np.array(infile.readline().split(), dtype=int)\n      def read_bigints(): #For ints that won't fit directly in an int32 array\n          line = infile.readline().split()\n          return np.array(map(lambda x: int(x), line))\n      def read_float():\n          return float(infile.readline().strip())\n      def read_floats():\n          return np.array(infile.readline().split(), dtype=float)\n      def read_string():\n          return infile.readline().strip()\n      def read_strings():\n          return np.array(infile.readline().split(), dtype=object) #N.B. general dtype\n      \n      R, C, M = read_ints()\n      \n      return R, C, M\n  \n  def solve_case(case):\n      """Take the input data (structured in case) and perform any necessary\n      calculations to obtain the desired output, formatted as the appropriate\n      string.    \n      """\n      R, C, M = case\n      \n      free = R * C - M\n      assert free >= 1\n      \n      board = np.zeros((R, C), dtype=int) - 1\n      \n      def write_board(board):\n          d = {0:'.', 1:'c', 2:'*'}\n          s = "\n"\n          for row in board:\n              for num in row:\n                  try:\n                      s += d[num]\n                  except KeyError:\n                      raise ValueError("Board not filled in!")\n              s += "\n"\n          return s\n      \n      board[0,0] = 1\n      \n      if M == 0:\n          board[board == -1] = 0\n          return write_board(board)\n      \n      if free == 1:\n          board[board == -1] = 2\n          return write_board(board)\n          \n      \n      while min(R, C) <= M:\n          if R < C:\n              board[:,C-1] = 2\n              C -= 1\n              M -= R\n          elif C <= R:\n              board[R-1,:] = 2\n              R -= 1\n              M -= C\n      \n      def cascades(board, r, c):\n          rows = [i for i in (r-1, r, r+1) if (i >= 0 and i < board.shape[0])]\n          cols = [i for i in (c-1, c, c+1) if (i >= 0 and i < board.shape[1])]\n          for r in rows:\n              for c in cols:\n                  if board[r,c] == 2: #Mine next to given position\n                      return False\n          return True\n      \n      if M == 0:\n          board[board == -1] = 0\n          if cascades(board, 0, 0):\n              return write_board(board)\n          else:\n              return "\nImpossible"\n      \n      \n      if M > (R + C - 5):\n          return "\nImpossible"\n          \n      if M > 0 and (R <= 2 or C <= 2):\n          return "\nImpossible"\n          \n      print M, R + C - 5\n      fill_num = min(M, R - 2)\n      print M, fill_num\n      board[(R - fill_num):,C-1] = 2\n      M -= fill_num\n      \n      fill_num = min(M, C - 3)\n      print M, fill_num\n      board[R-1,(C - fill_num - 1):] = 2\n      M -= fill_num\n      \n      board[board == -1] = 0\n      return write_board(board)\n  \n  \n  if __name__ == "__main__":\n      precalculate()\n      \n      assert len(sys.argv) == 2 #only one argument\n      assert sys.argv[1][-3:] == ".in" #input must end with .in\n      infile = open("%s" % sys.argv[1], 'r')\n      outfile = open("%s.out" % sys.argv[1][:-3], 'w')\n      \n      cases = int(infile.readline().strip('\n'))\n      for i in range(cases):\n          \n          case = read_input(infile)\n          \n          output = solve_case(case)\n          \n          outfile.write('Case #%i: %s\n' % (i+1, output))\n          print 'Case #%i: %s\n' % (i+1, output)\n      \n      infile.close()\n      outfile.close()\n <CODESPLIT> 58
 \n  \n  \n  \n  \n  \n  \n  class memoize(object):\n     """Decorator. Caches a function's return value each time it is called.\n     If called later with the same arguments, the cached value is returned\n     (not reevaluated).\n     """\n     def __init__(self, func):\n        self.func = func\n        self.cache = {}\n     def __call__(self, *args):\n        if not isinstance(args, collections.Hashable):\n           return self.func(*args)\n        if args in self.cache:\n           return self.cache[args]\n        else:\n           value = self.func(*args)\n           self.cache[args] = value\n           return value\n     def __repr__(self):\n        '''Return the function's docstring.'''\n        return self.func.__doc__\n     def __get__(self, obj, objtype):\n        '''Support instance methods.'''\n        return functools.partial(self.__call__, obj)\n  \n  \n  def precalculate():\n      """Perform any calculations that need to be performed before the main path\n      (e.g., preparing lookup tables, etc.)\n      \n      N.B. Make sure you make any important variables global so that other\n      functions can access them.\n      """\n      pass\n  \n  def read_input(infile):\n      """This function should take an open input file, load in all of the\n      relevant information for a single case of the problem, and output it\n      as a single object.    \n      """\n      def read_int():\n          return int(infile.readline().strip())\n      def read_ints():\n          return np.array(infile.readline().split(), dtype=int)\n      def read_bigints(): #For ints that won't fit directly in an int32 array\n          line = infile.readline().split()\n          return np.array(map(lambda x: int(x), line))\n      def read_float():\n          return float(infile.readline().strip())\n      def read_floats():\n          return np.array(infile.readline().split(), dtype=float)\n      def read_string():\n          return infile.readline().strip()\n      def read_strings():\n          return np.array(infile.readline().split(), dtype=object) #N.B. general dtype\n      \n      ans1 = read_int()\n      grid1 = np.zeros((4,4), dtype=int)\n      for i in range(4):\n          grid1[i] = read_ints()\n      \n      ans2 = read_int()\n      grid2 = np.zeros((4,4), dtype=int)\n      for i in range(4):\n          grid2[i] = read_ints()\n      \n      \n      case = (ans1, grid1, ans2, grid2)\n      \n      return case\n  \n  def solve_case(case):\n      """Take the input data (structured in case) and perform any necessary\n      calculations to obtain the desired output, formatted as the appropriate\n      string.    \n      """\n      \n      ans1, grid1, ans2, grid2 = case\n      \n      valid = set(grid1[ans1-1]) & set(grid2[ans2-1])\n      \n      \n      if len(valid) == 1:\n          output = valid.pop()\n      elif len(valid) > 1:\n          output = "Bad magician!"\n      elif len(valid) < 1:\n          output = "Volunteer cheated!"\n      return output\n  \n  \n  if __name__ == "__main__":\n      precalculate()\n      \n      assert len(sys.argv) == 2 #only one argument\n      assert sys.argv[1][-3:] == ".in" #input must end with .in\n      infile = open("%s" % sys.argv[1], 'r')\n      outfile = open("%s.out" % sys.argv[1][:-3], 'w')\n      \n      cases = int(infile.readline().strip('\n'))\n      for i in range(cases):\n          \n          case = read_input(infile)\n          \n          output = solve_case(case)\n          \n          outfile.write('Case #%i: %s\n' % (i+1, output))\n          print 'Case #%i: %s\n' % (i+1, output)\n      \n      infile.close()\n      outfile.close()\n <CODESPLIT> 58
 \n  T = int(raw_input())\n  for test_case in xrange(1, T + 1):\n      R, C, M = map(int, raw_input().split())\n      N = R * C\n      B = N - M\n  \n      W, H = (C, R) if R <= C else (R, C)\n  \n      if H == 1:\n          answer = [['c'] + ['.'] * (B - 1) + ['*'] * M]\n      elif M == N - 1:\n          answer = [['*'] * W for r in xrange(H)]\n          answer[0][0] = 'c'\n      elif B < 4 or B in (5, 7):\n          answer = None\n      elif H == 2:\n          if M % 2 == 0:\n              bw = B / 2\n              answer = [\n                  ['c'] + ['.'] * (bw - 1) + ['*'] * (W - bw),\n                  ['.'] * bw + ['*'] * (W - bw),\n              ]\n          else:\n              answer = None\n      else:\n          answer = [['*'] * W for y in xrange(H)]\n          answer[0][0] = 'c'\n          answer[0][1] = answer[1][0] = answer[1][1] = '.'\n          left = B - 4\n          if 2 <= left:\n              answer[0][2] = answer[1][2] = '.'\n              left -= 2\n          if 2 <= left:\n              answer[2][0] = answer[2][1] = '.'\n              left -= 2\n  \n          x = y = 3\n          while (x < W or y < H) and 2 <= left:\n              if x < W and 2 <= left:\n                  answer[0][x] = answer[1][x] = '.'\n                  left -= 2\n                  x += 1\n              if y < H and 2 <= left:\n                  answer[y][0] = answer[y][1] = '.'\n                  left -= 2\n                  y += 1\n  \n          y = 2\n          while 0 < left and y < H:\n              x = 2\n              while 0 < left and x < W:\n                  answer[y][x] = '.'\n                  left -= 1\n                  x += 1\n              y += 1\n  \n      if answer is None:\n          answer = 'Impossible'\n      else:\n          if W == R:\n              answer = map(list, zip(*answer))\n          assert len(answer) == R\n          assert len(answer[0]) == C\n          assert sum(row.count('*') for row in answer) == M\n          answer = '\n'.join([''.join(row) for row in answer])\n      print 'Case #{}:\n{}'.format(test_case, answer)\n <CODESPLIT> 59
 \n  T = int(raw_input())\n  for test_case in xrange(1, T + 1):\n      N1 = int(raw_input())\n      for i in xrange(4):\n          if i + 1 == N1:\n              R1 = map(int, raw_input().split(' '))\n          else:\n              raw_input()\n      N2 = int(raw_input())\n      for i in xrange(4):\n          if i + 1 == N2:\n              R2 = map(int, raw_input().split(' '))\n          else:\n              raw_input()\n      assert 1 <= N1 <= 4\n      assert 1 <= N2 <= 4\n      assert len(R1) == len(R2) == 4\n  \n      num = set(R1) & set(R2)\n      if len(num) == 1:\n          answer = num.pop()\n      elif 1 < len(num):\n          answer = 'Bad magician!'\n      else:\n          answer = 'Volunteer cheated!'\n      print 'Case #{}: {}'.format(test_case, answer)\n <CODESPLIT> 59
 \n  def put_mines_last_step(R, C, M, grid):\n  	if M == 0:\n  		return\n  	R -= 1\n  	C -= 1\n  	grid[R][C] = '*'\n  	M -= 1\n  	r = R - 1\n  	c = C - 1\n  	while M > 0:\n  		if r > c:\n  			grid[r][C] = '*'\n  			r -= 1\n  		else:\n  			grid[R][c] = '*'\n  			c -= 1\n  		M -= 1\n  \n  def put_mines(R, C, M, grid):\n  	if R > C:\n  		if M < C:\n  			put_mines_last_step(R, C, M, grid)\n  			return\n  		for i in range(C):\n  			grid[R - 1][i] = '*'\n  		put_mines(R - 1, C, M - C, grid)\n  		return\n  	if M < R:\n  		put_mines_last_step(R, C, M, grid)\n  		return\n  	for i in range(R):\n  		grid[i][C - 1] = '*'\n  	put_mines(R, C - 1, M - R, grid)\n  	return\n  \n  def process(R, C, M):\n  	rlt = ''\n  	grid = []\n  	for i in range(R):\n  		grid.append(['.'] * C)\n  	put_mines(R, C, M, grid)\n  	if not C == 1:\n  		for i in range(R):\n  			if not grid[i][0] == '.':\n  				break\n  			if not grid[i][1] == '.':\n  				return '\nImpossible'\n  	if not R == 1:\n  		for i in range(C):\n  			if not grid[0][i] == '.':\n  				break\n  			if not grid[1][i] == '.':\n  				return '\nImpossible'\n  	grid[0][0] = 'c'\n  	for i in grid:\n  		rlt += '\n' + ''.join(i)\n  	return rlt\n  \n  input_file = open(sys.argv[1], 'r')\n  T = int(input_file.readline())\n  for i in range(T):\n  	(R, C, M) = map(int, input_file.readline().split())\n  	print 'Case #%d:' % (i + 1), process(R, C, M)\n <CODESPLIT> 60
 \n  \n  def process(chosen_row_1, arrange_1, chosen_row_2, arrange_2):\n  	rlt = 'Volunteer cheated!'\n  	found = False\n  	for i in arrange_1[chosen_row_1]:\n  		if i in arrange_2[chosen_row_2]:\n  			if not found:\n  				rlt = i\n  				found = True\n  			else:\n  				rlt = 'Bad magician!'\n  				break\n  	return rlt\n  \n  input_file = open(sys.argv[1], 'r')\n  T = int(input_file.readline())\n  for i in range(T):\n  	chosen_row_1 = int(input_file.readline()) - 1\n  	arrange_1 = []\n  	arrange_1.append(map(int, input_file.readline().split()))\n  	arrange_1.append(map(int, input_file.readline().split()))\n  	arrange_1.append(map(int, input_file.readline().split()))\n  	arrange_1.append(map(int, input_file.readline().split()))\n  	chosen_row_2 = int(input_file.readline()) - 1\n  	arrange_2 = []\n  	arrange_2.append(map(int, input_file.readline().split()))\n  	arrange_2.append(map(int, input_file.readline().split()))\n  	arrange_2.append(map(int, input_file.readline().split()))\n  	arrange_2.append(map(int, input_file.readline().split()))\n  	print 'Case #%d:' % (i + 1), process(chosen_row_1, arrange_1, chosen_row_2, arrange_2)\n <CODESPLIT> 60
inputFile = open('C-small-attempt8.in', 'r')\n  lines = inputFile.readlines()\n  inputFile.close()\n  \n  outputFile = open('C-small-attempt8.out', 'w')\n  \n  numTests = int(lines[0])\n  \n  for i in range(1, numTests+1):\n      [r, c, m] = map(lambda x: int(x), lines[i].split())\n  \n      openCells = r*c - m\n  \n      works = False\n      matrix = [['*']*c for j in range(r)]\n      if r >= 3 and c >= 3:\n          order = [(0,0), (0,1), (1,0), (1,1), (0,2), (1,2),\n                   (2,0), (2,1)]\n          if openCells == 1 or openCells == 4 or openCells == 6:\n              works = True\n              for (x,y) in order[:openCells]:\n                  matrix[x][y] = '.'\n              matrix[0][0] = 'c'\n              \n          elif openCells >= 8:\n              works = True\n              filledRows = openCells / c\n              if filledRows >= 2:\n                  if filledRows == r:\n                      matrix = [['.']*c for j in range(r)]\n                      matrix[0][0] = 'c'\n                  else:\n                      remainder = openCells%c\n                      if not remainder == 1:\n                          for j in range(filledRows):\n                              matrix[j] = ['.']*c\n                          matrix[filledRows] = ['.']*remainder + ['*'] * (c-remainder)\n                      elif filledRows > 2:\n                          for j in range(filledRows-1):\n                              matrix[j] = ['.']*c\n                          matrix[filledRows-1] = ['.']*(c-1) + ['*']\n                          matrix[filledRows] = ['.', '.'] + ['*']*(c-2)\n                      else:\n                          matrix[0] = ['.']*(c-1) + ['*']                        \n                          matrix[1] = ['.']*(c-1) + ['*']\n                          matrix[2] = ['.', '.', '.'] + ['*']*(c-3)\n                      matrix[0][0] = 'c'\n                  \n              else:\n                  for (x,y) in order:\n                      matrix[x][y] = '.'\n                  remainingOpen = openCells - 8\n                  if remainingOpen % 2 == 0:\n                      for j in range(remainingOpen/2):\n                          matrix[0][j+3] = '.'\n                          matrix[1][j+3] = '.'\n                  else:\n                      matrix[2][2] = '.'\n                      remainingOpen -= 1\n                      for j in range(remainingOpen/2):\n                          matrix[0][j+3] = '.'\n                          matrix[1][j+3] = '.'\n                  matrix[0][0] = 'c'\n  \n      elif r == 1:\n          works = True\n          matrix[0] = ['.']*(c-m) + ['*']*m\n          matrix[0][0] = 'c'\n      elif c == 1:\n          works = True\n          for j in range(r-m):\n              matrix[j][0] = '.'\n          matrix[0][0] = 'c'\n  \n      elif r == 2 and c == 2:\n          if m == 3:\n              works = True\n              matrix[0][0] = 'c'\n          elif m == 0:\n              works = True\n              matrix = [['c', '.'], ['.', '.']]\n      elif r == 2:\n          if m % 2 == 0 and r*c-m > 2:\n              works = True\n              matrix[0] = ['.']*(c-m/2) + ['*']*(m/2)\n              matrix[1] = ['.']*(c-m/2) + ['*']*(m/2)\n              matrix[0][0] = 'c'\n          elif r*c-m == 1:\n              works = True\n              matrix[0][0] = 'c'\n      elif c == 2:\n          if m % 2 == 0 and r*c-m > 2:\n              works = True\n              for j in range((r*c-m)/2):\n                  matrix[j] = ['.', '.']\n              matrix[0][0] = 'c'\n          elif r*c-m == 1:\n              works = True\n              matrix[0][0] = 'c'\n      \n  \n      outputFile.write('Case #'+str(i)+':\n')\n      '''if len(matrix) != r:\n          print i, matrix\n      count = 0\n      for j in range(len(matrix)):\n          for k in range(len(matrix[j])):\n              if matrix[j][k] == '*':\n                  count += 1\n      if count != m:\n          print i, matrix'''\n      if not works:\n          outputFile.write('Impossible\n')\n      else:\n          for x in range(len(matrix)):\n              for y in range(len(matrix[0])):\n                  outputFile.write(matrix[x][y])\n              outputFile.write('\n')\n  outputFile.close()\n              \n <CODESPLIT> 61
inputFile = open('A-small-attempt0.in', 'r')\n  lines = inputFile.readlines()\n  inputFile.close()\n  \n  outputFile = open('A-small-attempt0.out', 'w')\n  \n  numTests = int(lines[0])\n  \n  \n  currLine = 1\n  for i in range(1, numTests+1):\n      firstRow = lines[int(lines[currLine])+currLine]\n      currLine += 5\n      secondRow = lines[int(lines[currLine])+currLine]\n      currLine += 5\n  \n      firstNums = map(lambda x: int(x), firstRow.split())\n      secondNums = map(lambda x: int(x), secondRow.split())\n      \n      intersect = [v for v in firstNums if v in secondNums]\n  \n      outputFile.write('Case #'+str(i)+': ')\n      if len(intersect) == 1:\n          outputFile.write(str(intersect[0])+'\n')\n      elif len(intersect) == 0:\n          outputFile.write('Volunteer cheated!\n')\n      else:\n          outputFile.write('Bad magician!\n')\n  \n  outputFile.close()\n      \n <CODESPLIT> 61
 \n  INPUT = 'C-small-attempt0.in'\n  OUTPUT = 'C-small-attempt0.out'\n  \n  \n  def solve(R, C, M):\n      grid = [[0 for c in range(C)] for r in range(R)]\n  \n      def get_cell(cell_r, cell_c):\n          if not(0 <= cell_r < R):\n              return None\n          if not(0 <= cell_c < C):\n              return None\n          return grid[cell_r][cell_c]\n  \n      def for_each_neighbour(cell_r, cell_c, func):\n          ret = []\n          coords = (\n              (cell_r - 1, cell_c - 1), (cell_r - 1, cell_c), (cell_r - 1, cell_c + 1),\n              (cell_r, cell_c - 1), (cell_r, cell_c + 1),\n              (cell_r + 1, cell_c - 1), (cell_r + 1, cell_c), (cell_r + 1, cell_c + 1)\n          )\n          for nb in coords:\n              if get_cell(nb[0], nb[1]) is not None:\n                  ret.append(func(nb[0], nb[1]))\n          return ret\n  \n      def mark_dirty(cell_r, cell_c):\n          if grid[cell_r][cell_c] != '*':\n              grid[cell_r][cell_c] += 1\n      \n      def unmark_dirty(cell_r, cell_c):\n          if grid[cell_r][cell_c] != '*':\n              grid[cell_r][cell_c] -= 1\n  \n      def check_empty_neighbours(cell_r, cell_c):\n          return (0 in for_each_neighbour(cell_r, cell_c, lambda r, c: get_cell(r, c)))\n  \n      def click():\n          for i, row in enumerate(grid):\n              for j, cell in enumerate(row):\n                  if cell != '*':\n                      if cell == 0 or ((R * C - M) == 1):\n                          grid[i][j] = 'c'\n                          return\n  \n      def place_mine():\n          for i, row in enumerate(grid):\n              for j, cell in enumerate(row):\n                  if cell == '*':\n                      continue\n                  prevstate = grid[i][j]\n                  grid[i][j] = '*'\n                  for_each_neighbour(i, j, mark_dirty)\n                  if not (True in for_each_neighbour(i, j, check_empty_neighbours)):\n                      grid[i][j] = prevstate\n                      for_each_neighbour(i, j, unmark_dirty)\n                  else:\n                      return True\n          return False\n  \n      for m in range(M):\n          if not place_mine():\n              return 'Impossible\n'\n  \n      click()\n  \n      ret = ''\n      for row in grid:\n          ret = ret + ''.join(map(lambda c: '.' if isinstance(c, int) else c, row)) + '\n'\n  \n      return ret\n  \n  \n  if __name__ == '__main__':\n      inp = open(INPUT)\n      out = open(OUTPUT, 'w')\n      \n      T = int(inp.readline())\n  \n      for case in range(T):\n          sol = solve(*map(int, inp.readline().split()))\n          out.write('Case #%i:\n%s' % (case + 1, sol))\n <CODESPLIT> 62
 \n  INPUT = 'A-small-attempt0.in'\n  OUTPUT = 'A-small-attempt0.out'\n  \n  \n  def solve(answer1, arr1, answer2, arr2):\n      ret = None\n  \n      for card in arr1[answer1 - 1]:\n          if card in arr2[answer2 - 1]:\n              if ret is not None:\n                  return 'Bad magician!'\n              else:\n                  ret = card\n      if ret is None:\n          return 'Volunteer cheated!'\n      return ret\n  \n  if __name__ == '__main__':\n      inp = open(INPUT)\n      out = open(OUTPUT, 'w')\n      \n      T = int(inp.readline())\n  \n      def read_answer_and_arr():\n          answer = int(inp.readline())\n          arr = []\n          for i in range(4):\n              arr.append( map(int, inp.readline().split()) )\n          return answer, arr\n  \n      for case in range(T):\n          answer1, arr1 = read_answer_and_arr()\n          answer2, arr2 = read_answer_and_arr()\n  \n          out.write('Case #%i: %s\n' % \\n                          (case + 1, solve(answer1, arr1, answer2, arr2)))\n <CODESPLIT> 62
 \n  \n  \n  def check(R, C, M, _board):\n      board = [line[:] for line in _board]\n  \n      pos = [(0, 0)]\n      while pos:\n          row, col = pos.pop()\n          neighbor = []\n          for r in (-1, 0, 1):\n              r += row\n              for c in (-1, 0, 1):\n                  c += col\n                  if r >= 0 and r < R and c >= 0 and c < C:\n                      neighbor.append((r, c))\n          count = len([1 for r, c in neighbor if board[r][c] == '*'])\n          board[row][col] = str(count)\n          if count == 0:\n              for r, c in neighbor:\n                  if board[r][c] == '.':\n                      pos.append((r, c))\n  \n      flat = ''.join(''.join(line) for line in board)\n      result = not flat.count('.')\n      if not result and False: # for DEBUG\n          print '-' * 20\n          print R, C, M\n          print '\n'.join(''.join(line) for line in _board)\n          print '-' * 20\n      assert flat.count('*') == M\n      return result\n  \n  \n  def solve(R, C, M):\n      board = [['.'] * C for row in range(R)]\n      board[0][0] = 'c'\n      row = R\n      col = C\n      mine = M\n  \n      while mine:\n          if 0 < row <= col and mine >= row:\n              for r in range(row):\n                  board[row - r - 1][col - 1] = '*'\n              mine -= row\n              col -= 1\n          elif 0 < col <= row and mine >= col:\n              for c in range(col):\n                  board[row - 1][col - c - 1] = '*'\n              mine -= col\n              row -= 1\n          else:\n              break\n  \n      if mine:\n          while mine and row > 2:\n              for r in range(min(mine, row - 2)):\n                  board[row - r - 1][col - 1] = '*'\n                  mine -= 1\n              col -= 1\n          while mine and col > 2:\n              for c in range(min(mine, col - 2)):\n                  board[row - 1][col - c - 1] = '*'\n                  mine -= 1\n              row -= 1\n  \n      if mine:\n          if mine:\n              board[1][1] = '*'\n              mine -= 1\n          if mine:\n              board[1][0] = '*'\n              mine -= 1\n          if mine:\n              board[0][1] = '*'\n              mine -= 1\n  \n      assert mine == 0\n      return '\n'.join(''.join(line) for line in board) if check(R, C, M, board) else 'Impossible'\n  \n  \n  def main(IN, OUT):\n      T = int(IN.readline())\n      for index in range(T):\n          R, C, M = map(int, IN.readline().split())\n          OUT.write('Case #%d:\n%s\n' % (index + 1, solve(R, C, M)))\n  \n  \n  def makesample(maxSize=5, T=230):\n      print T\n      for index in range(T):\n          R = random.randint(1, maxSize)\n          C = random.randint(1, maxSize)\n          print R, C, random.randint(0, R * C - 1)\n  \n  \n  def makesample():\n      pattern = []\n      for R in range(1, 5+1):\n          for C in range(1, 5+1):\n              for M in range(R * C):\n                  pattern.append((R, C, M))\n      print len(pattern)\n      for R, C, M in pattern:\n          print R, C, M\n  \n  \n  if __name__ == '__main__':\n      if '-makesample' in sys.argv[1:]:\n          makesample()\n      else:\n          main(sys.stdin, sys.stdout)\n  \n <CODESPLIT> 63
 \n  \n  \n  def solve(arrange):\n      board, row = arrange[0]\n      before = board[row - 1]\n      board, row = arrange[1]\n      after = board[row - 1]\n      dup = set(before) & set(after)\n      if len(dup) == 1:\n          return dup.pop()\n      elif len(dup) >= 2:\n          return 'Bad magician!'\n      else:\n          return 'Volunteer cheated!'\n  \n  \n  def main(IN, OUT):\n      T = int(IN.readline())\n      for index in range(T):\n          arrange = []\n          for n in range(2):\n              row = int(IN.readline())\n              board = []\n              for line in range(4):\n                  board.append(map(int, IN.readline().split()))\n              arrange.append((board, row))\n          OUT.write('Case #%d: %s\n' % (index + 1, solve(arrange)))\n  \n  \n  def makesample(T=100):\n      print T\n      for index in range(T):\n          for n in range(2):\n              print random.randint(1, 4)\n              board = list(range(1, 16+1))\n              random.shuffle(board)\n              while board:\n                  print ' '.join(map(str, board[:4]))\n                  board = board[4:]\n  \n  \n  if __name__ == '__main__':\n      if '-makesample' in sys.argv[1:]:\n          makesample()\n      else:\n          main(sys.stdin, sys.stdout)\n  \n <CODESPLIT> 63
 \n  \n  def neighbours(grid, (i, j), n, m):\n      for a in range(max(i-1, 0), min(i+2, n)):\n          for b in range(max(j-1, 0), min(j+2, m)):\n              if (a != i or b != j):\n                  yield (a, b)\n  \n  def isGridCorrect(grid):\n      g = list(grid)\n      n = len(g)\n      m = len(g[0])\n      queue = [(0, 0)]\n  \n      while queue:\n          v = queue.pop(0)\n          g[v[0]][v[1]] = 'r'\n          bomb = False\n          for (i, j) in neighbours(g, v, n, m):\n              if g[i][j] == '*':\n                  bomb = True\n          if not bomb:\n              for (i, j) in neighbours(g, v, n, m):\n                  if g[i][j] != 'r':\n                      queue.append((i, j))\n  \n      for i in range(n):\n          for j in range(m):\n              if g[i][j] != 'r' and g[i][j] != '*':\n                  return 'WRONG'\n  \n      return 'Right'\n  \n  def createGrid(R, C, s):\n      field = []\n      for i in range(R):\n          field.append([s] * C)\n      field[0][0] = 'c'\n      return field\n  \n  def draw(grid):\n      s = ""\n      for row in grid:\n          s += "\n" + ''.join(row)\n      return s\n  \n  def reduceRows(grid, k, l, M):\n      if k <= 2:\n          return (grid, k, l, M)\n      \n  \n      for j in range(l):\n          grid[k-1][j] = '*'\n      k -= 1\n      M -= l\n      return (grid, k, l, M)\n  \n  def reduceCols(grid, k, l, M):\n      if l <= 2:\n          return (grid, k, l, M)\n      \n  \n      for i in range(k):\n          grid[i][l-1] = '*'\n      l -= 1\n      M -= k\n      return (grid, k, l, M)\n  \n  def solve(R, C, M):\n      mp = M\n      if M == 0:\n          f = createGrid(R, C, '.')\n          return draw(f)\n      elif M == R*C - 1:\n          f = createGrid(R, C, '*')\n          return draw(f)\n      elif (R == 2 or C == 2) and (M % 2 == 1 or M == R*C - 2):\n          return "\n" + 'Impossible' #+ '1: ' + str(R) + ' ' + str(C) + ' ' + str(mp)\n      elif R > 2 and C > 2 and (M == R*C - 2 or M == R*C - 3 or M == R*C - 5 or M == R*C - 7):\n          return "\n" + 'Impossible' #+ '2: ' + str(R) + ' ' + str(C) + ' ' + str(mp)\n      else:\n          grid = createGrid(R, C, '.')\n  \n  \n          k = R\n          l = C\n  \n          while (M >= l and k > 2) or (M >= k and l > 2):\n              if l >= k:\n                  (grid, k, l, M) = reduceCols(grid, k, l, M)\n              elif k > l:\n                  (grid, k, l, M) = reduceRows(grid, k, l, M)\n  \n  \n          if M == 0:\n              return draw(grid)\n          if M < l - 1 and k > 2:\n              for j in range(l - M, l):\n                  grid[k-1][j] = '*'\n          elif M < k - 1 and l > 2:\n              for i in range(k - M, k):\n                  grid[i][l-1] = '*'\n          elif l > 3 and k > 3:\n              for i in range(2, k):\n                  grid[i][l-1] = '*'\n              M -= k - 2\n              for j in range(l - M - 1, l - 1):\n                  grid[k-1][j] = '*'\n          else:\n              return "\n" + 'Impossible' #+ '3: ' + str(R) + ' ' + str(C) + ' ' + str(mp)\n  \n          return draw(grid)\n  \n  def main():\n      N = int(sys.stdin.readline()) # number of testcases\n      for i in range(N):\n          [R, C, M] = [int(x) for x in sys.stdin.readline().rstrip().split()]\n  \n          result = solve(R, C, M)\n          print ("Case #%s:%s" % (i+1, result))\n  \n  if __name__ == '__main__':\n      main()\n <CODESPLIT> 64
 \n  \n  def solve(row1, row2):\n      common = [x for x in row1 if x in row2]\n      num_common = len(common)\n      if num_common == 0:\n          return 'Volunteer cheated!'\n      elif num_common > 1:\n          return 'Bad magician!'\n      else:\n          return common[0]\n  \n  def main():\n      N = int(sys.stdin.readline()) # number of testcases\n      for i in range(N):\n          row_index1 = int(sys.stdin.readline())\n          row1 = list()\n          for j in range(4):\n              if row_index1 == j + 1:\n                  row1 = [int(x) for x in sys.stdin.readline().rstrip().split()]\n              else:\n                  sys.stdin.readline()\n  \n          row_index2 = int(sys.stdin.readline())\n          row2 = list()\n          for j in range(4):\n              if row_index2 == j + 1:\n                  row2 = [int(x) for x in sys.stdin.readline().rstrip().split()]\n              else:\n                  sys.stdin.readline()\n  \n          result = solve(row1, row2)\n          print ("Case #%s: %s" % (i+1, result))\n  \n  if __name__ == '__main__':\n      main()\n <CODESPLIT> 64
CACHE = {(1, 1, 0): ['c'],\n   (1, 2, 0): ['c.'],\n   (1, 2, 1): ['*c'],\n   (1, 3, 0): ['c..'],\n   (1, 3, 1): ['*.c'],\n   (1, 3, 2): ['**c'],\n   (1, 4, 0): ['c...'],\n   (1, 4, 1): ['*.c.'],\n   (1, 4, 2): ['**.c'],\n   (1, 4, 3): ['***c'],\n   (1, 5, 0): ['c....'],\n   (1, 5, 1): ['*.c..'],\n   (1, 5, 2): ['**.c.'],\n   (1, 5, 3): ['***.c'],\n   (1, 5, 4): ['****c'],\n   (2, 1, 0): ['c', '.'],\n   (2, 1, 1): ['*', 'c'],\n   (2, 2, 0): ['c.', '..'],\n   (2, 2, 1): None,\n   (2, 2, 2): None,\n   (2, 2, 3): ['**', '*c'],\n   (2, 3, 0): ['c..', '...'],\n   (2, 3, 1): None,\n   (2, 3, 2): ['*.c', '*..'],\n   (2, 3, 3): None,\n   (2, 3, 4): None,\n   (2, 3, 5): ['***', '**c'],\n   (2, 4, 0): ['c...', '....'],\n   (2, 4, 1): None,\n   (2, 4, 2): ['*.c.', '*...'],\n   (2, 4, 3): None,\n   (2, 4, 4): ['**.c', '**..'],\n   (2, 4, 5): None,\n   (2, 4, 6): None,\n   (2, 4, 7): ['****', '***c'],\n   (2, 5, 0): ['c....', '.....'],\n   (2, 5, 1): None,\n   (2, 5, 2): ['*.c..', '*....'],\n   (2, 5, 3): None,\n   (2, 5, 4): ['**.c.', '**...'],\n   (2, 5, 5): None,\n   (2, 5, 6): ['***.c', '***..'],\n   (2, 5, 7): None,\n   (2, 5, 8): None,\n   (2, 5, 9): ['*****', '****c'],\n   (3, 1, 0): ['c', '.', '.'],\n   (3, 1, 1): ['*', '.', 'c'],\n   (3, 1, 2): ['*', '*', 'c'],\n   (3, 2, 0): ['c.', '..', '..'],\n   (3, 2, 1): None,\n   (3, 2, 2): ['**', '..', 'c.'],\n   (3, 2, 3): None,\n   (3, 2, 4): None,\n   (3, 2, 5): ['**', '**', '*c'],\n   (3, 3, 0): ['c..', '...', '...'],\n   (3, 3, 1): ['*.c', '...', '...'],\n   (3, 3, 2): None,\n   (3, 3, 3): ['***', '...', 'c..'],\n   (3, 3, 4): None,\n   (3, 3, 5): ['***', '*..', '*.c'],\n   (3, 3, 6): None,\n   (3, 3, 7): None,\n   (3, 3, 8): ['***', '***', '**c'],\n   (3, 4, 0): ['c...', '....', '....'],\n   (3, 4, 1): ['*.c.', '....', '....'],\n   (3, 4, 2): ['**.c', '....', '....'],\n   (3, 4, 3): ['*.c.', '*...', '*...'],\n   (3, 4, 4): ['****', '....', 'c...'],\n   (3, 4, 5): None,\n   (3, 4, 6): ['****', '*...', '*.c.'],\n   (3, 4, 7): None,\n   (3, 4, 8): ['****', '**..', '**.c'],\n   (3, 4, 9): None,\n   (3, 4, 10): None,\n   (3, 4, 11): ['****', '****', '***c'],\n   (3, 5, 0): ['c....', '.....', '.....'],\n   (3, 5, 1): ['*.c..', '.....', '.....'],\n   (3, 5, 2): ['**.c.', '.....', '.....'],\n   (3, 5, 3): ['***.c', '.....', '.....'],\n   (3, 5, 4): ['**.c.', '*....', '*....'],\n   (3, 5, 5): ['*****', '.....', 'c....'],\n   (3, 5, 6): ['**.c.', '**...', '**...'],\n   (3, 5, 7): ['*****', '*....', '*.c..'],\n   (3, 5, 8): None,\n   (3, 5, 9): ['*****', '**...', '**.c.'],\n   (3, 5, 10): None,\n   (3, 5, 11): ['*****', '***..', '***.c'],\n   (3, 5, 12): None,\n   (3, 5, 13): None,\n   (3, 5, 14): ['*****', '*****', '****c'],\n   (4, 1, 0): ['c', '.', '.', '.'],\n   (4, 1, 1): ['*', '.', 'c', '.'],\n   (4, 1, 2): ['*', '*', '.', 'c'],\n   (4, 1, 3): ['*', '*', '*', 'c'],\n   (4, 2, 0): ['c.', '..', '..', '..'],\n   (4, 2, 1): None,\n   (4, 2, 2): ['**', '..', 'c.', '..'],\n   (4, 2, 3): None,\n   (4, 2, 4): ['**', '**', '..', 'c.'],\n   (4, 2, 5): None,\n   (4, 2, 6): None,\n   (4, 2, 7): ['**', '**', '**', '*c'],\n   (4, 3, 0): ['c..', '...', '...', '...'],\n   (4, 3, 1): ['*.c', '...', '...', '...'],\n   (4, 3, 2): ['*.c', '*..', '...', '...'],\n   (4, 3, 3): ['***', '...', 'c..', '...'],\n   (4, 3, 4): ['***', '*..', '..c', '...'],\n   (4, 3, 5): None,\n   (4, 3, 6): ['***', '***', '...', 'c..'],\n   (4, 3, 7): None,\n   (4, 3, 8): ['***', '***', '*..', '*.c'],\n   (4, 3, 9): None,\n   (4, 3, 10): None,\n   (4, 3, 11): ['***', '***', '***', '**c'],\n   (4, 4, 0): ['c...', '....', '....', '....'],\n   (4, 4, 1): ['*.c.', '....', '....', '....'],\n   (4, 4, 2): ['**.c', '....', '....', '....'],\n   (4, 4, 3): ['**.c', '*...', '....', '....'],\n   (4, 4, 4): ['****', '....', 'c...', '....'],\n   (4, 4, 5): ['****', '*...', '..c.', '....'],\n   (4, 4, 6): ['****', '**..', '...c', '....'],\n   (4, 4, 7): ['****', '*...', '*.c.', '*...'],\n   (4, 4, 8): ['****', '****', '....', 'c...'],\n   (4, 4, 9): None,\n   (4, 4, 10): ['****', '****', '*...', '*.c.'],\n   (4, 4, 11): None,\n   (4, 4, 12): ['****', '****', '**..', '**.c'],\n   (4, 4, 13): None,\n   (4, 4, 14): None,\n   (4, 4, 15): ['****', '****', '****', '***c'],\n   (4, 5, 0): ['c....', '.....', '.....', '.....'],\n   (4, 5, 1): ['*.c..', '.....', '.....', '.....'],\n   (4, 5, 2): ['**.c.', '.....', '.....', '.....'],\n   (4, 5, 3): ['***.c', '.....', '.....', '.....'],\n   (4, 5, 4): ['***.c', '*....', '.....', '.....'],\n   (4, 5, 5): ['*****', '.....', 'c....', '.....'],\n   (4, 5, 6): ['*****', '*....', '..c..', '.....'],\n   (4, 5, 7): ['*****', '**...', '...c.', '.....'],\n   (4, 5, 8): ['*****', '***..', '....c', '.....'],\n   (4, 5, 9): ['*****', '**...', '*..c.', '*....'],\n   (4, 5, 10): ['*****', '*****', '.....', 'c....'],\n   (4, 5, 11): ['*****', '**...', '**.c.', '**...'],\n   (4, 5, 12): ['*****', '*****', '*....', '*.c..'],\n   (4, 5, 13): None,\n   (4, 5, 14): ['*****', '*****', '**...', '**.c.'],\n   (4, 5, 15): None,\n   (4, 5, 16): ['*****', '*****', '***..', '***.c'],\n   (4, 5, 17): None,\n   (4, 5, 18): None,\n   (4, 5, 19): ['*****', '*****', '*****', '****c'],\n   (5, 1, 0): ['c', '.', '.', '.', '.'],\n   (5, 1, 1): ['*', '.', 'c', '.', '.'],\n   (5, 1, 2): ['*', '*', '.', 'c', '.'],\n   (5, 1, 3): ['*', '*', '*', '.', 'c'],\n   (5, 1, 4): ['*', '*', '*', '*', 'c'],\n   (5, 2, 0): ['c.', '..', '..', '..', '..'],\n   (5, 2, 1): None,\n   (5, 2, 2): ['**', '..', 'c.', '..', '..'],\n   (5, 2, 3): None,\n   (5, 2, 4): ['**', '**', '..', 'c.', '..'],\n   (5, 2, 5): None,\n   (5, 2, 6): ['**', '**', '**', '..', 'c.'],\n   (5, 2, 7): None,\n   (5, 2, 8): None,\n   (5, 2, 9): ['**', '**', '**', '**', '*c'],\n   (5, 3, 0): ['c..', '...', '...', '...', '...'],\n   (5, 3, 1): ['*.c', '...', '...', '...', '...'],\n   (5, 3, 2): ['*.c', '*..', '...', '...', '...'],\n   (5, 3, 3): ['***', '...', 'c..', '...', '...'],\n   (5, 3, 4): ['***', '*..', '..c', '...', '...'],\n   (5, 3, 5): ['***', '*..', '*.c', '...', '...'],\n   (5, 3, 6): ['***', '***', '...', 'c..', '...'],\n   (5, 3, 7): ['***', '***', '*..', '..c', '...'],\n   (5, 3, 8): None,\n   (5, 3, 9): ['***', '***', '***', '...', 'c..'],\n   (5, 3, 10): None,\n   (5, 3, 11): ['***', '***', '***', '*..', '*.c'],\n   (5, 3, 12): None,\n   (5, 3, 13): None,\n   (5, 3, 14): ['***', '***', '***', '***', '**c'],\n   (5, 4, 0): ['c...', '....', '....', '....', '....'],\n   (5, 4, 1): ['*.c.', '....', '....', '....', '....'],\n   (5, 4, 2): ['**.c', '....', '....', '....', '....'],\n   (5, 4, 3): ['**.c', '*...', '....', '....', '....'],\n   (5, 4, 4): ['****', '....', 'c...', '....', '....'],\n   (5, 4, 5): ['****', '*...', '..c.', '....', '....'],\n   (5, 4, 6): ['****', '**..', '...c', '....', '....'],\n   (5, 4, 7): ['****', '**..', '*..c', '....', '....'],\n   (5, 4, 8): ['****', '****', '....', 'c...', '....'],\n   (5, 4, 9): ['****', '****', '*...', '..c.', '....'],\n   (5, 4, 10): ['****', '****', '**..', '...c', '....'],\n   (5, 4, 11): ['****', '****', '*...', '*.c.', '*...'],\n   (5, 4, 12): ['****', '****', '****', '....', 'c...'],\n   (5, 4, 13): None,\n   (5, 4, 14): ['****', '****', '****', '*...', '*.c.'],\n   (5, 4, 15): None,\n   (5, 4, 16): ['****', '****', '****', '**..', '**.c'],\n   (5, 4, 17): None,\n   (5, 4, 18): None,\n   (5, 4, 19): ['****', '****', '****', '****', '***c'],\n   (5, 5, 0): ['c....', '.....', '.....', '.....', '.....'],\n   (5, 5, 1): ['*.c..', '.....', '.....', '.....', '.....'],\n   (5, 5, 2): ['**.c.', '.....', '.....', '.....', '.....'],\n   (5, 5, 3): ['***.c', '.....', '.....', '.....', '.....'],\n   (5, 5, 4): ['***.c', '*....', '.....', '.....', '.....'],\n   (5, 5, 5): ['*****', '.....', 'c....', '.....', '.....'],\n   (5, 5, 6): ['*****', '*....', '..c..', '.....', '.....'],\n   (5, 5, 7): ['*****', '**...', '...c.', '.....', '.....'],\n   (5, 5, 8): ['*****', '***..', '....c', '.....', '.....'],\n   (5, 5, 9): ['*****', '***..', '*...c', '.....', '.....'],\n   (5, 5, 10): ['*****', '*****', '.....', 'c....', '.....'],\n   (5, 5, 11): ['*****', '*****', '*....', '..c..', '.....'],\n   (5, 5, 12): ['*****', '*****', '**...', '...c.', '.....'],\n   (5, 5, 13): ['*****', '*****', '***..', '....c', '.....'],\n   (5, 5, 14): ['*****', '*****', '**...', '*..c.', '*....'],\n   (5, 5, 15): ['*****', '*****', '*****', '.....', 'c....'],\n   (5, 5, 16): ['*****', '*****', '**...', '**.c.', '**...'],\n   (5, 5, 17): ['*****', '*****', '*****', '*....', '*.c..'],\n   (5, 5, 18): None,\n   (5, 5, 19): ['*****', '*****', '*****', '**...', '**.c.'],\n   (5, 5, 20): None,\n   (5, 5, 21): ['*****', '*****', '*****', '***..', '***.c'],\n   (5, 5, 22): None,\n   (5, 5, 23): None,\n   (5, 5, 24): ['*****', '*****', '*****', '*****', '****c']}\n  \n  \n  T = int(input())\n  for i in range(T):\n  	R, C, M = map(int, input().split())\n  	print('Case #{}:'.format(i + 1))\n  	try:\n  		print('\n'.join(CACHE[(R, C, M)]))\n  	except:\n  		print('Impossible')\n <CODESPLIT> 65
T = int(input())\n  \n  for i in range(T):\n      a1 = int(input())\n      mat1 = [list(map(int, input().split())) for k in range(4)]\n      a2 = int(input())\n      mat2 = [list(map(int, input().split())) for k in range(4)]\n      final_set = set(mat1[a1 - 1]) & set(mat2[a2 - 1])\n      if not len(final_set):\n          s = 'Volunteer cheated!'\n      elif len(final_set) > 1:\n          s = 'Bad magician!'\n      else:\n          s = list(final_set)[0]\n      print('Case #{}: {}'.format(i + 1, s))\n <CODESPLIT> 65
